
F407_OTG_AUDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800cfb8  0800cfb8  0001cfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c0  0800d0c0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0c0  0800d0c0  0001d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c8  0800d0c8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0cc  0800d0cc  0001d0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800d0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a5dc  20000090  0800d160  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a66c  0800d160  0002a66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002abf0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d5  00000000  00000000  0004acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  00050288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  000517b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fdf  00000000  00000000  00052ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e76  00000000  00000000  00079abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8ea  00000000  00000000  0009a935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016721f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a4  00000000  00000000  00167274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cfa0 	.word	0x0800cfa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800cfa0 	.word	0x0800cfa0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <audioInit>:
extern I2S_HandleTypeDef hi2s3;

int16_t aBuf[BUFFER_SIZE];
uint16_t bw = 0;

void audioInit(void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af04      	add	r7, sp, #16
	uint8_t pData;
	HAL_Delay(10);
 80004c6:	200a      	movs	r0, #10
 80004c8:	f000 fe60 	bl	800118c <HAL_Delay>
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port,Audio_RST_Pin,GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	4858      	ldr	r0, [pc, #352]	; (8000634 <audioInit+0x174>)
 80004d2:	f001 fc9d 	bl	8001e10 <HAL_GPIO_WritePin>
	pData = 0x01;
 80004d6:	2301      	movs	r3, #1
 80004d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x02, 1, &pData, 1, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9302      	str	r3, [sp, #8]
 80004de:	2301      	movs	r3, #1
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2301      	movs	r3, #1
 80004e8:	2202      	movs	r2, #2
 80004ea:	2194      	movs	r1, #148	; 0x94
 80004ec:	4852      	ldr	r0, [pc, #328]	; (8000638 <audioInit+0x178>)
 80004ee:	f003 fafb 	bl	8003ae8 <HAL_I2C_Mem_Write>
	pData = 0xAF;
 80004f2:	23af      	movs	r3, #175	; 0xaf
 80004f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x04, 1, &pData, 1, 100);
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	9302      	str	r3, [sp, #8]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2301      	movs	r3, #1
 8000504:	2204      	movs	r2, #4
 8000506:	2194      	movs	r1, #148	; 0x94
 8000508:	484b      	ldr	r0, [pc, #300]	; (8000638 <audioInit+0x178>)
 800050a:	f003 faed 	bl	8003ae8 <HAL_I2C_Mem_Write>
	//pData = 0x20;
	pData = 0xA0;
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x05, 1, &pData, 1, 100);
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	9302      	str	r3, [sp, #8]
 8000516:	2301      	movs	r3, #1
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2205      	movs	r2, #5
 8000522:	2194      	movs	r1, #148	; 0x94
 8000524:	4844      	ldr	r0, [pc, #272]	; (8000638 <audioInit+0x178>)
 8000526:	f003 fadf 	bl	8003ae8 <HAL_I2C_Mem_Write>
	pData = 0x07;
 800052a:	2307      	movs	r3, #7
 800052c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x06, 1, &pData, 1, 100);
 800052e:	2364      	movs	r3, #100	; 0x64
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	2301      	movs	r3, #1
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2301      	movs	r3, #1
 800053c:	2206      	movs	r2, #6
 800053e:	2194      	movs	r1, #148	; 0x94
 8000540:	483d      	ldr	r0, [pc, #244]	; (8000638 <audioInit+0x178>)
 8000542:	f003 fad1 	bl	8003ae8 <HAL_I2C_Mem_Write>
	pData = 0x99;
 8000546:	2399      	movs	r3, #153	; 0x99
 8000548:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x00, 1, &pData, 1, 100);
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9302      	str	r3, [sp, #8]
 800054e:	2301      	movs	r3, #1
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	2200      	movs	r2, #0
 800055a:	2194      	movs	r1, #148	; 0x94
 800055c:	4836      	ldr	r0, [pc, #216]	; (8000638 <audioInit+0x178>)
 800055e:	f003 fac3 	bl	8003ae8 <HAL_I2C_Mem_Write>
	pData = 0x80;
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x47, 1, &pData, 1, 100);
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	9302      	str	r3, [sp, #8]
 800056a:	2301      	movs	r3, #1
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2301      	movs	r3, #1
 8000574:	2247      	movs	r2, #71	; 0x47
 8000576:	2194      	movs	r1, #148	; 0x94
 8000578:	482f      	ldr	r0, [pc, #188]	; (8000638 <audioInit+0x178>)
 800057a:	f003 fab5 	bl	8003ae8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, 0x94, 0x32, 1, &pData, 1, 100);
 800057e:	2364      	movs	r3, #100	; 0x64
 8000580:	9302      	str	r3, [sp, #8]
 8000582:	2301      	movs	r3, #1
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	2232      	movs	r2, #50	; 0x32
 800058e:	2194      	movs	r1, #148	; 0x94
 8000590:	4829      	ldr	r0, [pc, #164]	; (8000638 <audioInit+0x178>)
 8000592:	f003 fba3 	bl	8003cdc <HAL_I2C_Mem_Read>
	pData |= 0x80;
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x32, 1, &pData, 1, 100);
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	2301      	movs	r3, #1
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	2232      	movs	r2, #50	; 0x32
 80005b0:	2194      	movs	r1, #148	; 0x94
 80005b2:	4821      	ldr	r0, [pc, #132]	; (8000638 <audioInit+0x178>)
 80005b4:	f003 fa98 	bl	8003ae8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, 0x94, 0x32, 1, &pData, 1, 100);
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2232      	movs	r2, #50	; 0x32
 80005c8:	2194      	movs	r1, #148	; 0x94
 80005ca:	481b      	ldr	r0, [pc, #108]	; (8000638 <audioInit+0x178>)
 80005cc:	f003 fb86 	bl	8003cdc <HAL_I2C_Mem_Read>
	pData &= ~0x80;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x32, 1, &pData, 1, 100);
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	2301      	movs	r3, #1
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	2232      	movs	r2, #50	; 0x32
 80005ea:	2194      	movs	r1, #148	; 0x94
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <audioInit+0x178>)
 80005ee:	f003 fa7b 	bl	8003ae8 <HAL_I2C_Mem_Write>
	pData = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x00, 1, &pData, 1, 100);
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2200      	movs	r2, #0
 8000606:	2194      	movs	r1, #148	; 0x94
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <audioInit+0x178>)
 800060a:	f003 fa6d 	bl	8003ae8 <HAL_I2C_Mem_Write>
	pData = 0x9E;
 800060e:	239e      	movs	r3, #158	; 0x9e
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x02, 1, &pData, 1, 100);
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	9302      	str	r3, [sp, #8]
 8000616:	2301      	movs	r3, #1
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	2202      	movs	r2, #2
 8000622:	2194      	movs	r1, #148	; 0x94
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <audioInit+0x178>)
 8000626:	f003 fa5f 	bl	8003ae8 <HAL_I2C_Mem_Write>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40020c00 	.word	0x40020c00
 8000638:	20007dfc 	.word	0x20007dfc

0800063c <audioPlay>:
//if(++bw == BUFFER_SIZE){
//	  HAL_I2S_Transmit_IT(&hi2s3, aBuf, BUFFER_SIZE);
//	  bw = 0;
//}

void audioPlay(const char * aPath){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint32_t br;
	if(f_open(&USBHFile, aPath, FA_READ)) return;
 8000644:	2201      	movs	r2, #1
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4821      	ldr	r0, [pc, #132]	; (80006d0 <audioPlay+0x94>)
 800064a:	f00b f9ff 	bl	800ba4c <f_open>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d138      	bne.n	80006c6 <audioPlay+0x8a>
	audioVolume(0x0, -40);
 8000654:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f843 	bl	80006e4 <audioVolume>
	f_lseek(&USBHFile, 157);
 800065e:	219d      	movs	r1, #157	; 0x9d
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <audioPlay+0x94>)
 8000662:	f00b fdc6 	bl	800c1f2 <f_lseek>
	f_read(&USBHFile, (uint8_t *)aBuf, BUFFER_SIZE*2, &br);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	f647 5202 	movw	r2, #32002	; 0x7d02
 800066e:	4919      	ldr	r1, [pc, #100]	; (80006d4 <audioPlay+0x98>)
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <audioPlay+0x94>)
 8000672:	f00b fbb7 	bl	800bde4 <f_read>
	HAL_I2S_Transmit_DMA(&hi2s3, aBuf, BUFFER_SIZE);
 8000676:	f643 6281 	movw	r2, #16001	; 0x3e81
 800067a:	4916      	ldr	r1, [pc, #88]	; (80006d4 <audioPlay+0x98>)
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <audioPlay+0x9c>)
 800067e:	f004 f9eb 	bl	8004a58 <HAL_I2S_Transmit_DMA>
	while(1){
		while(bw < 2);
 8000682:	bf00      	nop
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <audioPlay+0xa0>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d9fb      	bls.n	8000684 <audioPlay+0x48>
		bw = 0;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <audioPlay+0xa0>)
 800068e:	2200      	movs	r2, #0
 8000690:	801a      	strh	r2, [r3, #0]
		f_read(&USBHFile, (uint8_t *)aBuf, BUFFER_SIZE*2, &br);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	f647 5202 	movw	r2, #32002	; 0x7d02
 800069a:	490e      	ldr	r1, [pc, #56]	; (80006d4 <audioPlay+0x98>)
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <audioPlay+0x94>)
 800069e:	f00b fba1 	bl	800bde4 <f_read>
		//swapBuffer(); para little-endian
		if(!br) break;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d005      	beq.n	80006b4 <audioPlay+0x78>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <audioPlay+0xa4>)
 80006ae:	f001 fbc8 	bl	8001e42 <HAL_GPIO_TogglePin>
		while(bw < 2);
 80006b2:	e7e6      	b.n	8000682 <audioPlay+0x46>
		if(!br) break;
 80006b4:	bf00      	nop
	}
	f_close(&USBHFile);
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <audioPlay+0x94>)
 80006b8:	f00b fd71 	bl	800c19e <f_close>
	audioVolume(0,0);
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 f810 	bl	80006e4 <audioVolume>
 80006c4:	e000      	b.n	80006c8 <audioPlay+0x8c>
	if(f_open(&USBHFile, aPath, FA_READ)) return;
 80006c6:	bf00      	nop
}
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20007f58 	.word	0x20007f58
 80006d4:	200000f8 	.word	0x200000f8
 80006d8:	20007f08 	.word	0x20007f08
 80006dc:	200000ac 	.word	0x200000ac
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <audioVolume>:

void audioVolume(int8_t aVolI, int8_t aVolO){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	int8_t pData[2] = {aVolI, aVolO};
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	733b      	strb	r3, [r7, #12]
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x1A, 1, pData, 1, 100);
 80006fc:	2364      	movs	r3, #100	; 0x64
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	2301      	movs	r3, #1
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	221a      	movs	r2, #26
 800070e:	2194      	movs	r1, #148	; 0x94
 8000710:	4817      	ldr	r0, [pc, #92]	; (8000770 <audioVolume+0x8c>)
 8000712:	f003 f9e9 	bl	8003ae8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x1B, 1, pData, 1, 100);
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2301      	movs	r3, #1
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	221b      	movs	r2, #27
 8000728:	2194      	movs	r1, #148	; 0x94
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <audioVolume+0x8c>)
 800072c:	f003 f9dc 	bl	8003ae8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x20, 1, &pData[1], 1, 100);
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	3301      	adds	r3, #1
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	2220      	movs	r2, #32
 8000744:	2194      	movs	r1, #148	; 0x94
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <audioVolume+0x8c>)
 8000748:	f003 f9ce 	bl	8003ae8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x21, 1, &pData[1], 1, 100);
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	9302      	str	r3, [sp, #8]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	3301      	adds	r3, #1
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2221      	movs	r2, #33	; 0x21
 8000760:	2194      	movs	r1, #148	; 0x94
 8000762:	4803      	ldr	r0, [pc, #12]	; (8000770 <audioVolume+0x8c>)
 8000764:	f003 f9c0 	bl	8003ae8 <HAL_I2C_Mem_Write>
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20007dfc 	.word	0x20007dfc

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 fc96 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f844 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f000 f976 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000784:	f000 f954 	bl	8000a30 <MX_DMA_Init>
  MX_I2C1_Init();
 8000788:	f000 f8c0 	bl	800090c <MX_I2C1_Init>
  MX_I2S3_Init();
 800078c:	f000 f8ec 	bl	8000968 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000790:	f000 f918 	bl	80009c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000794:	f00b ffae 	bl	800c6f4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000798:	f006 fb0a 	bl	8006db0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  audioInit();
 800079c:	f7ff fe90 	bl	80004c0 <audioInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007a0:	f00b ffce 	bl	800c740 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    switch(Appli_state){
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <main+0x80>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d8f9      	bhi.n	80007a0 <main+0x2c>
 80007ac:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <main+0x40>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	080007a1 	.word	0x080007a1
 80007b8:	080007c5 	.word	0x080007c5
 80007bc:	080007dd 	.word	0x080007dd
 80007c0:	080007e5 	.word	0x080007e5
    case APPLICATION_IDLE:
    	break;
    case APPLICATION_START:
    	f_mount(&USBHFatFS,USBHPath,0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	490c      	ldr	r1, [pc, #48]	; (80007f8 <main+0x84>)
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <main+0x88>)
 80007ca:	f00b f8f9 	bl	800b9c0 <f_mount>
    	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <main+0x8c>)
 80007d6:	f001 fb1b 	bl	8001e10 <HAL_GPIO_WritePin>
    	break;
 80007da:	e00a      	b.n	80007f2 <main+0x7e>
    case APPLICATION_READY:
    	audioPlay("prueba3.wav");
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <main+0x90>)
 80007de:	f7ff ff2d 	bl	800063c <audioPlay>
    	while(1);
 80007e2:	e7fe      	b.n	80007e2 <main+0x6e>
    	break;
    case APPLICATION_DISCONNECT:
    	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <main+0x8c>)
 80007ec:	f001 fb10 	bl	8001e10 <HAL_GPIO_WritePin>
    	break;
 80007f0:	bf00      	nop
    MX_USB_HOST_Process();
 80007f2:	e7d5      	b.n	80007a0 <main+0x2c>
 80007f4:	200000ec 	.word	0x200000ec
 80007f8:	20007f54 	.word	0x20007f54
 80007fc:	20008f88 	.word	0x20008f88
 8000800:	40020c00 	.word	0x40020c00
 8000804:	0800cfb8 	.word	0x0800cfb8

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b098      	sub	sp, #96	; 0x60
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00c faf2 	bl	800ce00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <SystemClock_Config+0xfc>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a30      	ldr	r2, [pc, #192]	; (8000904 <SystemClock_Config+0xfc>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <SystemClock_Config+0xfc>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <SystemClock_Config+0x100>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a2a      	ldr	r2, [pc, #168]	; (8000908 <SystemClock_Config+0x100>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <SystemClock_Config+0x100>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000872:	2301      	movs	r3, #1
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000880:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000884:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000886:	2308      	movs	r3, #8
 8000888:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800088a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000894:	2307      	movs	r3, #7
 8000896:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089c:	4618      	mov	r0, r3
 800089e:	f004 fd41 	bl	8005324 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008a8:	f000 f9e0 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2105      	movs	r1, #5
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 ff9a 	bl	8005804 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008d6:	f000 f9c9 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008da:	2301      	movs	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80008de:	f240 130f 	movw	r3, #271	; 0x10f
 80008e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 f971 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008f8:	f000 f9b8 	bl	8000c6c <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3760      	adds	r7, #96	; 0x60
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C1_Init+0x50>)
 8000912:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_I2C1_Init+0x54>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2C1_Init+0x50>)
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_I2C1_Init+0x58>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_I2C1_Init+0x50>)
 800092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_I2C1_Init+0x50>)
 800094a:	f002 ff89 	bl	8003860 <HAL_I2C_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000954:	f000 f98a 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20007dfc 	.word	0x20007dfc
 8000960:	40005400 	.word	0x40005400
 8000964:	000186a0 	.word	0x000186a0

08000968 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_I2S3_Init+0x54>)
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <MX_I2S3_Init+0x58>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2S3_Init+0x54>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_I2S3_Init+0x54>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2S3_Init+0x54>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_I2S3_Init+0x54>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_I2S3_Init+0x54>)
 8000990:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000994:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_I2S3_Init+0x54>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_I2S3_Init+0x54>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_I2S3_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_I2S3_Init+0x54>)
 80009aa:	f003 ff15 	bl	80047d8 <HAL_I2S_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80009b4:	f000 f95a 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20007f08 	.word	0x20007f08
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <MX_SPI1_Init+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a10:	220a      	movs	r2, #10
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_SPI1_Init+0x64>)
 8000a16:	f005 fa1d 	bl	8005e54 <HAL_SPI_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a20:	f000 f924 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20007eb0 	.word	0x20007eb0
 8000a2c:	40013000 	.word	0x40013000

08000a30 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2010      	movs	r0, #16
 8000a58:	f000 fc97 	bl	800138a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a5c:	2010      	movs	r0, #16
 8000a5e:	f000 fcb0 	bl	80013c2 <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	4b71      	ldr	r3, [pc, #452]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a70      	ldr	r2, [pc, #448]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b6e      	ldr	r3, [pc, #440]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	4b6a      	ldr	r3, [pc, #424]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a69      	ldr	r2, [pc, #420]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b67      	ldr	r3, [pc, #412]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b63      	ldr	r3, [pc, #396]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a62      	ldr	r2, [pc, #392]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b60      	ldr	r3, [pc, #384]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b5c      	ldr	r3, [pc, #368]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a5b      	ldr	r2, [pc, #364]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b59      	ldr	r3, [pc, #356]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b55      	ldr	r3, [pc, #340]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a54      	ldr	r2, [pc, #336]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <MX_GPIO_Init+0x1e0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2108      	movs	r1, #8
 8000b32:	4848      	ldr	r0, [pc, #288]	; (8000c54 <MX_GPIO_Init+0x1e4>)
 8000b34:	f001 f96c 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4846      	ldr	r0, [pc, #280]	; (8000c58 <MX_GPIO_Init+0x1e8>)
 8000b3e:	f001 f967 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000b42:	2200      	movs	r2, #0
 8000b44:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b48:	4844      	ldr	r0, [pc, #272]	; (8000c5c <MX_GPIO_Init+0x1ec>)
 8000b4a:	f001 f961 	bl	8001e10 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	483b      	ldr	r0, [pc, #236]	; (8000c54 <MX_GPIO_Init+0x1e4>)
 8000b66:	f000 ffb7 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4835      	ldr	r0, [pc, #212]	; (8000c58 <MX_GPIO_Init+0x1e8>)
 8000b82:	f000 ffa9 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b86:	2308      	movs	r3, #8
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b96:	2305      	movs	r3, #5
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	482d      	ldr	r0, [pc, #180]	; (8000c58 <MX_GPIO_Init+0x1e8>)
 8000ba2:	f000 ff99 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	482a      	ldr	r0, [pc, #168]	; (8000c64 <MX_GPIO_Init+0x1f4>)
 8000bba:	f000 ff8d 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4825      	ldr	r0, [pc, #148]	; (8000c68 <MX_GPIO_Init+0x1f8>)
 8000bd2:	f000 ff81 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be8:	2305      	movs	r3, #5
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481d      	ldr	r0, [pc, #116]	; (8000c68 <MX_GPIO_Init+0x1f8>)
 8000bf4:	f000 ff70 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000bf8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bfc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_GPIO_Init+0x1ec>)
 8000c12:	f000 ff61 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c16:	2320      	movs	r3, #32
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_GPIO_Init+0x1ec>)
 8000c2a:	f000 ff55 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_GPIO_Init+0x1f0>)
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_GPIO_Init+0x1e4>)
 8000c42:	f000 ff49 	bl	8001ad8 <HAL_GPIO_Init>

}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	; 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	10120000 	.word	0x10120000
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020400 	.word	0x40020400

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f000 fb5a 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_I2C_MspInit+0x84>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d12c      	bne.n	8000d48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_I2C_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_I2C_MspInit+0x88>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	2312      	movs	r3, #18
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <HAL_I2C_MspInit+0x8c>)
 8000d28:	f000 fed6 	bl	8001ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020400 	.word	0x40020400

08000d5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a46      	ldr	r2, [pc, #280]	; (8000e94 <HAL_I2S_MspInit+0x138>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	f040 8085 	bne.w	8000e8a <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a3c      	ldr	r2, [pc, #240]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a35      	ldr	r2, [pc, #212]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <HAL_I2S_MspInit+0x13c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de4:	2306      	movs	r3, #6
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	482b      	ldr	r0, [pc, #172]	; (8000e9c <HAL_I2S_MspInit+0x140>)
 8000df0:	f000 fe72 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <HAL_I2S_MspInit+0x144>)
 8000e12:	f000 fe61 	bl	8001ad8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e18:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <HAL_I2S_MspInit+0x14c>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e54:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e58:	2204      	movs	r2, #4
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e5e:	2203      	movs	r2, #3
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e70:	f000 fac2 	bl	80013f8 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_I2S_MspInit+0x122>
    {
      Error_Handler();
 8000e7a:	f7ff fef7 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_I2S_MspInit+0x148>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40003c00 	.word	0x40003c00
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	20007e50 	.word	0x20007e50
 8000ea8:	40026088 	.word	0x40026088

08000eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_SPI_MspInit+0x84>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12b      	bne.n	8000f26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_SPI_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f06:	23e0      	movs	r3, #224	; 0xe0
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f16:	2305      	movs	r3, #5
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_SPI_MspInit+0x8c>)
 8000f22:	f000 fdd9 	bl	8001ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40013000 	.word	0x40013000
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f8dc 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <DMA1_Stream5_IRQHandler+0x1c>)
 8000f9e:	f000 fb31 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
  bw++;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <DMA1_Stream5_IRQHandler+0x20>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <DMA1_Stream5_IRQHandler+0x20>)
 8000fac:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20007e50 	.word	0x20007e50
 8000fb8:	200000ac 	.word	0x200000ac

08000fbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <OTG_FS_IRQHandler+0x10>)
 8000fc2:	f001 f9e9 	bl	8002398 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000a398 	.word	0x2000a398

08000fd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x16>
		heap_end = &end;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <_sbrk+0x50>)
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <_sbrk+0x54>)
 8000fe4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <_sbrk+0x50>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <_sbrk+0x50>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	466a      	mov	r2, sp
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d907      	bls.n	800100a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ffa:	f00b feb9 	bl	800cd70 <__errno>
 8000ffe:	4603      	mov	r3, r0
 8001000:	220c      	movs	r2, #12
 8001002:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	e006      	b.n	8001018 <_sbrk+0x48>
	}

	heap_end += incr;
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <_sbrk+0x50>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a03      	ldr	r2, [pc, #12]	; (8001020 <_sbrk+0x50>)
 8001014:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000b0 	.word	0x200000b0
 8001024:	2000a670 	.word	0x2000a670

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SystemInit+0x28>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SystemInit+0x28>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SystemInit+0x28>)
 800103e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001042:	609a      	str	r2, [r3, #8]
#endif
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001058:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800105a:	e003      	b.n	8001064 <LoopCopyDataInit>

0800105c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800105e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001060:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001062:	3104      	adds	r1, #4

08001064 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001068:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800106a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800106c:	d3f6      	bcc.n	800105c <CopyDataInit>
  ldr  r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001070:	e002      	b.n	8001078 <LoopFillZerobss>

08001072 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001072:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001074:	f842 3b04 	str.w	r3, [r2], #4

08001078 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800107a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800107c:	d3f9      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800107e:	f7ff ffd3 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f00b fe7b 	bl	800cd7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fb75 	bl	8000774 <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800108c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001090:	0800d0d0 	.word	0x0800d0d0
  ldr  r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001098:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800109c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80010a0:	2000a66c 	.word	0x2000a66c

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f94f 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fdce 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f967 	bl	80013de <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f92f 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	20007f50 	.word	0x20007f50

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20007f50 	.word	0x20007f50

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff3e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff31 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff feb6 	bl	8001174 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e099      	b.n	8001548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001434:	e00f      	b.n	8001456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001436:	f7ff fe9d 	bl	8001174 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b05      	cmp	r3, #5
 8001442:	d908      	bls.n	8001456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e078      	b.n	8001548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e8      	bne.n	8001436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_DMA_Init+0x158>)
 8001470:	4013      	ands	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d107      	bne.n	80014c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4313      	orrs	r3, r2
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4313      	orrs	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f023 0307 	bic.w	r3, r3, #7
 80014d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4313      	orrs	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d117      	bne.n	800151a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00e      	beq.n	800151a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fa6f 	bl	80019e0 <DMA_CheckFifoParam>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001516:	2301      	movs	r3, #1
 8001518:	e016      	b.n	8001548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fa26 	bl	8001974 <DMA_CalcBaseAndBitshift>
 8001528:	4603      	mov	r3, r0
 800152a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	223f      	movs	r2, #63	; 0x3f
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	f010803f 	.word	0xf010803f

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_DMA_Start_IT+0x26>
 8001576:	2302      	movs	r3, #2
 8001578:	e040      	b.n	80015fc <HAL_DMA_Start_IT+0xa8>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d12f      	bne.n	80015ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f9b8 	bl	8001918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0216 	orr.w	r2, r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0208 	orr.w	r2, r2, #8
 80015da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e005      	b.n	80015fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015f6:	2302      	movs	r3, #2
 80015f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001610:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_DMA_IRQHandler+0x258>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a92      	ldr	r2, [pc, #584]	; (8001860 <HAL_DMA_IRQHandler+0x25c>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a9b      	lsrs	r3, r3, #10
 800161c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	2208      	movs	r2, #8
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01a      	beq.n	8001670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	2208      	movs	r2, #8
 800165e:	409a      	lsls	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001692:	2201      	movs	r2, #1
 8001694:	409a      	lsls	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2204      	movs	r2, #4
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d012      	beq.n	80016dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	2204      	movs	r2, #4
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f043 0204 	orr.w	r2, r3, #4
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	2210      	movs	r2, #16
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d043      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d03c      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2210      	movs	r2, #16
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d018      	beq.n	8001746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d108      	bne.n	8001734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
 8001732:	e01f      	b.n	8001774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01b      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
 8001744:	e016      	b.n	8001774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0208 	bic.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2220      	movs	r2, #32
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 808e 	beq.w	80018a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8086 	beq.w	80018a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2220      	movs	r2, #32
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d136      	bne.n	800181c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0216 	bic.w	r2, r2, #22
 80017bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_DMA_IRQHandler+0x1da>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0208 	bic.w	r2, r2, #8
 80017ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	223f      	movs	r2, #63	; 0x3f
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180e:	2b00      	cmp	r3, #0
 8001810:	d07d      	beq.n	800190e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
        }
        return;
 800181a:	e078      	b.n	800190e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01c      	beq.n	8001864 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d108      	bne.n	800184a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	2b00      	cmp	r3, #0
 800183e:	d030      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
 8001848:	e02b      	b.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d027      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
 800185a:	e022      	b.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
 800185c:	20000000 	.word	0x20000000
 8001860:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10f      	bne.n	8001892 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0210 	bic.w	r2, r2, #16
 8001880:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d032      	beq.n	8001910 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d022      	beq.n	80018fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2205      	movs	r2, #5
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d307      	bcc.n	80018ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f2      	bne.n	80018ce <HAL_DMA_IRQHandler+0x2ca>
 80018e8:	e000      	b.n	80018ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
 800190c:	e000      	b.n	8001910 <HAL_DMA_IRQHandler+0x30c>
        return;
 800190e:	bf00      	nop
    }
  }
}
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop

08001918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d108      	bne.n	8001958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001956:	e007      	b.n	8001968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	3b10      	subs	r3, #16
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800198e:	4a13      	ldr	r2, [pc, #76]	; (80019dc <DMA_CalcBaseAndBitshift+0x68>)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d909      	bls.n	80019b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	1d1a      	adds	r2, r3, #4
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	659a      	str	r2, [r3, #88]	; 0x58
 80019b4:	e007      	b.n	80019c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	aaaaaaab 	.word	0xaaaaaaab
 80019dc:	0800d024 	.word	0x0800d024

080019e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d11f      	bne.n	8001a3a <DMA_CheckFifoParam+0x5a>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d856      	bhi.n	8001aae <DMA_CheckFifoParam+0xce>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <DMA_CheckFifoParam+0x28>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a2b 	.word	0x08001a2b
 8001a10:	08001a19 	.word	0x08001a19
 8001a14:	08001aaf 	.word	0x08001aaf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d046      	beq.n	8001ab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a28:	e043      	b.n	8001ab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a32:	d140      	bne.n	8001ab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a38:	e03d      	b.n	8001ab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a42:	d121      	bne.n	8001a88 <DMA_CheckFifoParam+0xa8>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d837      	bhi.n	8001aba <DMA_CheckFifoParam+0xda>
 8001a4a:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <DMA_CheckFifoParam+0x70>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001a67 	.word	0x08001a67
 8001a58:	08001a61 	.word	0x08001a61
 8001a5c:	08001a79 	.word	0x08001a79
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
      break;
 8001a64:	e030      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d025      	beq.n	8001abe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a76:	e022      	b.n	8001abe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a80:	d11f      	bne.n	8001ac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a86:	e01c      	b.n	8001ac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d903      	bls.n	8001a96 <DMA_CheckFifoParam+0xb6>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d003      	beq.n	8001a9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a94:	e018      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
      break;
 8001a9a:	e015      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00e      	beq.n	8001ac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8001aac:	e00b      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8001aae:	bf00      	nop
 8001ab0:	e00a      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ab2:	bf00      	nop
 8001ab4:	e008      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ab6:	bf00      	nop
 8001ab8:	e006      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8001aba:	bf00      	nop
 8001abc:	e004      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8001abe:	bf00      	nop
 8001ac0:	e002      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ac2:	bf00      	nop
 8001ac4:	e000      	b.n	8001ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ac6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e16b      	b.n	8001dcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 815a 	bne.w	8001dc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d00b      	beq.n	8001b32 <HAL_GPIO_Init+0x5a>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b26:	2b11      	cmp	r3, #17
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b12      	cmp	r3, #18
 8001b30:	d130      	bne.n	8001b94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 0201 	and.w	r2, r3, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0xfc>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b12      	cmp	r3, #18
 8001bd2:	d123      	bne.n	8001c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80b4 	beq.w	8001dc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7a:	4a5b      	ldr	r2, [pc, #364]	; (8001de8 <HAL_GPIO_Init+0x310>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_GPIO_Init+0x314>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_GPIO_Init+0x226>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_GPIO_Init+0x318>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x222>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_GPIO_Init+0x31c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x21e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x320>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x21a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x216>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x328>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x212>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x32c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x20e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x330>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x20a>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x310>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d42:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_GPIO_Init+0x334>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae90 	bls.w	8001af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	401a      	ands	r2, r3
 8001e56:	887b      	ldrh	r3, [r7, #2]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d104      	bne.n	8001e66 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	041a      	lsls	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	b08f      	sub	sp, #60	; 0x3c
 8001e7c:	af0a      	add	r7, sp, #40	; 0x28
 8001e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e054      	b.n	8001f34 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f00a fc83 	bl	800c7b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2203      	movs	r2, #3
 8001eae:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 f899 	bl	8006000 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	687e      	ldr	r6, [r7, #4]
 8001ed6:	466d      	mov	r5, sp
 8001ed8:	f106 0410 	add.w	r4, r6, #16
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eec:	1d33      	adds	r3, r6, #4
 8001eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	f004 f813 	bl	8005f1c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 f890 	bl	8006022 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	687e      	ldr	r6, [r7, #4]
 8001f0a:	466d      	mov	r5, sp
 8001f0c:	f106 0410 	add.w	r4, r6, #16
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f20:	1d33      	adds	r3, r6, #4
 8001f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f24:	6838      	ldr	r0, [r7, #0]
 8001f26:	f004 f9a3 	bl	8006270 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	70fb      	strb	r3, [r7, #3]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70bb      	strb	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_HCD_HC_Init+0x28>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e07f      	b.n	8002064 <HAL_HCD_HC_Init+0x128>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	333d      	adds	r3, #61	; 0x3d
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3338      	adds	r3, #56	; 0x38
 8001f90:	787a      	ldrb	r2, [r7, #1]
 8001f92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3340      	adds	r3, #64	; 0x40
 8001fa4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fa6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3339      	adds	r3, #57	; 0x39
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	333f      	adds	r3, #63	; 0x3f
 8001fcc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001fd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	78bb      	ldrb	r3, [r7, #2]
 8001fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fda:	b2d8      	uxtb	r0, r3
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	333a      	adds	r3, #58	; 0x3a
 8001fea:	4602      	mov	r2, r0
 8001fec:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001fee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0a      	bge.n	800200c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	333b      	adds	r3, #59	; 0x3b
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e009      	b.n	8002020 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	333b      	adds	r3, #59	; 0x3b
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	333c      	adds	r3, #60	; 0x3c
 8002030:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002034:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	787c      	ldrb	r4, [r7, #1]
 800203c:	78ba      	ldrb	r2, [r7, #2]
 800203e:	78f9      	ldrb	r1, [r7, #3]
 8002040:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4623      	mov	r3, r4
 8002052:	f004 fa8f 	bl	8006574 <USB_HC_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}

0800206c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_HCD_HC_Halt+0x1e>
 8002086:	2302      	movs	r3, #2
 8002088:	e00f      	b.n	80020aa <HAL_HCD_HC_Halt+0x3e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fcc7 	bl	8006a2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	70fb      	strb	r3, [r7, #3]
 80020c6:	460b      	mov	r3, r1
 80020c8:	70bb      	strb	r3, [r7, #2]
 80020ca:	4613      	mov	r3, r2
 80020cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	333b      	adds	r3, #59	; 0x3b
 80020de:	78ba      	ldrb	r2, [r7, #2]
 80020e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	787a      	ldrb	r2, [r7, #1]
 80020f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020f6:	7c3b      	ldrb	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d114      	bne.n	8002126 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3342      	adds	r3, #66	; 0x42
 800210c:	2203      	movs	r2, #3
 800210e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	333d      	adds	r3, #61	; 0x3d
 8002120:	7f3a      	ldrb	r2, [r7, #28]
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e009      	b.n	800213a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	3342      	adds	r3, #66	; 0x42
 8002136:	2202      	movs	r2, #2
 8002138:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800213a:	787b      	ldrb	r3, [r7, #1]
 800213c:	2b03      	cmp	r3, #3
 800213e:	f200 80d6 	bhi.w	80022ee <HAL_HCD_HC_SubmitRequest+0x23a>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	08002159 	.word	0x08002159
 800214c:	080022d9 	.word	0x080022d9
 8002150:	080021c5 	.word	0x080021c5
 8002154:	0800224f 	.word	0x0800224f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002158:	7c3b      	ldrb	r3, [r7, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 80c9 	bne.w	80022f2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002160:	78bb      	ldrb	r3, [r7, #2]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 80c5 	bne.w	80022f2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002168:	8b3b      	ldrh	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	3351      	adds	r3, #81	; 0x51
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	3351      	adds	r3, #81	; 0x51
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	3342      	adds	r3, #66	; 0x42
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021ac:	e0a1      	b.n	80022f2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3342      	adds	r3, #66	; 0x42
 80021be:	2202      	movs	r2, #2
 80021c0:	701a      	strb	r2, [r3, #0]
      break;
 80021c2:	e096      	b.n	80022f2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021c4:	78bb      	ldrb	r3, [r7, #2]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d120      	bne.n	800220c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3351      	adds	r3, #81	; 0x51
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	3342      	adds	r3, #66	; 0x42
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80021f4:	e07e      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3342      	adds	r3, #66	; 0x42
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
      break;
 800220a:	e073      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3350      	adds	r3, #80	; 0x50
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	3342      	adds	r3, #66	; 0x42
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
      break;
 8002236:	e05d      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3342      	adds	r3, #66	; 0x42
 8002248:	2202      	movs	r2, #2
 800224a:	701a      	strb	r2, [r3, #0]
      break;
 800224c:	e052      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800224e:	78bb      	ldrb	r3, [r7, #2]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d120      	bne.n	8002296 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3351      	adds	r3, #81	; 0x51
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	3342      	adds	r3, #66	; 0x42
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800227e:	e039      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	3342      	adds	r3, #66	; 0x42
 8002290:	2202      	movs	r2, #2
 8002292:	701a      	strb	r2, [r3, #0]
      break;
 8002294:	e02e      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3350      	adds	r3, #80	; 0x50
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3342      	adds	r3, #66	; 0x42
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
      break;
 80022c0:	e018      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3342      	adds	r3, #66	; 0x42
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
      break;
 80022d6:	e00d      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	3342      	adds	r3, #66	; 0x42
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
      break;
 80022ec:	e002      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80022ee:	bf00      	nop
 80022f0:	e000      	b.n	80022f4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80022f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3344      	adds	r3, #68	; 0x44
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	8b39      	ldrh	r1, [r7, #24]
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4403      	add	r3, r0
 8002318:	3348      	adds	r3, #72	; 0x48
 800231a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	335c      	adds	r3, #92	; 0x5c
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	334c      	adds	r3, #76	; 0x4c
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3339      	adds	r3, #57	; 0x39
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	335d      	adds	r3, #93	; 0x5d
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	3338      	adds	r3, #56	; 0x38
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	18d1      	adds	r1, r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	f004 f9fe 	bl	8006788 <USB_HC_StartXfer>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop

08002398 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 ff1b 	bl	80061ea <USB_GetMode>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	f040 80ef 	bne.w	800259a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 feff 	bl	80061c4 <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80e5 	beq.w	8002598 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fef6 	bl	80061c4 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e2:	d104      	bne.n	80023ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fee6 	bl	80061c4 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002402:	d104      	bne.n	800240e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800240c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fed6 	bl	80061c4 <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800241e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002422:	d104      	bne.n	800242e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800242c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fec6 	bl	80061c4 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d103      	bne.n	800244a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2202      	movs	r2, #2
 8002448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 feb8 	bl	80061c4 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245e:	d115      	bne.n	800248c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002468:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f00a fa16 	bl	800c8ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f003 ffae 	bl	80063e8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fe97 	bl	80061c4 <USB_ReadInterrupts>
 8002496:	4603      	mov	r3, r0
 8002498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d102      	bne.n	80024a8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f001 f968 	bl	8003778 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fe89 	bl	80061c4 <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d106      	bne.n	80024ca <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f00a f9d9 	bl	800c874 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2208      	movs	r2, #8
 80024c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fe78 	bl	80061c4 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024de:	d138      	bne.n	8002552 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 fa91 	bl	8006a0c <USB_HC_ReadInterrupt>
 80024ea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e025      	b.n	800253e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d018      	beq.n	8002538 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251c:	d106      	bne.n	800252c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8cf 	bl	80026c8 <HCD_HC_IN_IRQHandler>
 800252a:	e005      	b.n	8002538 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fcfd 	bl	8002f32 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3d4      	bcc.n	80024f2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fe34 	bl	80061c4 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b10      	cmp	r3, #16
 8002564:	d101      	bne.n	800256a <HAL_HCD_IRQHandler+0x1d2>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_HCD_IRQHandler+0x1d4>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d014      	beq.n	800259a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0210 	bic.w	r2, r2, #16
 800257e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f001 f84b 	bl	800361c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0210 	orr.w	r2, r2, #16
 8002594:	619a      	str	r2, [r3, #24]
 8002596:	e000      	b.n	800259a <HAL_HCD_IRQHandler+0x202>
      return;
 8002598:	bf00      	nop
    }
  }
}
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_HCD_Start+0x16>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e013      	b.n	80025de <HAL_HCD_Start+0x3e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fd0b 	bl	8005fde <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 ff6e 	bl	80064b0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_HCD_Stop+0x16>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e00d      	b.n	8002618 <HAL_HCD_Stop+0x32>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f004 fb4b 	bl	8006ca4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 ff15 	bl	800645c <USB_ResetPort>
 8002632:	4603      	mov	r3, r0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	335c      	adds	r3, #92	; 0x5c
 8002658:	781b      	ldrb	r3, [r3, #0]
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	334c      	adds	r3, #76	; 0x4c
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 ff57 	bl	8006550 <USB_GetCurrentFrame>
 80026a2:	4603      	mov	r3, r0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 ff32 	bl	8006522 <USB_GetHostSpeed>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d119      	bne.n	800272c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2304      	movs	r3, #4
 8002708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	440a      	add	r2, r1
 8002720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	60d3      	str	r3, [r2, #12]
 800272a:	e0ce      	b.n	80028ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002742:	d12c      	bne.n	800279e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	461a      	mov	r2, r3
 8002752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002756:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	335d      	adds	r3, #93	; 0x5d
 8002768:	2207      	movs	r2, #7
 800276a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f004 f949 	bl	8006a2e <USB_HC_Halt>
 800279c:	e095      	b.n	80028ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d109      	bne.n	80027c8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2320      	movs	r3, #32
 80027c4:	6093      	str	r3, [r2, #8]
 80027c6:	e080      	b.n	80028ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d134      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	0151      	lsls	r1, r2, #5
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	440a      	add	r2, r1
 80027f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	335d      	adds	r3, #93	; 0x5d
 800280e:	2205      	movs	r2, #5
 8002810:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	461a      	mov	r2, r3
 8002820:	2310      	movs	r3, #16
 8002822:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2308      	movs	r3, #8
 8002834:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f004 f8f4 	bl	8006a2e <USB_HC_Halt>
 8002846:	e040      	b.n	80028ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285e:	d134      	bne.n	80028ca <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	0151      	lsls	r1, r2, #5
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	440a      	add	r2, r1
 8002876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f8cf 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	2310      	movs	r3, #16
 80028a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	335d      	adds	r3, #93	; 0x5d
 80028b2:	2208      	movs	r2, #8
 80028b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e0:	d122      	bne.n	8002928 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	0151      	lsls	r1, r2, #5
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	440a      	add	r2, r1
 80028f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f004 f88e 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	461a      	mov	r2, r3
 8002920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002924:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002926:	e300      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 80fd 	bne.w	8002b3a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	3348      	adds	r3, #72	; 0x48
 8002958:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	0159      	lsls	r1, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	440b      	add	r3, r1
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800296c:	1ad1      	subs	r1, r2, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4403      	add	r3, r0
 800297c:	334c      	adds	r3, #76	; 0x4c
 800297e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	335d      	adds	r3, #93	; 0x5d
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	3358      	adds	r3, #88	; 0x58
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	461a      	mov	r2, r3
 80029b6:	2301      	movs	r3, #1
 80029b8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	333f      	adds	r3, #63	; 0x3f
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	333f      	adds	r3, #63	; 0x3f
 80029e0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d121      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	0151      	lsls	r1, r2, #5
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	440a      	add	r2, r1
 80029fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 f80c 	bl	8006a2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2310      	movs	r3, #16
 8002a26:	6093      	str	r3, [r2, #8]
 8002a28:	e070      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	333f      	adds	r3, #63	; 0x3f
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d12a      	bne.n	8002a96 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a5e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	b2d8      	uxtb	r0, r3
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	335c      	adds	r3, #92	; 0x5c
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f009 ff1a 	bl	800c8c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a94:	e03a      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	333f      	adds	r3, #63	; 0x3f
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d12f      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	335c      	adds	r3, #92	; 0x5c
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3350      	adds	r3, #80	; 0x50
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2d8      	uxtb	r0, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3350      	adds	r3, #80	; 0x50
 8002ae8:	4602      	mov	r2, r0
 8002aea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	b2d8      	uxtb	r0, r3
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	335c      	adds	r3, #92	; 0x5c
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4601      	mov	r1, r0
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f009 fede 	bl	800c8c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3350      	adds	r3, #80	; 0x50
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2d8      	uxtb	r0, r3
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3350      	adds	r3, #80	; 0x50
 8002b34:	4602      	mov	r2, r0
 8002b36:	701a      	strb	r2, [r3, #0]
}
 8002b38:	e1f7      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f040 811a 	bne.w	8002d86 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	0151      	lsls	r1, r2, #5
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	440a      	add	r2, r1
 8002b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6c:	f023 0302 	bic.w	r3, r3, #2
 8002b70:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	335d      	adds	r3, #93	; 0x5d
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d10a      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	335c      	adds	r3, #92	; 0x5c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e0d9      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	335d      	adds	r3, #93	; 0x5d
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10a      	bne.n	8002bca <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	335c      	adds	r3, #92	; 0x5c
 8002bc4:	2205      	movs	r2, #5
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e0c3      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	335d      	adds	r3, #93	; 0x5d
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d00a      	beq.n	8002bf6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	335d      	adds	r3, #93	; 0x5d
 8002bf0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d156      	bne.n	8002ca4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	3358      	adds	r3, #88	; 0x58
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1c59      	adds	r1, r3, #1
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4403      	add	r3, r0
 8002c18:	3358      	adds	r3, #88	; 0x58
 8002c1a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3358      	adds	r3, #88	; 0x58
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d914      	bls.n	8002c5c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	3358      	adds	r3, #88	; 0x58
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	335c      	adds	r3, #92	; 0x5c
 8002c56:	2204      	movs	r2, #4
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e009      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c86:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c8e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e056      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	335d      	adds	r3, #93	; 0x5d
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d123      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	2202      	movs	r2, #2
 8002ccc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ce4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e027      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	335d      	adds	r3, #93	; 0x5d
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d11c      	bne.n	8002d52 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3358      	adds	r3, #88	; 0x58
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4403      	add	r3, r0
 8002d3a:	3358      	adds	r3, #88	; 0x58
 8002d3c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	335c      	adds	r3, #92	; 0x5c
 8002d4e:	2204      	movs	r2, #4
 8002d50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2302      	movs	r3, #2
 8002d62:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	b2d8      	uxtb	r0, r3
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f009 fda2 	bl	800c8c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d84:	e0d1      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d13e      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	0151      	lsls	r1, r2, #5
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	440a      	add	r2, r1
 8002db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	3358      	adds	r3, #88	; 0x58
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1c59      	adds	r1, r3, #1
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4403      	add	r3, r0
 8002dde:	3358      	adds	r3, #88	; 0x58
 8002de0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	335d      	adds	r3, #93	; 0x5d
 8002df2:	2206      	movs	r2, #6
 8002df4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fe14 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	461a      	mov	r2, r3
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	6093      	str	r3, [r2, #8]
}
 8002e18:	e087      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d17c      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	333f      	adds	r3, #63	; 0x3f
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d122      	bne.n	8002e8c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	3358      	adds	r3, #88	; 0x58
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	0151      	lsls	r1, r2, #5
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	440a      	add	r2, r1
 8002e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fdd2 	bl	8006a2e <USB_HC_Halt>
 8002e8a:	e045      	b.n	8002f18 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	333f      	adds	r3, #63	; 0x3f
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	333f      	adds	r3, #63	; 0x3f
 8002eb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d12f      	bne.n	8002f18 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3358      	adds	r3, #88	; 0x58
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d121      	bne.n	8002f18 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	335d      	adds	r3, #93	; 0x5d
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	0151      	lsls	r1, r2, #5
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	440a      	add	r2, r1
 8002efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f02:	f043 0302 	orr.w	r3, r3, #2
 8002f06:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fd8b 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2310      	movs	r3, #16
 8002f28:	6093      	str	r3, [r2, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d119      	bne.n	8002f96 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2304      	movs	r3, #4
 8002f72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	0151      	lsls	r1, r2, #5
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	440a      	add	r2, r1
 8002f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002f94:	e33e      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d141      	bne.n	8003030 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2320      	movs	r3, #32
 8002fbc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	333d      	adds	r3, #61	; 0x3d
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	f040 831f 	bne.w	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	333d      	adds	r3, #61	; 0x3d
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	335c      	adds	r3, #92	; 0x5c
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	0151      	lsls	r1, r2, #5
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	440a      	add	r2, r1
 8003014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fd00 	bl	8006a2e <USB_HC_Halt>
}
 800302e:	e2f1      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d13f      	bne.n	80030c6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	335d      	adds	r3, #93	; 0x5d
 8003056:	2204      	movs	r2, #4
 8003058:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	333d      	adds	r3, #61	; 0x3d
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3358      	adds	r3, #88	; 0x58
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	0151      	lsls	r1, r2, #5
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	440a      	add	r2, r1
 8003098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fcbe 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	2340      	movs	r3, #64	; 0x40
 80030c2:	6093      	str	r3, [r2, #8]
}
 80030c4:	e2a6      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030dc:	d122      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	0151      	lsls	r1, r2, #5
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	440a      	add	r2, r1
 80030f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f003 fc90 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311a:	461a      	mov	r2, r3
 800311c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003120:	6093      	str	r3, [r2, #8]
}
 8003122:	e277      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d135      	bne.n	80031a6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	3358      	adds	r3, #88	; 0x58
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	0151      	lsls	r1, r2, #5
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	440a      	add	r2, r1
 8003164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f003 fc58 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	461a      	mov	r2, r3
 800318c:	2301      	movs	r3, #1
 800318e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	335d      	adds	r3, #93	; 0x5d
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
}
 80031a4:	e236      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d12b      	bne.n	8003214 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2308      	movs	r3, #8
 80031cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	0151      	lsls	r1, r2, #5
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	440a      	add	r2, r1
 80031e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 fc18 	bl	8006a2e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	335d      	adds	r3, #93	; 0x5d
 800320e:	2205      	movs	r2, #5
 8003210:	701a      	strb	r2, [r3, #0]
}
 8003212:	e1ff      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b10      	cmp	r3, #16
 8003228:	d155      	bne.n	80032d6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3358      	adds	r3, #88	; 0x58
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	335d      	adds	r3, #93	; 0x5d
 800324e:	2203      	movs	r2, #3
 8003250:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	333d      	adds	r3, #61	; 0x3d
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d114      	bne.n	8003292 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	333d      	adds	r3, #61	; 0x3d
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	0151      	lsls	r1, r2, #5
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	440a      	add	r2, r1
 80032a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 fbb6 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	461a      	mov	r2, r3
 80032d0:	2310      	movs	r3, #16
 80032d2:	6093      	str	r3, [r2, #8]
}
 80032d4:	e19e      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b80      	cmp	r3, #128	; 0x80
 80032ea:	d12b      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	0151      	lsls	r1, r2, #5
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	440a      	add	r2, r1
 8003302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003306:	f043 0302 	orr.w	r3, r3, #2
 800330a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fb89 	bl	8006a2e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	335d      	adds	r3, #93	; 0x5d
 800332c:	2206      	movs	r2, #6
 800332e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	6093      	str	r3, [r2, #8]
}
 8003342:	e167      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335a:	d135      	bne.n	80033c8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	0151      	lsls	r1, r2, #5
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	440a      	add	r2, r1
 8003372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fb51 	bl	8006a2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	2310      	movs	r3, #16
 800339c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	335d      	adds	r3, #93	; 0x5d
 80033c2:	2208      	movs	r2, #8
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	e125      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	f040 811a 	bne.w	8003614 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033fa:	f023 0302 	bic.w	r3, r3, #2
 80033fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	335d      	adds	r3, #93	; 0x5d
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d137      	bne.n	8003486 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	335c      	adds	r3, #92	; 0x5c
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	333f      	adds	r3, #63	; 0x3f
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d00b      	beq.n	8003458 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	333f      	adds	r3, #63	; 0x3f
 8003450:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	f040 80c5 	bne.w	80035e2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	3351      	adds	r3, #81	; 0x51
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	f083 0301 	eor.w	r3, r3, #1
 800346e:	b2d8      	uxtb	r0, r3
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	440b      	add	r3, r1
 800347e:	3351      	adds	r3, #81	; 0x51
 8003480:	4602      	mov	r2, r0
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e0ad      	b.n	80035e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	335d      	adds	r3, #93	; 0x5d
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d10a      	bne.n	80034b2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	335c      	adds	r3, #92	; 0x5c
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e097      	b.n	80035e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	335d      	adds	r3, #93	; 0x5d
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d10a      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	335c      	adds	r3, #92	; 0x5c
 80034d8:	2202      	movs	r2, #2
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e081      	b.n	80035e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	335d      	adds	r3, #93	; 0x5d
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d10a      	bne.n	800350a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	335c      	adds	r3, #92	; 0x5c
 8003504:	2205      	movs	r2, #5
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e06b      	b.n	80035e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	335d      	adds	r3, #93	; 0x5d
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d00a      	beq.n	8003536 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	440b      	add	r3, r1
 800352e:	335d      	adds	r3, #93	; 0x5d
 8003530:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003532:	2b08      	cmp	r3, #8
 8003534:	d155      	bne.n	80035e2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	3358      	adds	r3, #88	; 0x58
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1c59      	adds	r1, r3, #1
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4403      	add	r3, r0
 8003558:	3358      	adds	r3, #88	; 0x58
 800355a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	3358      	adds	r3, #88	; 0x58
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d914      	bls.n	800359c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	3358      	adds	r3, #88	; 0x58
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	335c      	adds	r3, #92	; 0x5c
 8003596:	2204      	movs	r2, #4
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e009      	b.n	80035b0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	335c      	adds	r3, #92	; 0x5c
 80035ac:	2202      	movs	r2, #2
 80035ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ee:	461a      	mov	r2, r3
 80035f0:	2302      	movs	r3, #2
 80035f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	440b      	add	r3, r1
 8003606:	335c      	adds	r3, #92	; 0x5c
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4601      	mov	r1, r0
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f009 f95a 	bl	800c8c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003614:	bf00      	nop
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	0c5b      	lsrs	r3, r3, #17
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003650:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d004      	beq.n	8003662 <HCD_RXQLVL_IRQHandler+0x46>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b05      	cmp	r3, #5
 800365c:	f000 8082 	beq.w	8003764 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003660:	e083      	b.n	800376a <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d07f      	beq.n	8003768 <HCD_RXQLVL_IRQHandler+0x14c>
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	3344      	adds	r3, #68	; 0x44
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d074      	beq.n	8003768 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	3344      	adds	r3, #68	; 0x44
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	b292      	uxth	r2, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f002 fd6a 	bl	8006172 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	3344      	adds	r3, #68	; 0x44
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	18d1      	adds	r1, r2, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4403      	add	r3, r0
 80036c2:	3344      	adds	r3, #68	; 0x44
 80036c4:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	334c      	adds	r3, #76	; 0x4c
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	18d1      	adds	r1, r2, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4403      	add	r3, r0
 80036ea:	334c      	adds	r3, #76	; 0x4c
 80036ec:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HCD_RXQLVL_IRQHandler+0x158>)
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d031      	beq.n	8003768 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800371a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003722:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	461a      	mov	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	3350      	adds	r3, #80	; 0x50
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	f083 0301 	eor.w	r3, r3, #1
 800374c:	b2d8      	uxtb	r0, r3
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3350      	adds	r3, #80	; 0x50
 800375e:	4602      	mov	r2, r0
 8003760:	701a      	strb	r2, [r3, #0]
      break;
 8003762:	e001      	b.n	8003768 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003764:	bf00      	nop
 8003766:	e000      	b.n	800376a <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8003768:	bf00      	nop
  }
}
 800376a:	bf00      	nop
 800376c:	3728      	adds	r7, #40	; 0x28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	1ff80000 	.word	0x1ff80000

08003778 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d10b      	bne.n	80037c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f009 f868 	bl	800c890 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d132      	bne.n	8003838 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d126      	bne.n	8003832 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d113      	bne.n	8003814 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f6:	d106      	bne.n	8003806 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f002 fdf2 	bl	80063e8 <USB_InitFSLSPClkSel>
 8003804:	e011      	b.n	800382a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f002 fdeb 	bl	80063e8 <USB_InitFSLSPClkSel>
 8003812:	e00a      	b.n	800382a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003822:	461a      	mov	r2, r3
 8003824:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003828:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f009 f85a 	bl	800c8e4 <HAL_HCD_PortEnabled_Callback>
 8003830:	e002      	b.n	8003838 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f009 f864 	bl	800c900 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b20      	cmp	r3, #32
 8003840:	d103      	bne.n	800384a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f043 0320 	orr.w	r3, r3, #32
 8003848:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6013      	str	r3, [r2, #0]
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e12b      	b.n	8003aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fa20 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c4:	f002 f972 	bl	8005bac <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a81      	ldr	r2, [pc, #516]	; (8003ad4 <HAL_I2C_Init+0x274>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d807      	bhi.n	80038e4 <HAL_I2C_Init+0x84>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a80      	ldr	r2, [pc, #512]	; (8003ad8 <HAL_I2C_Init+0x278>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e006      	b.n	80038f2 <HAL_I2C_Init+0x92>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a7d      	ldr	r2, [pc, #500]	; (8003adc <HAL_I2C_Init+0x27c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bf94      	ite	ls
 80038ec:	2301      	movls	r3, #1
 80038ee:	2300      	movhi	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0e7      	b.n	8003aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a78      	ldr	r2, [pc, #480]	; (8003ae0 <HAL_I2C_Init+0x280>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9b      	lsrs	r3, r3, #18
 8003904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a6a      	ldr	r2, [pc, #424]	; (8003ad4 <HAL_I2C_Init+0x274>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d802      	bhi.n	8003934 <HAL_I2C_Init+0xd4>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	e009      	b.n	8003948 <HAL_I2C_Init+0xe8>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a69      	ldr	r2, [pc, #420]	; (8003ae4 <HAL_I2C_Init+0x284>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	3301      	adds	r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800395a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	495c      	ldr	r1, [pc, #368]	; (8003ad4 <HAL_I2C_Init+0x274>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d819      	bhi.n	800399c <HAL_I2C_Init+0x13c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e59      	subs	r1, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fbb1 f3f3 	udiv	r3, r1, r3
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800397c:	400b      	ands	r3, r1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_I2C_Init+0x138>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e59      	subs	r1, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	e051      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003998:	2304      	movs	r3, #4
 800399a:	e04f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_I2C_Init+0x168>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e012      	b.n	80039ee <HAL_I2C_Init+0x18e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	fbb0 f3f3 	udiv	r3, r0, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x196>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e022      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10e      	bne.n	8003a1c <HAL_I2C_Init+0x1bc>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1e58      	subs	r0, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	440b      	add	r3, r1
 8003a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1a:	e00f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	6809      	ldr	r1, [r1, #0]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6911      	ldr	r1, [r2, #16]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	000186a0 	.word	0x000186a0
 8003ad8:	001e847f 	.word	0x001e847f
 8003adc:	003d08ff 	.word	0x003d08ff
 8003ae0:	431bde83 	.word	0x431bde83
 8003ae4:	10624dd3 	.word	0x10624dd3

08003ae8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	817b      	strh	r3, [r7, #10]
 8003afa:	460b      	mov	r3, r1
 8003afc:	813b      	strh	r3, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b02:	f7fd fb37 	bl	8001174 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	f040 80d9 	bne.w	8003cc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	2319      	movs	r3, #25
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	496d      	ldr	r1, [pc, #436]	; (8003cd4 <HAL_I2C_Mem_Write+0x1ec>)
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fc7b 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0cc      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Mem_Write+0x56>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e0c5      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d007      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2221      	movs	r2, #33	; 0x21
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2240      	movs	r2, #64	; 0x40
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a3a      	ldr	r2, [r7, #32]
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a4d      	ldr	r2, [pc, #308]	; (8003cd8 <HAL_I2C_Mem_Write+0x1f0>)
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba6:	88f8      	ldrh	r0, [r7, #6]
 8003ba8:	893a      	ldrh	r2, [r7, #8]
 8003baa:	8979      	ldrh	r1, [r7, #10]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fab6 	bl	8004128 <I2C_RequestMemoryWrite>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d052      	beq.n	8003c68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e081      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fcfc 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06b      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_I2C_Mem_Write+0x180>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d017      	beq.n	8003c68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1aa      	bne.n	8003bc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fce8 	bl	800464a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d107      	bne.n	8003c98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e016      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	00100002 	.word	0x00100002
 8003cd8:	ffff0000 	.word	0xffff0000

08003cdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	813b      	strh	r3, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf6:	f7fd fa3d 	bl	8001174 <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	f040 8208 	bne.w	800411a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2319      	movs	r3, #25
 8003d10:	2201      	movs	r2, #1
 8003d12:	497b      	ldr	r1, [pc, #492]	; (8003f00 <HAL_I2C_Mem_Read+0x224>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fb81 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	e1fb      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Mem_Read+0x56>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e1f4      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d007      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2222      	movs	r2, #34	; 0x22
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a5b      	ldr	r2, [pc, #364]	; (8003f04 <HAL_I2C_Mem_Read+0x228>)
 8003d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d9a:	88f8      	ldrh	r0, [r7, #6]
 8003d9c:	893a      	ldrh	r2, [r7, #8]
 8003d9e:	8979      	ldrh	r1, [r7, #10]
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	4603      	mov	r3, r0
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa50 	bl	8004250 <I2C_RequestMemoryRead>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e1b0      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d113      	bne.n	8003dea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e184      	b.n	80040f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d11b      	bne.n	8003e2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e164      	b.n	80040f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d11b      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	e144      	b.n	80040f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e80:	e138      	b.n	80040f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	f200 80f1 	bhi.w	800406e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d123      	bne.n	8003edc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fc17 	bl	80046cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e139      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eda:	e10b      	b.n	80040f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d14e      	bne.n	8003f82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	2200      	movs	r2, #0
 8003eec:	4906      	ldr	r1, [pc, #24]	; (8003f08 <HAL_I2C_Mem_Read+0x22c>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa94 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e10e      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
 8003efe:	bf00      	nop
 8003f00:	00100002 	.word	0x00100002
 8003f04:	ffff0000 	.word	0xffff0000
 8003f08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f80:	e0b8      	b.n	80040f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4966      	ldr	r1, [pc, #408]	; (8004124 <HAL_I2C_Mem_Read+0x448>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa45 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0bf      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	494f      	ldr	r1, [pc, #316]	; (8004124 <HAL_I2C_Mem_Read+0x448>)
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fa17 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e091      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800406c:	e042      	b.n	80040f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fb2a 	bl	80046cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e04c      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d118      	bne.n	80040f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f aec2 	bne.w	8003e82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3728      	adds	r7, #40	; 0x28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	00010004 	.word	0x00010004

08004128 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	461a      	mov	r2, r3
 8004136:	4603      	mov	r3, r0
 8004138:	817b      	strh	r3, [r7, #10]
 800413a:	460b      	mov	r3, r1
 800413c:	813b      	strh	r3, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	2200      	movs	r2, #0
 800415a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f95c 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e05f      	b.n	8004244 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004184:	897b      	ldrh	r3, [r7, #10]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004192:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	492c      	ldr	r1, [pc, #176]	; (800424c <I2C_RequestMemoryWrite+0x124>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f995 	bl	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e04c      	b.n	8004244 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	6a39      	ldr	r1, [r7, #32]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f9ff 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d107      	bne.n	80041e8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e02b      	b.n	8004244 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d105      	bne.n	80041fe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f2:	893b      	ldrh	r3, [r7, #8]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]
 80041fc:	e021      	b.n	8004242 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041fe:	893b      	ldrh	r3, [r7, #8]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	b29b      	uxth	r3, r3
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	6a39      	ldr	r1, [r7, #32]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f9d9 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	2b04      	cmp	r3, #4
 8004222:	d107      	bne.n	8004234 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004232:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e005      	b.n	8004244 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004238:	893b      	ldrh	r3, [r7, #8]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010002 	.word	0x00010002

08004250 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	4608      	mov	r0, r1
 800425a:	4611      	mov	r1, r2
 800425c:	461a      	mov	r2, r3
 800425e:	4603      	mov	r3, r0
 8004260:	817b      	strh	r3, [r7, #10]
 8004262:	460b      	mov	r3, r1
 8004264:	813b      	strh	r3, [r7, #8]
 8004266:	4613      	mov	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004278:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	2200      	movs	r2, #0
 8004292:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8c0 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00c      	beq.n	80042bc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0a9      	b.n	8004410 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042bc:	897b      	ldrh	r3, [r7, #10]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	6a3a      	ldr	r2, [r7, #32]
 80042d0:	4951      	ldr	r1, [pc, #324]	; (8004418 <I2C_RequestMemoryRead+0x1c8>)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f8f9 	bl	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e096      	b.n	8004410 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	6a39      	ldr	r1, [r7, #32]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f963 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b04      	cmp	r3, #4
 800430e:	d107      	bne.n	8004320 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e075      	b.n	8004410 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d105      	bne.n	8004336 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800432a:	893b      	ldrh	r3, [r7, #8]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	611a      	str	r2, [r3, #16]
 8004334:	e021      	b.n	800437a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004336:	893b      	ldrh	r3, [r7, #8]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	b29b      	uxth	r3, r3
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	6a39      	ldr	r1, [r7, #32]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f93d 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b04      	cmp	r3, #4
 800435a:	d107      	bne.n	800436c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e04f      	b.n	8004410 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	6a39      	ldr	r1, [r7, #32]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f922 	bl	80045c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b04      	cmp	r3, #4
 8004390:	d107      	bne.n	80043a2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e034      	b.n	8004410 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2200      	movs	r2, #0
 80043be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f82a 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e013      	b.n	8004410 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	4906      	ldr	r1, [pc, #24]	; (8004418 <I2C_RequestMemoryRead+0x1c8>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f863 	bl	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	00010002 	.word	0x00010002

0800441c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800442c:	e025      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d021      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fc fe9d 	bl	8001174 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d116      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e023      	b.n	80044c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10d      	bne.n	80044a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	e00c      	b.n	80044ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d0b6      	beq.n	800442e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044d8:	e051      	b.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d123      	bne.n	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f043 0204 	orr.w	r2, r3, #4
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e046      	b.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d021      	beq.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fc fe1b 	bl	8001174 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d116      	bne.n	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e020      	b.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10c      	bne.n	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	43da      	mvns	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	bf14      	ite	ne
 800459a:	2301      	movne	r3, #1
 800459c:	2300      	moveq	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	e00b      	b.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	43da      	mvns	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d18d      	bne.n	80044da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d4:	e02d      	b.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f8ce 	bl	8004778 <I2C_IsAcknowledgeFailed>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e02d      	b.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d021      	beq.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fc fdc1 	bl	8001174 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d116      	bne.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e007      	b.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d1ca      	bne.n	80045d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004656:	e02d      	b.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f88d 	bl	8004778 <I2C_IsAcknowledgeFailed>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e02d      	b.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d021      	beq.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004670:	f7fc fd80 	bl	8001174 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d116      	bne.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f043 0220 	orr.w	r2, r3, #32
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e007      	b.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d1ca      	bne.n	8004658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d8:	e042      	b.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d119      	bne.n	800471c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0210 	mvn.w	r2, #16
 80046f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e029      	b.n	8004770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fc fd2a 	bl	8001174 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e007      	b.n	8004770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d1b5      	bne.n	80046da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d11b      	bne.n	80047c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004798:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f043 0204 	orr.w	r2, r3, #4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e128      	b.n	8004a3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a90      	ldr	r2, [pc, #576]	; (8004a44 <HAL_I2S_Init+0x26c>)
 8004802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fc faa9 	bl	8000d5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004820:	f023 030f 	bic.w	r3, r3, #15
 8004824:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2202      	movs	r2, #2
 800482c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d060      	beq.n	80048f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800483e:	2310      	movs	r3, #16
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e001      	b.n	8004848 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004844:	2320      	movs	r3, #32
 8004846:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b20      	cmp	r3, #32
 800484e:	d802      	bhi.n	8004856 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004856:	2001      	movs	r0, #1
 8004858:	f001 fa9e 	bl	8005d98 <HAL_RCCEx_GetPeriphCLKFreq>
 800485c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004866:	d125      	bne.n	80048b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d010      	beq.n	8004892 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	fbb2 f2f3 	udiv	r2, r2, r3
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	3305      	adds	r3, #5
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e01f      	b.n	80048d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	fbb2 f2f3 	udiv	r2, r2, r3
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	3305      	adds	r3, #5
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e00e      	b.n	80048d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	3305      	adds	r3, #5
 80048d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4a5c      	ldr	r2, [pc, #368]	; (8004a48 <HAL_I2S_Init+0x270>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	08db      	lsrs	r3, r3, #3
 80048dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e003      	b.n	8004900 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048f8:	2302      	movs	r3, #2
 80048fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d902      	bls.n	800490c <HAL_I2S_Init+0x134>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2bff      	cmp	r3, #255	; 0xff
 800490a:	d907      	bls.n	800491c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	f043 0210 	orr.w	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e08f      	b.n	8004a3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	ea42 0103 	orr.w	r1, r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	430a      	orrs	r2, r1
 800492e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800493a:	f023 030f 	bic.w	r3, r3, #15
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6851      	ldr	r1, [r2, #4]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	4311      	orrs	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68d2      	ldr	r2, [r2, #12]
 800494c:	4311      	orrs	r1, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6992      	ldr	r2, [r2, #24]
 8004952:	430a      	orrs	r2, r1
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d161      	bne.n	8004a2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a38      	ldr	r2, [pc, #224]	; (8004a4c <HAL_I2S_Init+0x274>)
 800496c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a37      	ldr	r2, [pc, #220]	; (8004a50 <HAL_I2S_Init+0x278>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_I2S_Init+0x1a4>
 8004978:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <HAL_I2S_Init+0x27c>)
 800497a:	e001      	b.n	8004980 <HAL_I2S_Init+0x1a8>
 800497c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	4932      	ldr	r1, [pc, #200]	; (8004a50 <HAL_I2S_Init+0x278>)
 8004988:	428a      	cmp	r2, r1
 800498a:	d101      	bne.n	8004990 <HAL_I2S_Init+0x1b8>
 800498c:	4a31      	ldr	r2, [pc, #196]	; (8004a54 <HAL_I2S_Init+0x27c>)
 800498e:	e001      	b.n	8004994 <HAL_I2S_Init+0x1bc>
 8004990:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004994:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004998:	f023 030f 	bic.w	r3, r3, #15
 800499c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2b      	ldr	r2, [pc, #172]	; (8004a50 <HAL_I2S_Init+0x278>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_I2S_Init+0x1d4>
 80049a8:	4b2a      	ldr	r3, [pc, #168]	; (8004a54 <HAL_I2S_Init+0x27c>)
 80049aa:	e001      	b.n	80049b0 <HAL_I2S_Init+0x1d8>
 80049ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b0:	2202      	movs	r2, #2
 80049b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a25      	ldr	r2, [pc, #148]	; (8004a50 <HAL_I2S_Init+0x278>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_I2S_Init+0x1ea>
 80049be:	4b25      	ldr	r3, [pc, #148]	; (8004a54 <HAL_I2S_Init+0x27c>)
 80049c0:	e001      	b.n	80049c6 <HAL_I2S_Init+0x1ee>
 80049c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d2:	d003      	beq.n	80049dc <HAL_I2S_Init+0x204>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d103      	bne.n	80049e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80049dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e001      	b.n	80049e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	b299      	uxth	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80049fe:	4303      	orrs	r3, r0
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	430b      	orrs	r3, r1
 8004a04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a0d      	ldr	r2, [pc, #52]	; (8004a50 <HAL_I2S_Init+0x278>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2S_Init+0x24c>
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <HAL_I2S_Init+0x27c>)
 8004a22:	e001      	b.n	8004a28 <HAL_I2S_Init+0x250>
 8004a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a28:	897a      	ldrh	r2, [r7, #10]
 8004a2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	08004d5d 	.word	0x08004d5d
 8004a48:	cccccccd 	.word	0xcccccccd
 8004a4c:	08004e71 	.word	0x08004e71
 8004a50:	40003800 	.word	0x40003800
 8004a54:	40003400 	.word	0x40003400

08004a58 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_I2S_Transmit_DMA+0x1a>
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e08e      	b.n	8004b94 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_I2S_Transmit_DMA+0x2e>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e086      	b.n	8004b94 <HAL_I2S_Transmit_DMA+0x13c>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d005      	beq.n	8004aa6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e076      	b.n	8004b94 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d002      	beq.n	8004ad2 <HAL_I2S_Transmit_DMA+0x7a>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae6:	e005      	b.n	8004af4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <HAL_I2S_Transmit_DMA+0x144>)
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <HAL_I2S_Transmit_DMA+0x148>)
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	4a26      	ldr	r2, [pc, #152]	; (8004ba4 <HAL_I2S_Transmit_DMA+0x14c>)
 8004b0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004b14:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004b1c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004b24:	f7fc fd16 	bl	8001554 <HAL_DMA_Start_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00f      	beq.n	8004b4e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f043 0208 	orr.w	r2, r3, #8
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e022      	b.n	8004b94 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b6a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0202 	orr.w	r2, r2, #2
 8004b88:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08004c3b 	.word	0x08004c3b
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004c57 	.word	0x08004c57

08004ba8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10e      	bne.n	8004c2c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0202 	bic.w	r2, r2, #2
 8004c1c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff ffc5 	bl	8004bbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff ffad 	bl	8004ba8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0203 	bic.w	r2, r2, #3
 8004c72:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	f043 0208 	orr.w	r2, r3, #8
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ffa5 	bl	8004be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c9a      	adds	r2, r3, #2
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10e      	bne.n	8004cf6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff63 	bl	8004bbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	b292      	uxth	r2, r2
 8004d12:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10e      	bne.n	8004d54 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ff3e 	bl	8004bd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d13a      	bne.n	8004dee <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d109      	bne.n	8004d96 <I2S_IRQHandler+0x3a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d102      	bne.n	8004d96 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ffb4 	bl	8004cfe <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d126      	bne.n	8004dee <I2S_IRQHandler+0x92>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d11f      	bne.n	8004dee <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dbc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f043 0202 	orr.w	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff fefb 	bl	8004be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d136      	bne.n	8004e68 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d109      	bne.n	8004e18 <I2S_IRQHandler+0xbc>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d102      	bne.n	8004e18 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff45 	bl	8004ca2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d122      	bne.n	8004e68 <I2S_IRQHandler+0x10c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d11b      	bne.n	8004e68 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e3e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff febe 	bl	8004be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4aa2      	ldr	r2, [pc, #648]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e8a:	4ba2      	ldr	r3, [pc, #648]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e8c:	e001      	b.n	8004e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a9b      	ldr	r2, [pc, #620]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ea8:	4b9a      	ldr	r3, [pc, #616]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eaa:	e001      	b.n	8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebc:	d004      	beq.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8099 	bne.w	8004ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f925 	bl	800512c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d107      	bne.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9c8 	bl	800528c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d13a      	bne.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d035      	beq.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a7e      	ldr	r2, [pc, #504]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f1a:	4b7e      	ldr	r3, [pc, #504]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f1c:	e001      	b.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4979      	ldr	r1, [pc, #484]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f2e:	4b79      	ldr	r3, [pc, #484]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f30:	e001      	b.n	8004f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f3a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	f043 0202 	orr.w	r2, r3, #2
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fe34 	bl	8004be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	f040 80be 	bne.w	8005104 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80b8 	beq.w	8005104 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fa2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a59      	ldr	r2, [pc, #356]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004fae:	4b59      	ldr	r3, [pc, #356]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fb0:	e001      	b.n	8004fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004fb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4954      	ldr	r1, [pc, #336]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fbe:	428b      	cmp	r3, r1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004fc2:	4b54      	ldr	r3, [pc, #336]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fc4:	e001      	b.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fdf6 	bl	8004be4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ff8:	e084      	b.n	8005104 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d107      	bne.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8be 	bl	8005190 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8fd 	bl	8005228 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d12f      	bne.n	8005098 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d02a      	beq.n	8005098 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005050:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d101      	bne.n	8005060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800505c:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800505e:	e001      	b.n	8005064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4929      	ldr	r1, [pc, #164]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800506c:	428b      	cmp	r3, r1
 800506e:	d101      	bne.n	8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005070:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005072:	e001      	b.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800507c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	f043 0202 	orr.w	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fda6 	bl	8004be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d131      	bne.n	8005106 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02c      	beq.n	8005106 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80050b6:	4b17      	ldr	r3, [pc, #92]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050b8:	e001      	b.n	80050be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80050ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4912      	ldr	r1, [pc, #72]	; (8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050c6:	428b      	cmp	r3, r1
 80050c8:	d101      	bne.n	80050ce <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050cc:	e001      	b.n	80050d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80050ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050e6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	f043 0204 	orr.w	r2, r3, #4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fd71 	bl	8004be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005102:	e000      	b.n	8005106 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005104:	bf00      	nop
}
 8005106:	bf00      	nop
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40003800 	.word	0x40003800
 8005114:	40003400 	.word	0x40003400

08005118 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c99      	adds	r1, r3, #2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6251      	str	r1, [r2, #36]	; 0x24
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d113      	bne.n	8005186 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800516c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ffc9 	bl	8005118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	1c99      	adds	r1, r3, #2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6251      	str	r1, [r2, #36]	; 0x24
 80051a2:	8819      	ldrh	r1, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <I2SEx_TxISR_I2SExt+0x90>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d101      	bne.n	80051b2 <I2SEx_TxISR_I2SExt+0x22>
 80051ae:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <I2SEx_TxISR_I2SExt+0x94>)
 80051b0:	e001      	b.n	80051b6 <I2SEx_TxISR_I2SExt+0x26>
 80051b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b6:	460a      	mov	r2, r1
 80051b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d121      	bne.n	8005216 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <I2SEx_TxISR_I2SExt+0x90>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d101      	bne.n	80051e0 <I2SEx_TxISR_I2SExt+0x50>
 80051dc:	4b11      	ldr	r3, [pc, #68]	; (8005224 <I2SEx_TxISR_I2SExt+0x94>)
 80051de:	e001      	b.n	80051e4 <I2SEx_TxISR_I2SExt+0x54>
 80051e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	490d      	ldr	r1, [pc, #52]	; (8005220 <I2SEx_TxISR_I2SExt+0x90>)
 80051ec:	428b      	cmp	r3, r1
 80051ee:	d101      	bne.n	80051f4 <I2SEx_TxISR_I2SExt+0x64>
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <I2SEx_TxISR_I2SExt+0x94>)
 80051f2:	e001      	b.n	80051f8 <I2SEx_TxISR_I2SExt+0x68>
 80051f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ff81 	bl	8005118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40003800 	.word	0x40003800
 8005224:	40003400 	.word	0x40003400

08005228 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68d8      	ldr	r0, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	1c99      	adds	r1, r3, #2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005240:	b282      	uxth	r2, r0
 8005242:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d113      	bne.n	8005284 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800526a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff ff4a 	bl	8005118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a20      	ldr	r2, [pc, #128]	; (800531c <I2SEx_RxISR_I2SExt+0x90>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d101      	bne.n	80052a2 <I2SEx_RxISR_I2SExt+0x16>
 800529e:	4b20      	ldr	r3, [pc, #128]	; (8005320 <I2SEx_RxISR_I2SExt+0x94>)
 80052a0:	e001      	b.n	80052a6 <I2SEx_RxISR_I2SExt+0x1a>
 80052a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052a6:	68d8      	ldr	r0, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	1c99      	adds	r1, r3, #2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052b2:	b282      	uxth	r2, r0
 80052b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d121      	bne.n	8005312 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a12      	ldr	r2, [pc, #72]	; (800531c <I2SEx_RxISR_I2SExt+0x90>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <I2SEx_RxISR_I2SExt+0x50>
 80052d8:	4b11      	ldr	r3, [pc, #68]	; (8005320 <I2SEx_RxISR_I2SExt+0x94>)
 80052da:	e001      	b.n	80052e0 <I2SEx_RxISR_I2SExt+0x54>
 80052dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	490d      	ldr	r1, [pc, #52]	; (800531c <I2SEx_RxISR_I2SExt+0x90>)
 80052e8:	428b      	cmp	r3, r1
 80052ea:	d101      	bne.n	80052f0 <I2SEx_RxISR_I2SExt+0x64>
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <I2SEx_RxISR_I2SExt+0x94>)
 80052ee:	e001      	b.n	80052f4 <I2SEx_RxISR_I2SExt+0x68>
 80052f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff03 	bl	8005118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40003800 	.word	0x40003800
 8005320:	40003400 	.word	0x40003400

08005324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e25b      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d075      	beq.n	800542e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005342:	4ba3      	ldr	r3, [pc, #652]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b04      	cmp	r3, #4
 800534c:	d00c      	beq.n	8005368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534e:	4ba0      	ldr	r3, [pc, #640]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005356:	2b08      	cmp	r3, #8
 8005358:	d112      	bne.n	8005380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800535a:	4b9d      	ldr	r3, [pc, #628]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005366:	d10b      	bne.n	8005380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	4b99      	ldr	r3, [pc, #612]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d05b      	beq.n	800542c <HAL_RCC_OscConfig+0x108>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d157      	bne.n	800542c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e236      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d106      	bne.n	8005398 <HAL_RCC_OscConfig+0x74>
 800538a:	4b91      	ldr	r3, [pc, #580]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a90      	ldr	r2, [pc, #576]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e01d      	b.n	80053d4 <HAL_RCC_OscConfig+0xb0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x98>
 80053a2:	4b8b      	ldr	r3, [pc, #556]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a8a      	ldr	r2, [pc, #552]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b88      	ldr	r3, [pc, #544]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a87      	ldr	r2, [pc, #540]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e00b      	b.n	80053d4 <HAL_RCC_OscConfig+0xb0>
 80053bc:	4b84      	ldr	r3, [pc, #528]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a83      	ldr	r2, [pc, #524]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4b81      	ldr	r3, [pc, #516]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a80      	ldr	r2, [pc, #512]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fb feca 	bl	8001174 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fb fec6 	bl	8001174 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e1fb      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b76      	ldr	r3, [pc, #472]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0xc0>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fb feb6 	bl	8001174 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800540c:	f7fb feb2 	bl	8001174 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1e7      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541e:	4b6c      	ldr	r3, [pc, #432]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0xe8>
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d063      	beq.n	8005502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800543a:	4b65      	ldr	r3, [pc, #404]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005446:	4b62      	ldr	r3, [pc, #392]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800544e:	2b08      	cmp	r3, #8
 8005450:	d11c      	bne.n	800548c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005452:	4b5f      	ldr	r3, [pc, #380]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d116      	bne.n	800548c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545e:	4b5c      	ldr	r3, [pc, #368]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_RCC_OscConfig+0x152>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d001      	beq.n	8005476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e1bb      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005476:	4b56      	ldr	r3, [pc, #344]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4952      	ldr	r1, [pc, #328]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548a:	e03a      	b.n	8005502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d020      	beq.n	80054d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005494:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <HAL_RCC_OscConfig+0x2b0>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fb fe6b 	bl	8001174 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054a2:	f7fb fe67 	bl	8001174 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e19c      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b4:	4b46      	ldr	r3, [pc, #280]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c0:	4b43      	ldr	r3, [pc, #268]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4940      	ldr	r1, [pc, #256]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]
 80054d4:	e015      	b.n	8005502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d6:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <HAL_RCC_OscConfig+0x2b0>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fb fe4a 	bl	8001174 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e4:	f7fb fe46 	bl	8001174 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e17b      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f6:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d030      	beq.n	8005570 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005516:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <HAL_RCC_OscConfig+0x2b4>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fb fe2a 	bl	8001174 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005524:	f7fb fe26 	bl	8001174 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e15b      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x200>
 8005542:	e015      	b.n	8005570 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005544:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <HAL_RCC_OscConfig+0x2b4>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554a:	f7fb fe13 	bl	8001174 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005552:	f7fb fe0f 	bl	8001174 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e144      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005564:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f0      	bne.n	8005552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80a0 	beq.w	80056be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005582:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	4a0e      	ldr	r2, [pc, #56]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559c:	6413      	str	r3, [r2, #64]	; 0x40
 800559e:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a6:	60bb      	str	r3, [r7, #8]
 80055a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCC_OscConfig+0x2b8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d121      	bne.n	80055fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <HAL_RCC_OscConfig+0x2b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a07      	ldr	r2, [pc, #28]	; (80055dc <HAL_RCC_OscConfig+0x2b8>)
 80055c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c6:	f7fb fdd5 	bl	8001174 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055cc:	e011      	b.n	80055f2 <HAL_RCC_OscConfig+0x2ce>
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800
 80055d4:	42470000 	.word	0x42470000
 80055d8:	42470e80 	.word	0x42470e80
 80055dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e0:	f7fb fdc8 	bl	8001174 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e0fd      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b81      	ldr	r3, [pc, #516]	; (80057f8 <HAL_RCC_OscConfig+0x4d4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d106      	bne.n	8005614 <HAL_RCC_OscConfig+0x2f0>
 8005606:	4b7d      	ldr	r3, [pc, #500]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	4a7c      	ldr	r2, [pc, #496]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	6713      	str	r3, [r2, #112]	; 0x70
 8005612:	e01c      	b.n	800564e <HAL_RCC_OscConfig+0x32a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d10c      	bne.n	8005636 <HAL_RCC_OscConfig+0x312>
 800561c:	4b77      	ldr	r3, [pc, #476]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	4a76      	ldr	r2, [pc, #472]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005622:	f043 0304 	orr.w	r3, r3, #4
 8005626:	6713      	str	r3, [r2, #112]	; 0x70
 8005628:	4b74      	ldr	r3, [pc, #464]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a73      	ldr	r2, [pc, #460]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
 8005634:	e00b      	b.n	800564e <HAL_RCC_OscConfig+0x32a>
 8005636:	4b71      	ldr	r3, [pc, #452]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a70      	ldr	r2, [pc, #448]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
 8005642:	4b6e      	ldr	r3, [pc, #440]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a6d      	ldr	r2, [pc, #436]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005648:	f023 0304 	bic.w	r3, r3, #4
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d015      	beq.n	8005682 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005656:	f7fb fd8d 	bl	8001174 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fb fd89 	bl	8001174 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0bc      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005674:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ee      	beq.n	800565e <HAL_RCC_OscConfig+0x33a>
 8005680:	e014      	b.n	80056ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005682:	f7fb fd77 	bl	8001174 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005688:	e00a      	b.n	80056a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800568a:	f7fb fd73 	bl	8001174 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f241 3288 	movw	r2, #5000	; 0x1388
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e0a6      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a0:	4b56      	ldr	r3, [pc, #344]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ee      	bne.n	800568a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d105      	bne.n	80056be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b2:	4b52      	ldr	r3, [pc, #328]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 80056b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8092 	beq.w	80057ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056c8:	4b4c      	ldr	r3, [pc, #304]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d05c      	beq.n	800578e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d141      	bne.n	8005760 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056dc:	4b48      	ldr	r3, [pc, #288]	; (8005800 <HAL_RCC_OscConfig+0x4dc>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e2:	f7fb fd47 	bl	8001174 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ea:	f7fb fd43 	bl	8001174 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e078      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fc:	4b3f      	ldr	r3, [pc, #252]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f0      	bne.n	80056ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	019b      	lsls	r3, r3, #6
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	4933      	ldr	r1, [pc, #204]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 800572e:	4313      	orrs	r3, r2
 8005730:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005732:	4b33      	ldr	r3, [pc, #204]	; (8005800 <HAL_RCC_OscConfig+0x4dc>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fb fd1c 	bl	8001174 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005740:	f7fb fd18 	bl	8001174 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e04d      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005752:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x41c>
 800575e:	e045      	b.n	80057ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_RCC_OscConfig+0x4dc>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fb fd05 	bl	8001174 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576e:	f7fb fd01 	bl	8001174 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e036      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x44a>
 800578c:	e02e      	b.n	80057ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e029      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800579a:	4b18      	ldr	r3, [pc, #96]	; (80057fc <HAL_RCC_OscConfig+0x4d8>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d11c      	bne.n	80057e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d115      	bne.n	80057e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057c2:	4013      	ands	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d106      	bne.n	80057e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40007000 	.word	0x40007000
 80057fc:	40023800 	.word	0x40023800
 8005800:	42470060 	.word	0x42470060

08005804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0cc      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005818:	4b68      	ldr	r3, [pc, #416]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d90c      	bls.n	8005840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005826:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b63      	ldr	r3, [pc, #396]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0b8      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005858:	4b59      	ldr	r3, [pc, #356]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4a58      	ldr	r2, [pc, #352]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005870:	4b53      	ldr	r3, [pc, #332]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4a52      	ldr	r2, [pc, #328]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800587a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800587c:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	494d      	ldr	r1, [pc, #308]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d044      	beq.n	8005924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d107      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a2:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d119      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e07f      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d003      	beq.n	80058c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d107      	bne.n	80058d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058c2:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e06f      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e067      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058e2:	4b37      	ldr	r3, [pc, #220]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 0203 	bic.w	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4934      	ldr	r1, [pc, #208]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058f4:	f7fb fc3e 	bl	8001174 <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058fc:	f7fb fc3a 	bl	8001174 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e04f      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005912:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 020c 	and.w	r2, r3, #12
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	429a      	cmp	r2, r3
 8005922:	d1eb      	bne.n	80058fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005924:	4b25      	ldr	r3, [pc, #148]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d20c      	bcs.n	800594c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005932:	4b22      	ldr	r3, [pc, #136]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593a:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e032      	b.n	80059b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4916      	ldr	r1, [pc, #88]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	490e      	ldr	r1, [pc, #56]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800598a:	f000 f821 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800598e:	4602      	mov	r2, r0
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	490a      	ldr	r1, [pc, #40]	; (80059c4 <HAL_RCC_ClockConfig+0x1c0>)
 800599c:	5ccb      	ldrb	r3, [r1, r3]
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <HAL_RCC_ClockConfig+0x1c4>)
 80059a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_RCC_ClockConfig+0x1c8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fb fb9e 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40023c00 	.word	0x40023c00
 80059c0:	40023800 	.word	0x40023800
 80059c4:	0800d00c 	.word	0x0800d00c
 80059c8:	20000000 	.word	0x20000000
 80059cc:	20000004 	.word	0x20000004

080059d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	2300      	movs	r3, #0
 80059e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059e8:	4b67      	ldr	r3, [pc, #412]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 030c 	and.w	r3, r3, #12
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d00d      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x40>
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	f200 80bd 	bhi.w	8005b74 <HAL_RCC_GetSysClockFreq+0x1a4>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_RCC_GetSysClockFreq+0x34>
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d003      	beq.n	8005a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a02:	e0b7      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a04:	4b61      	ldr	r3, [pc, #388]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a06:	60bb      	str	r3, [r7, #8]
       break;
 8005a08:	e0b7      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a0a:	4b61      	ldr	r3, [pc, #388]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a0c:	60bb      	str	r3, [r7, #8]
      break;
 8005a0e:	e0b4      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a10:	4b5d      	ldr	r3, [pc, #372]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a1a:	4b5b      	ldr	r3, [pc, #364]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d04d      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a26:	4b58      	ldr	r3, [pc, #352]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	ea02 0800 	and.w	r8, r2, r0
 8005a3e:	ea03 0901 	and.w	r9, r3, r1
 8005a42:	4640      	mov	r0, r8
 8005a44:	4649      	mov	r1, r9
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	014b      	lsls	r3, r1, #5
 8005a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a54:	0142      	lsls	r2, r0, #5
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	ebb0 0008 	subs.w	r0, r0, r8
 8005a5e:	eb61 0109 	sbc.w	r1, r1, r9
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	018b      	lsls	r3, r1, #6
 8005a6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a70:	0182      	lsls	r2, r0, #6
 8005a72:	1a12      	subs	r2, r2, r0
 8005a74:	eb63 0301 	sbc.w	r3, r3, r1
 8005a78:	f04f 0000 	mov.w	r0, #0
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	00d9      	lsls	r1, r3, #3
 8005a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a86:	00d0      	lsls	r0, r2, #3
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	eb12 0208 	adds.w	r2, r2, r8
 8005a90:	eb43 0309 	adc.w	r3, r3, r9
 8005a94:	f04f 0000 	mov.w	r0, #0
 8005a98:	f04f 0100 	mov.w	r1, #0
 8005a9c:	0259      	lsls	r1, r3, #9
 8005a9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005aa2:	0250      	lsls	r0, r2, #9
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	f7fa fb88 	bl	80001c8 <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4613      	mov	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	e04a      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac2:	4b31      	ldr	r3, [pc, #196]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	099b      	lsrs	r3, r3, #6
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ad2:	f04f 0100 	mov.w	r1, #0
 8005ad6:	ea02 0400 	and.w	r4, r2, r0
 8005ada:	ea03 0501 	and.w	r5, r3, r1
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	014b      	lsls	r3, r1, #5
 8005aec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005af0:	0142      	lsls	r2, r0, #5
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	1b00      	subs	r0, r0, r4
 8005af8:	eb61 0105 	sbc.w	r1, r1, r5
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	018b      	lsls	r3, r1, #6
 8005b06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b0a:	0182      	lsls	r2, r0, #6
 8005b0c:	1a12      	subs	r2, r2, r0
 8005b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	00d9      	lsls	r1, r3, #3
 8005b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b20:	00d0      	lsls	r0, r2, #3
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	1912      	adds	r2, r2, r4
 8005b28:	eb45 0303 	adc.w	r3, r5, r3
 8005b2c:	f04f 0000 	mov.w	r0, #0
 8005b30:	f04f 0100 	mov.w	r1, #0
 8005b34:	0299      	lsls	r1, r3, #10
 8005b36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b3a:	0290      	lsls	r0, r2, #10
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4610      	mov	r0, r2
 8005b42:	4619      	mov	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	f7fa fb3c 	bl	80001c8 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	3301      	adds	r3, #1
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	60bb      	str	r3, [r7, #8]
      break;
 8005b72:	e002      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b76:	60bb      	str	r3, [r7, #8]
      break;
 8005b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	00f42400 	.word	0x00f42400
 8005b90:	007a1200 	.word	0x007a1200

08005b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b98:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000000 	.word	0x20000000

08005bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bb0:	f7ff fff0 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	0a9b      	lsrs	r3, r3, #10
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	4903      	ldr	r1, [pc, #12]	; (8005bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	0800d01c 	.word	0x0800d01c

08005bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d035      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bfc:	4b62      	ldr	r3, [pc, #392]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c02:	f7fb fab7 	bl	8001174 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c0a:	f7fb fab3 	bl	8001174 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e0b0      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c1c:	4b5b      	ldr	r3, [pc, #364]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f0      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	019a      	lsls	r2, r3, #6
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	071b      	lsls	r3, r3, #28
 8005c34:	4955      	ldr	r1, [pc, #340]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c3c:	4b52      	ldr	r3, [pc, #328]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c42:	f7fb fa97 	bl	8001174 <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c4a:	f7fb fa93 	bl	8001174 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e090      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c5c:	4b4b      	ldr	r3, [pc, #300]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8083 	beq.w	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	4b44      	ldr	r3, [pc, #272]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	4a43      	ldr	r2, [pc, #268]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6413      	str	r3, [r2, #64]	; 0x40
 8005c86:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c92:	4b3f      	ldr	r3, [pc, #252]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a3e      	ldr	r2, [pc, #248]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c9e:	f7fb fa69 	bl	8001174 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ca6:	f7fb fa65 	bl	8001174 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e062      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cb8:	4b35      	ldr	r3, [pc, #212]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cc4:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ccc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d02f      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d028      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ce2:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cec:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cee:	2201      	movs	r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cf2:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cf8:	4a24      	ldr	r2, [pc, #144]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d114      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d0a:	f7fb fa33 	bl	8001174 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d10:	e00a      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d12:	f7fb fa2f 	bl	8001174 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e02a      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0ee      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d40:	d10d      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	490d      	ldr	r1, [pc, #52]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	608b      	str	r3, [r1, #8]
 8005d5c:	e005      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d68:	6093      	str	r3, [r2, #8]
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d76:	4905      	ldr	r1, [pc, #20]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	42470068 	.word	0x42470068
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40007000 	.word	0x40007000
 8005d94:	42470e40 	.word	0x42470e40

08005d98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d13e      	bne.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d12f      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005dcc:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dce:	617b      	str	r3, [r7, #20]
          break;
 8005dd0:	e02f      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dde:	d108      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005de0:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	e007      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005df2:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dfa:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e02:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e08:	099b      	lsrs	r3, r3, #6
 8005e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1c:	0f1b      	lsrs	r3, r3, #28
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]
          break;
 8005e2a:	e002      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
          break;
 8005e30:	bf00      	nop
        }
      }
      break;
 8005e32:	bf00      	nop
    }
  }
  return frequency;
 8005e34:	697b      	ldr	r3, [r7, #20]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40023800 	.word	0x40023800
 8005e48:	00bb8000 	.word	0x00bb8000
 8005e4c:	007a1200 	.word	0x007a1200
 8005e50:	00f42400 	.word	0x00f42400

08005e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e056      	b.n	8005f14 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fb f813 	bl	8000eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	ea42 0103 	orr.w	r1, r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	f003 0104 	and.w	r1, r3, #4
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	f107 001c 	add.w	r0, r7, #28
 8005f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d122      	bne.n	8005f7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d105      	bne.n	8005f6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f94a 	bl	8006208 <USB_CoreReset>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
 8005f78:	e01a      	b.n	8005fb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f93e 	bl	8006208 <USB_CoreReset>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8005fa2:	e005      	b.n	8005fb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10b      	bne.n	8005fce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f043 0206 	orr.w	r2, r3, #6
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fda:	b004      	add	sp, #16
 8005fdc:	4770      	bx	lr

08005fde <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f043 0201 	orr.w	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 0201 	bic.w	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d106      	bne.n	800604e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e00b      	b.n	8006066 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
 8006060:	e001      	b.n	8006066 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e003      	b.n	800606e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006066:	2032      	movs	r0, #50	; 0x32
 8006068:	f7fb f890 	bl	800118c <HAL_Delay>

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	019b      	lsls	r3, r3, #6
 800608a:	f043 0220 	orr.w	r2, r3, #32
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3301      	adds	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <USB_FlushTxFifo+0x48>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d901      	bls.n	80060a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e006      	b.n	80060b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d0f0      	beq.n	8006092 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	00030d40 	.word	0x00030d40

080060c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2210      	movs	r2, #16
 80060d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <USB_FlushRxFifo+0x40>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e006      	b.n	80060f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d0f0      	beq.n	80060d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	00030d40 	.word	0x00030d40

08006108 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006108:	b480      	push	{r7}
 800610a:	b089      	sub	sp, #36	; 0x24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4611      	mov	r1, r2
 8006114:	461a      	mov	r2, r3
 8006116:	460b      	mov	r3, r1
 8006118:	71fb      	strb	r3, [r7, #7]
 800611a:	4613      	mov	r3, r2
 800611c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006126:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d11a      	bne.n	8006164 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800612e:	88bb      	ldrh	r3, [r7, #4]
 8006130:	3303      	adds	r3, #3
 8006132:	089b      	lsrs	r3, r3, #2
 8006134:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e00f      	b.n	800615c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	031a      	lsls	r2, r3, #12
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	4413      	add	r3, r2
 8006144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006148:	461a      	mov	r2, r3
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	3304      	adds	r3, #4
 8006154:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	3301      	adds	r3, #1
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d3eb      	bcc.n	800613c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006172:	b480      	push	{r7}
 8006174:	b089      	sub	sp, #36	; 0x24
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	4613      	mov	r3, r2
 800617e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	3303      	adds	r3, #3
 800618c:	089b      	lsrs	r3, r3, #2
 800618e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	e00b      	b.n	80061ae <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	601a      	str	r2, [r3, #0]
    pDest++;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3304      	adds	r3, #4
 80061a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d3ef      	bcc.n	8006196 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3724      	adds	r7, #36	; 0x24
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4013      	ands	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061dc:	68fb      	ldr	r3, [r7, #12]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0301 	and.w	r3, r3, #1
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a13      	ldr	r2, [pc, #76]	; (800626c <USB_CoreReset+0x64>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d901      	bls.n	8006226 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e01b      	b.n	800625e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	daf2      	bge.n	8006214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f043 0201 	orr.w	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3301      	adds	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4a09      	ldr	r2, [pc, #36]	; (800626c <USB_CoreReset+0x64>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d901      	bls.n	8006250 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e006      	b.n	800625e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d0f0      	beq.n	800623e <USB_CoreReset+0x36>

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	00030d40 	.word	0x00030d40

08006270 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006270:	b084      	sub	sp, #16
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	f107 001c 	add.w	r0, r7, #28
 800627e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800628c:	461a      	mov	r2, r3
 800628e:	2300      	movs	r3, #0
 8006290:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d018      	beq.n	80062f4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10a      	bne.n	80062de <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062d6:	f043 0304 	orr.w	r3, r3, #4
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e014      	b.n	8006308 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ec:	f023 0304 	bic.w	r3, r3, #4
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e009      	b.n	8006308 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006302:	f023 0304 	bic.w	r3, r3, #4
 8006306:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006308:	2110      	movs	r1, #16
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff feb4 	bl	8006078 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fed7 	bl	80060c4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e015      	b.n	8006348 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	461a      	mov	r2, r3
 800632a:	f04f 33ff 	mov.w	r3, #4294967295
 800632e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	461a      	mov	r2, r3
 800633e:	2300      	movs	r3, #0
 8006340:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	429a      	cmp	r2, r3
 800634e:	d3e5      	bcc.n	800631c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006350:	2101      	movs	r1, #1
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8ac 	bl	80064b0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006358:	20c8      	movs	r0, #200	; 0xc8
 800635a:	f7fa ff17 	bl	800118c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a14      	ldr	r2, [pc, #80]	; (80063d4 <USB_HostInit+0x164>)
 8006384:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <USB_HostInit+0x168>)
 800638a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800638e:	e009      	b.n	80063a4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2280      	movs	r2, #128	; 0x80
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a10      	ldr	r2, [pc, #64]	; (80063dc <USB_HostInit+0x16c>)
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a10      	ldr	r2, [pc, #64]	; (80063e0 <USB_HostInit+0x170>)
 80063a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f043 0210 	orr.w	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <USB_HostInit+0x174>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ce:	b004      	add	sp, #16
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	01000200 	.word	0x01000200
 80063d8:	00e00300 	.word	0x00e00300
 80063dc:	00600080 	.word	0x00600080
 80063e0:	004000e0 	.word	0x004000e0
 80063e4:	a3200008 	.word	0xa3200008

080063e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006406:	f023 0303 	bic.w	r3, r3, #3
 800640a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006420:	4313      	orrs	r3, r2
 8006422:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006430:	461a      	mov	r2, r3
 8006432:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006436:	6053      	str	r3, [r2, #4]
 8006438:	e009      	b.n	800644e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d106      	bne.n	800644e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006446:	461a      	mov	r2, r3
 8006448:	f241 7370 	movw	r3, #6000	; 0x1770
 800644c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800647c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800648c:	2064      	movs	r0, #100	; 0x64
 800648e:	f7fa fe7d 	bl	800118c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800649a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800649e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80064a0:	200a      	movs	r0, #10
 80064a2:	f7fa fe73 	bl	800118c <HAL_Delay>

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80064d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <USB_DriveVbus+0x44>
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d106      	bne.n	80064f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d109      	bne.n	8006514 <USB_DriveVbus+0x64>
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800650e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006512:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	0c5b      	lsrs	r3, r3, #17
 8006540:	f003 0303 	and.w	r3, r3, #3
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	b29b      	uxth	r3, r3
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	4603      	mov	r3, r0
 8006584:	70fb      	strb	r3, [r7, #3]
 8006586:	460b      	mov	r3, r1
 8006588:	70bb      	strb	r3, [r7, #2]
 800658a:	4613      	mov	r3, r2
 800658c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a2:	461a      	mov	r2, r3
 80065a4:	f04f 33ff 	mov.w	r3, #4294967295
 80065a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80065aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d87e      	bhi.n	80066b0 <USB_HC_Init+0x13c>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <USB_HC_Init+0x44>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	08006673 	.word	0x08006673
 80065c0:	080065c9 	.word	0x080065c9
 80065c4:	08006635 	.word	0x08006635
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d4:	461a      	mov	r2, r3
 80065d6:	f240 439d 	movw	r3, #1181	; 0x49d
 80065da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80065dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da10      	bge.n	8006606 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006602:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006604:	e057      	b.n	80066b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d051      	beq.n	80066b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4413      	add	r3, r2
 800661a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	78fa      	ldrb	r2, [r7, #3]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	440a      	add	r2, r1
 8006628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006630:	60d3      	str	r3, [r2, #12]
      break;
 8006632:	e040      	b.n	80066b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	461a      	mov	r2, r3
 8006642:	f240 639d 	movw	r3, #1693	; 0x69d
 8006646:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006648:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800664c:	2b00      	cmp	r3, #0
 800664e:	da34      	bge.n	80066ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	440a      	add	r2, r1
 8006666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006670:	e023      	b.n	80066ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	461a      	mov	r2, r3
 8006680:	f240 2325 	movw	r3, #549	; 0x225
 8006684:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006686:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da17      	bge.n	80066be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80066ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80066ae:	e006      	b.n	80066be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	75fb      	strb	r3, [r7, #23]
      break;
 80066b4:	e004      	b.n	80066c0 <USB_HC_Init+0x14c>
      break;
 80066b6:	bf00      	nop
 80066b8:	e002      	b.n	80066c0 <USB_HC_Init+0x14c>
      break;
 80066ba:	bf00      	nop
 80066bc:	e000      	b.n	80066c0 <USB_HC_Init+0x14c>
      break;
 80066be:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c6:	699a      	ldr	r2, [r3, #24]
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	2101      	movs	r1, #1
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066da:	4313      	orrs	r3, r2
 80066dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80066ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da03      	bge.n	80066fa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80066f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	e001      	b.n	80066fe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80066fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d103      	bne.n	800670e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e001      	b.n	8006712 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006712:	787b      	ldrb	r3, [r7, #1]
 8006714:	059b      	lsls	r3, r3, #22
 8006716:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800671a:	78bb      	ldrb	r3, [r7, #2]
 800671c:	02db      	lsls	r3, r3, #11
 800671e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006722:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006728:	049b      	lsls	r3, r3, #18
 800672a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800672e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006730:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006732:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006736:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	0159      	lsls	r1, r3, #5
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	440b      	add	r3, r1
 8006744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006748:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800674e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006750:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006754:	2b03      	cmp	r3, #3
 8006756:	d10f      	bne.n	8006778 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	78fa      	ldrb	r2, [r7, #3]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	440a      	add	r2, r1
 800676e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006776:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop

08006788 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08c      	sub	sp, #48	; 0x30
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80067a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d028      	beq.n	8006804 <USB_HC_StartXfer+0x7c>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	791b      	ldrb	r3, [r3, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d124      	bne.n	8006804 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10b      	bne.n	80067d8 <USB_HC_StartXfer+0x50>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	795b      	ldrb	r3, [r3, #5]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d107      	bne.n	80067d8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	4619      	mov	r1, r3
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fa2c 	bl	8006c2c <USB_DoPing>
      return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e111      	b.n	80069fc <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d112      	bne.n	8006804 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	6a3a      	ldr	r2, [r7, #32]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80067fc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2200      	movs	r2, #0
 8006802:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d018      	beq.n	800683e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	8912      	ldrh	r2, [r2, #8]
 8006814:	4413      	add	r3, r2
 8006816:	3b01      	subs	r3, #1
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	8912      	ldrh	r2, [r2, #8]
 800681c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006820:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006822:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006824:	8b7b      	ldrh	r3, [r7, #26]
 8006826:	429a      	cmp	r2, r3
 8006828:	d90b      	bls.n	8006842 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800682a:	8b7b      	ldrh	r3, [r7, #26]
 800682c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800682e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	8912      	ldrh	r2, [r2, #8]
 8006834:	fb02 f203 	mul.w	r2, r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	611a      	str	r2, [r3, #16]
 800683c:	e001      	b.n	8006842 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800683e:	2301      	movs	r3, #1
 8006840:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	78db      	ldrb	r3, [r3, #3]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d006      	beq.n	8006858 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800684a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	8912      	ldrh	r2, [r2, #8]
 8006850:	fb02 f203 	mul.w	r2, r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006860:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006862:	04d9      	lsls	r1, r3, #19
 8006864:	4b67      	ldr	r3, [pc, #412]	; (8006a04 <USB_HC_StartXfer+0x27c>)
 8006866:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006868:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	7a9b      	ldrb	r3, [r3, #10]
 800686e:	075b      	lsls	r3, r3, #29
 8006870:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006874:	69f9      	ldr	r1, [r7, #28]
 8006876:	0148      	lsls	r0, r1, #5
 8006878:	6a39      	ldr	r1, [r7, #32]
 800687a:	4401      	add	r1, r0
 800687c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006880:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006882:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	68d9      	ldr	r1, [r3, #12]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689a:	460a      	mov	r2, r1
 800689c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf0c      	ite	eq
 80068ae:	2301      	moveq	r3, #1
 80068b0:	2300      	movne	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	6a3a      	ldr	r2, [r7, #32]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	7e7b      	ldrb	r3, [r7, #25]
 80068e6:	075b      	lsls	r3, r3, #29
 80068e8:	69f9      	ldr	r1, [r7, #28]
 80068ea:	0148      	lsls	r0, r1, #5
 80068ec:	6a39      	ldr	r1, [r7, #32]
 80068ee:	4401      	add	r1, r0
 80068f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80068f4:	4313      	orrs	r3, r2
 80068f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a40      	ldr	r2, [pc, #256]	; (8006a08 <USB_HC_StartXfer+0x280>)
 8006908:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800690a:	4b3f      	ldr	r3, [pc, #252]	; (8006a08 <USB_HC_StartXfer+0x280>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006912:	4a3d      	ldr	r2, [pc, #244]	; (8006a08 <USB_HC_StartXfer+0x280>)
 8006914:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	78db      	ldrb	r3, [r3, #3]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800691e:	4b3a      	ldr	r3, [pc, #232]	; (8006a08 <USB_HC_StartXfer+0x280>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <USB_HC_StartXfer+0x280>)
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e005      	b.n	8006938 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800692c:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <USB_HC_StartXfer+0x280>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006934:	4a34      	ldr	r2, [pc, #208]	; (8006a08 <USB_HC_StartXfer+0x280>)
 8006936:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006938:	4b33      	ldr	r3, [pc, #204]	; (8006a08 <USB_HC_StartXfer+0x280>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006940:	4a31      	ldr	r2, [pc, #196]	; (8006a08 <USB_HC_StartXfer+0x280>)
 8006942:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	4413      	add	r3, r2
 800694c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006950:	461a      	mov	r2, r3
 8006952:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <USB_HC_StartXfer+0x280>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d14d      	bne.n	80069fa <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	78db      	ldrb	r3, [r3, #3]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d149      	bne.n	80069fa <USB_HC_StartXfer+0x272>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d045      	beq.n	80069fa <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	79db      	ldrb	r3, [r3, #7]
 8006972:	2b03      	cmp	r3, #3
 8006974:	d830      	bhi.n	80069d8 <USB_HC_StartXfer+0x250>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <USB_HC_StartXfer+0x1f4>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	0800698d 	.word	0x0800698d
 8006980:	080069b1 	.word	0x080069b1
 8006984:	0800698d 	.word	0x0800698d
 8006988:	080069b1 	.word	0x080069b1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	3303      	adds	r3, #3
 8006992:	089b      	lsrs	r3, r3, #2
 8006994:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006996:	8afa      	ldrh	r2, [r7, #22]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	b29b      	uxth	r3, r3
 800699e:	429a      	cmp	r2, r3
 80069a0:	d91c      	bls.n	80069dc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f043 0220 	orr.w	r2, r3, #32
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	619a      	str	r2, [r3, #24]
          }
          break;
 80069ae:	e015      	b.n	80069dc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	3303      	adds	r3, #3
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80069ba:	8afa      	ldrh	r2, [r7, #22]
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d90a      	bls.n	80069e0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	619a      	str	r2, [r3, #24]
          }
          break;
 80069d6:	e003      	b.n	80069e0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80069d8:	bf00      	nop
 80069da:	e002      	b.n	80069e2 <USB_HC_StartXfer+0x25a>
          break;
 80069dc:	bf00      	nop
 80069de:	e000      	b.n	80069e2 <USB_HC_StartXfer+0x25a>
          break;
 80069e0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	68d9      	ldr	r1, [r3, #12]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	785a      	ldrb	r2, [r3, #1]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2000      	movs	r0, #0
 80069f2:	9000      	str	r0, [sp, #0]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff fb87 	bl	8006108 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3728      	adds	r7, #40	; 0x28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	1ff80000 	.word	0x1ff80000
 8006a08:	200000b4 	.word	0x200000b4

08006a0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	b29b      	uxth	r3, r3
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	0c9b      	lsrs	r3, r3, #18
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <USB_HC_Halt+0x3a>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d16c      	bne.n	8006b42 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a86:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d143      	bne.n	8006b1c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ab2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006af2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	3301      	adds	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b00:	d81d      	bhi.n	8006b3e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b18:	d0ec      	beq.n	8006af4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b1a:	e080      	b.n	8006c1e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b3a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b3c:	e06f      	b.n	8006c1e <USB_HC_Halt+0x1f0>
          break;
 8006b3e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b40:	e06d      	b.n	8006c1e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b60:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d143      	bne.n	8006bfa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b90:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bb0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bd0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bde:	d81d      	bhi.n	8006c1c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf6:	d0ec      	beq.n	8006bd2 <USB_HC_Halt+0x1a4>
 8006bf8:	e011      	b.n	8006c1e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	e000      	b.n	8006c1e <USB_HC_Halt+0x1f0>
          break;
 8006c1c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006c40:	2301      	movs	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	04da      	lsls	r2, r3, #19
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <USB_DoPing+0x74>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	1ff80000 	.word	0x1ff80000

08006ca4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff f9a3 	bl	8006000 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006cba:	2110      	movs	r1, #16
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff f9db 	bl	8006078 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff f9fe 	bl	80060c4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	e01f      	b.n	8006d0e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ce4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cf4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d02:	461a      	mov	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b0f      	cmp	r3, #15
 8006d12:	d9dc      	bls.n	8006cce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006d14:	2300      	movs	r3, #0
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	e034      	b.n	8006d84 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d30:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d38:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d40:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	3301      	adds	r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d60:	d80c      	bhi.n	8006d7c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d78:	d0ec      	beq.n	8006d54 <USB_StopHost+0xb0>
 8006d7a:	e000      	b.n	8006d7e <USB_StopHost+0xda>
        break;
 8006d7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3301      	adds	r3, #1
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b0f      	cmp	r3, #15
 8006d88:	d9c7      	bls.n	8006d1a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d90:	461a      	mov	r2, r3
 8006d92:	f04f 33ff 	mov.w	r3, #4294967295
 8006d96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff f91c 	bl	8005fde <USB_EnableGlobalInt>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006db4:	4904      	ldr	r1, [pc, #16]	; (8006dc8 <MX_FATFS_Init+0x18>)
 8006db6:	4805      	ldr	r0, [pc, #20]	; (8006dcc <MX_FATFS_Init+0x1c>)
 8006db8:	f005 fc8c 	bl	800c6d4 <FATFS_LinkDriver>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <MX_FATFS_Init+0x20>)
 8006dc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006dc4:	bf00      	nop
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20007f54 	.word	0x20007f54
 8006dcc:	0800d02c 	.word	0x0800d02c
 8006dd0:	20009fbc 	.word	0x20009fbc

08006dd4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006dd8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4808      	ldr	r0, [pc, #32]	; (8006e30 <USBH_status+0x34>)
 8006e10:	f000 fe1a 	bl	8007a48 <USBH_MSC_UnitIsReady>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <USBH_status+0x24>
  {
    res = RES_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
 8006e1e:	e001      	b.n	8006e24 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20009fc0 	.word	0x20009fc0

08006e34 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b094      	sub	sp, #80	; 0x50
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006e4a:	7bf9      	ldrb	r1, [r7, #15]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4813      	ldr	r0, [pc, #76]	; (8006ea4 <USBH_read+0x70>)
 8006e56:	f000 fe41 	bl	8007adc <USBH_MSC_Read>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <USBH_read+0x34>
  {
    res = RES_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006e66:	e017      	b.n	8006e98 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006e68:	f107 0210 	add.w	r2, r7, #16
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	480c      	ldr	r0, [pc, #48]	; (8006ea4 <USBH_read+0x70>)
 8006e72:	f000 fe0f 	bl	8007a94 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006e76:	7f7b      	ldrb	r3, [r7, #29]
 8006e78:	2b3a      	cmp	r3, #58	; 0x3a
 8006e7a:	d005      	beq.n	8006e88 <USBH_read+0x54>
 8006e7c:	2b3a      	cmp	r3, #58	; 0x3a
 8006e7e:	dc07      	bgt.n	8006e90 <USBH_read+0x5c>
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d001      	beq.n	8006e88 <USBH_read+0x54>
 8006e84:	2b28      	cmp	r3, #40	; 0x28
 8006e86:	d103      	bne.n	8006e90 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8006e8e:	e003      	b.n	8006e98 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006e96:	bf00      	nop
    }
  }

  return res;
 8006e98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3748      	adds	r7, #72	; 0x48
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20009fc0 	.word	0x20009fc0

08006ea8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b094      	sub	sp, #80	; 0x50
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006ebe:	7bf9      	ldrb	r1, [r7, #15]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	4817      	ldr	r0, [pc, #92]	; (8006f28 <USBH_write+0x80>)
 8006eca:	f000 fe70 	bl	8007bae <USBH_MSC_Write>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d103      	bne.n	8006edc <USBH_write+0x34>
  {
    res = RES_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006eda:	e01f      	b.n	8006f1c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006edc:	f107 0210 	add.w	r2, r7, #16
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4810      	ldr	r0, [pc, #64]	; (8006f28 <USBH_write+0x80>)
 8006ee6:	f000 fdd5 	bl	8007a94 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006eea:	7f7b      	ldrb	r3, [r7, #29]
 8006eec:	2b3a      	cmp	r3, #58	; 0x3a
 8006eee:	d00d      	beq.n	8006f0c <USBH_write+0x64>
 8006ef0:	2b3a      	cmp	r3, #58	; 0x3a
 8006ef2:	dc0f      	bgt.n	8006f14 <USBH_write+0x6c>
 8006ef4:	2b28      	cmp	r3, #40	; 0x28
 8006ef6:	d009      	beq.n	8006f0c <USBH_write+0x64>
 8006ef8:	2b28      	cmp	r3, #40	; 0x28
 8006efa:	dc0b      	bgt.n	8006f14 <USBH_write+0x6c>
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d005      	beq.n	8006f0c <USBH_write+0x64>
 8006f00:	2b27      	cmp	r3, #39	; 0x27
 8006f02:	d107      	bne.n	8006f14 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006f0a:	e007      	b.n	8006f1c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006f12:	e003      	b.n	8006f1c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006f1a:	bf00      	nop
    }
  }

  return res;
 8006f1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3748      	adds	r7, #72	; 0x48
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20009fc0 	.word	0x20009fc0

08006f2c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b090      	sub	sp, #64	; 0x40
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	603a      	str	r2, [r7, #0]
 8006f36:	71fb      	strb	r3, [r7, #7]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006f42:	79bb      	ldrb	r3, [r7, #6]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d852      	bhi.n	8006fee <USBH_ioctl+0xc2>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <USBH_ioctl+0x24>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f69 	.word	0x08006f69
 8006f58:	08006f93 	.word	0x08006f93
 8006f5c:	08006fbf 	.word	0x08006fbf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006f66:	e045      	b.n	8006ff4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006f68:	f107 0208 	add.w	r2, r7, #8
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4823      	ldr	r0, [pc, #140]	; (8007000 <USBH_ioctl+0xd4>)
 8006f72:	f000 fd8f 	bl	8007a94 <USBH_MSC_GetLUNInfo>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006f88:	e034      	b.n	8006ff4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006f90:	e030      	b.n	8006ff4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006f92:	f107 0208 	add.w	r2, r7, #8
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4819      	ldr	r0, [pc, #100]	; (8007000 <USBH_ioctl+0xd4>)
 8006f9c:	f000 fd7a 	bl	8007a94 <USBH_MSC_GetLUNInfo>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d107      	bne.n	8006fb6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006fa6:	8a3b      	ldrh	r3, [r7, #16]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006fb4:	e01e      	b.n	8006ff4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006fbc:	e01a      	b.n	8006ff4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006fbe:	f107 0208 	add.w	r2, r7, #8
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	480e      	ldr	r0, [pc, #56]	; (8007000 <USBH_ioctl+0xd4>)
 8006fc8:	f000 fd64 	bl	8007a94 <USBH_MSC_GetLUNInfo>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006fd2:	8a3b      	ldrh	r3, [r7, #16]
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006fe4:	e006      	b.n	8006ff4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006fec:	e002      	b.n	8006ff4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006fee:	2304      	movs	r3, #4
 8006ff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006ff4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3740      	adds	r7, #64	; 0x40
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20009fc0 	.word	0x20009fc0

08007004 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007004:	b590      	push	{r4, r7, lr}
 8007006:	b089      	sub	sp, #36	; 0x24
 8007008:	af04      	add	r7, sp, #16
 800700a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007012:	7919      	ldrb	r1, [r3, #4]
 8007014:	2350      	movs	r3, #80	; 0x50
 8007016:	2206      	movs	r2, #6
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fc53 	bl	80088c4 <USBH_FindInterface>
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	2bff      	cmp	r3, #255	; 0xff
 8007026:	d002      	beq.n	800702e <USBH_MSC_InterfaceInit+0x2a>
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d901      	bls.n	8007032 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800702e:	2302      	movs	r3, #2
 8007030:	e0ef      	b.n	8007212 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fc28 	bl	800888c <USBH_SelectInterface>
 800703c:	4603      	mov	r3, r0
 800703e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007046:	2302      	movs	r3, #2
 8007048:	e0e3      	b.n	8007212 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007050:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007054:	f005 feb6 	bl	800cdc4 <malloc>
 8007058:	4603      	mov	r3, r0
 800705a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800706c:	2302      	movs	r3, #2
 800706e:	e0d0      	b.n	8007212 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007074:	2100      	movs	r1, #0
 8007076:	68b8      	ldr	r0, [r7, #8]
 8007078:	f005 fec2 	bl	800ce00 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	211a      	movs	r1, #26
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	4413      	add	r3, r2
 8007088:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b25b      	sxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	da16      	bge.n	80070c2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	211a      	movs	r1, #26
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	4413      	add	r3, r2
 80070a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	211a      	movs	r1, #26
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070ba:	881a      	ldrh	r2, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	815a      	strh	r2, [r3, #10]
 80070c0:	e015      	b.n	80070ee <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	211a      	movs	r1, #26
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	4413      	add	r3, r2
 80070ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	211a      	movs	r1, #26
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070e8:	881a      	ldrh	r2, [r3, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	211a      	movs	r1, #26
 80070f4:	fb01 f303 	mul.w	r3, r1, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	b25b      	sxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	da16      	bge.n	8007134 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	211a      	movs	r1, #26
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	4413      	add	r3, r2
 8007112:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	211a      	movs	r1, #26
 8007122:	fb01 f303 	mul.w	r3, r1, r3
 8007126:	4413      	add	r3, r2
 8007128:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800712c:	881a      	ldrh	r2, [r3, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	815a      	strh	r2, [r3, #10]
 8007132:	e015      	b.n	8007160 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	211a      	movs	r1, #26
 800713a:	fb01 f303 	mul.w	r3, r1, r3
 800713e:	4413      	add	r3, r2
 8007140:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007144:	781a      	ldrb	r2, [r3, #0]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	211a      	movs	r1, #26
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	4413      	add	r3, r2
 8007156:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	799b      	ldrb	r3, [r3, #6]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f002 fdc4 	bl	8009d06 <USBH_AllocPipe>
 800717e:	4603      	mov	r3, r0
 8007180:	461a      	mov	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	79db      	ldrb	r3, [r3, #7]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f002 fdba 	bl	8009d06 <USBH_AllocPipe>
 8007192:	4603      	mov	r3, r0
 8007194:	461a      	mov	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fdac 	bl	8007cf8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	7959      	ldrb	r1, [r3, #5]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	7998      	ldrb	r0, [r3, #6]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	8912      	ldrh	r2, [r2, #8]
 80071b8:	9202      	str	r2, [sp, #8]
 80071ba:	2202      	movs	r2, #2
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4623      	mov	r3, r4
 80071c2:	4602      	mov	r2, r0
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f002 fd6f 	bl	8009ca8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	7919      	ldrb	r1, [r3, #4]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	79d8      	ldrb	r0, [r3, #7]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	8952      	ldrh	r2, [r2, #10]
 80071e2:	9202      	str	r2, [sp, #8]
 80071e4:	2202      	movs	r2, #2
 80071e6:	9201      	str	r2, [sp, #4]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4623      	mov	r3, r4
 80071ec:	4602      	mov	r2, r0
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f002 fd5a 	bl	8009ca8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	791b      	ldrb	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f005 fcfd 	bl	800cbfc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	795b      	ldrb	r3, [r3, #5]
 8007206:	2200      	movs	r2, #0
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f005 fcf6 	bl	800cbfc <USBH_LL_SetToggle>

  return USBH_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	bd90      	pop	{r4, r7, pc}

0800721a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	795b      	ldrb	r3, [r3, #5]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00e      	beq.n	8007252 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	795b      	ldrb	r3, [r3, #5]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f002 fd53 	bl	8009ce6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	795b      	ldrb	r3, [r3, #5]
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f002 fd7e 	bl	8009d48 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	791b      	ldrb	r3, [r3, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f002 fd40 	bl	8009ce6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	791b      	ldrb	r3, [r3, #4]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f002 fd6b 	bl	8009d48 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	4618      	mov	r0, r3
 800728e:	f005 fda1 	bl	800cdd4 <free>
    phost->pActiveClass->pData = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007298:	2200      	movs	r2, #0
 800729a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	7b9b      	ldrb	r3, [r3, #14]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d041      	beq.n	8007348 <USBH_MSC_ClassRequest+0xa2>
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	dc4b      	bgt.n	8007360 <USBH_MSC_ClassRequest+0xba>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <USBH_MSC_ClassRequest+0x2a>
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d147      	bne.n	8007360 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fcf0 	bl	8007cba <USBH_MSC_BOT_REQ_GetMaxLUN>
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d104      	bne.n	80072ee <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d137      	bne.n	8007364 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d804      	bhi.n	8007306 <USBH_MSC_ClassRequest+0x60>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	b2da      	uxtb	r2, r3
 8007304:	e000      	b.n	8007308 <USBH_MSC_ClassRequest+0x62>
 8007306:	2202      	movs	r2, #2
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800730c:	2300      	movs	r3, #0
 800730e:	73bb      	strb	r3, [r7, #14]
 8007310:	e014      	b.n	800733c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	2134      	movs	r1, #52	; 0x34
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	3392      	adds	r3, #146	; 0x92
 8007320:	2202      	movs	r2, #2
 8007322:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	2134      	movs	r1, #52	; 0x34
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	4413      	add	r3, r2
 8007330:	33c1      	adds	r3, #193	; 0xc1
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	3301      	adds	r3, #1
 800733a:	73bb      	strb	r3, [r7, #14]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	7bba      	ldrb	r2, [r7, #14]
 8007342:	429a      	cmp	r2, r3
 8007344:	d3e5      	bcc.n	8007312 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007346:	e00d      	b.n	8007364 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007348:	2100      	movs	r1, #0
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 f87b 	bl	8009446 <USBH_ClrFeature>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d108      	bne.n	8007368 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	7bda      	ldrb	r2, [r3, #15]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800735e:	e003      	b.n	8007368 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <USBH_MSC_ClassRequest+0xc4>
      break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <USBH_MSC_ClassRequest+0xc4>
      break;
 8007368:	bf00      	nop
  }

  return status;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800738e:	2301      	movs	r3, #1
 8007390:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	7b1b      	ldrb	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <USBH_MSC_Process+0x2e>
 800739a:	2b01      	cmp	r3, #1
 800739c:	f000 8271 	beq.w	8007882 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80073a0:	e272      	b.n	8007888 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	429a      	cmp	r2, r3
 80073b0:	f080 824f 	bcs.w	8007852 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073ba:	4619      	mov	r1, r3
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	2334      	movs	r3, #52	; 0x34
 80073c0:	fb03 f301 	mul.w	r3, r3, r1
 80073c4:	4413      	add	r3, r2
 80073c6:	3391      	adds	r3, #145	; 0x91
 80073c8:	2201      	movs	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073d2:	4619      	mov	r1, r3
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	2334      	movs	r3, #52	; 0x34
 80073d8:	fb03 f301 	mul.w	r3, r3, r1
 80073dc:	4413      	add	r3, r2
 80073de:	3390      	adds	r3, #144	; 0x90
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	f200 8243 	bhi.w	800786e <USBH_MSC_Process+0x4fa>
 80073e8:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <USBH_MSC_Process+0x7c>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007415 	.word	0x08007415
 80073f4:	0800786f 	.word	0x0800786f
 80073f8:	080074dd 	.word	0x080074dd
 80073fc:	08007661 	.word	0x08007661
 8007400:	0800743b 	.word	0x0800743b
 8007404:	0800772d 	.word	0x0800772d
 8007408:	0800786f 	.word	0x0800786f
 800740c:	0800786f 	.word	0x0800786f
 8007410:	08007841 	.word	0x08007841
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800741a:	4619      	mov	r1, r3
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	2334      	movs	r3, #52	; 0x34
 8007420:	fb03 f301 	mul.w	r3, r3, r1
 8007424:	4413      	add	r3, r2
 8007426:	3390      	adds	r3, #144	; 0x90
 8007428:	2204      	movs	r2, #4
 800742a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007438:	e222      	b.n	8007880 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007440:	b2d9      	uxtb	r1, r3
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007448:	461a      	mov	r2, r3
 800744a:	2334      	movs	r3, #52	; 0x34
 800744c:	fb03 f302 	mul.w	r3, r3, r2
 8007450:	3398      	adds	r3, #152	; 0x98
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	3307      	adds	r3, #7
 8007458:	461a      	mov	r2, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 ff6a 	bl	8008334 <USBH_MSC_SCSI_Inquiry>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007470:	4619      	mov	r1, r3
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	2334      	movs	r3, #52	; 0x34
 8007476:	fb03 f301 	mul.w	r3, r3, r1
 800747a:	4413      	add	r3, r2
 800747c:	3390      	adds	r3, #144	; 0x90
 800747e:	2202      	movs	r2, #2
 8007480:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d10c      	bne.n	80074a2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800748e:	4619      	mov	r1, r3
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	2334      	movs	r3, #52	; 0x34
 8007494:	fb03 f301 	mul.w	r3, r3, r1
 8007498:	4413      	add	r3, r2
 800749a:	3390      	adds	r3, #144	; 0x90
 800749c:	2205      	movs	r2, #5
 800749e:	701a      	strb	r2, [r3, #0]
            break;
 80074a0:	e1e7      	b.n	8007872 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	f040 81e4 	bne.w	8007872 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074b0:	4619      	mov	r1, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	2334      	movs	r3, #52	; 0x34
 80074b6:	fb03 f301 	mul.w	r3, r3, r1
 80074ba:	4413      	add	r3, r2
 80074bc:	3390      	adds	r3, #144	; 0x90
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074c8:	4619      	mov	r1, r3
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	2334      	movs	r3, #52	; 0x34
 80074ce:	fb03 f301 	mul.w	r3, r3, r1
 80074d2:	4413      	add	r3, r2
 80074d4:	3391      	adds	r3, #145	; 0x91
 80074d6:	2202      	movs	r2, #2
 80074d8:	701a      	strb	r2, [r3, #0]
            break;
 80074da:	e1ca      	b.n	8007872 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fe66 	bl	80081b8 <USBH_MSC_SCSI_TestUnitReady>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d149      	bne.n	800758a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074fc:	4619      	mov	r1, r3
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	2334      	movs	r3, #52	; 0x34
 8007502:	fb03 f301 	mul.w	r3, r3, r1
 8007506:	4413      	add	r3, r2
 8007508:	3392      	adds	r3, #146	; 0x92
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00c      	beq.n	800752a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007516:	4619      	mov	r1, r3
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	2334      	movs	r3, #52	; 0x34
 800751c:	fb03 f301 	mul.w	r3, r3, r1
 8007520:	4413      	add	r3, r2
 8007522:	33c1      	adds	r3, #193	; 0xc1
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e00b      	b.n	8007542 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007530:	4619      	mov	r1, r3
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	2334      	movs	r3, #52	; 0x34
 8007536:	fb03 f301 	mul.w	r3, r3, r1
 800753a:	4413      	add	r3, r2
 800753c:	33c1      	adds	r3, #193	; 0xc1
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007548:	4619      	mov	r1, r3
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	2334      	movs	r3, #52	; 0x34
 800754e:	fb03 f301 	mul.w	r3, r3, r1
 8007552:	4413      	add	r3, r2
 8007554:	3390      	adds	r3, #144	; 0x90
 8007556:	2203      	movs	r2, #3
 8007558:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007560:	4619      	mov	r1, r3
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	2334      	movs	r3, #52	; 0x34
 8007566:	fb03 f301 	mul.w	r3, r3, r1
 800756a:	4413      	add	r3, r2
 800756c:	3391      	adds	r3, #145	; 0x91
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007578:	4619      	mov	r1, r3
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	2334      	movs	r3, #52	; 0x34
 800757e:	fb03 f301 	mul.w	r3, r3, r1
 8007582:	4413      	add	r3, r2
 8007584:	3392      	adds	r3, #146	; 0x92
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d14a      	bne.n	8007626 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007596:	4619      	mov	r1, r3
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	2334      	movs	r3, #52	; 0x34
 800759c:	fb03 f301 	mul.w	r3, r3, r1
 80075a0:	4413      	add	r3, r2
 80075a2:	3392      	adds	r3, #146	; 0x92
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d00c      	beq.n	80075c4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075b0:	4619      	mov	r1, r3
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	2334      	movs	r3, #52	; 0x34
 80075b6:	fb03 f301 	mul.w	r3, r3, r1
 80075ba:	4413      	add	r3, r2
 80075bc:	33c1      	adds	r3, #193	; 0xc1
 80075be:	2201      	movs	r2, #1
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	e00b      	b.n	80075dc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075ca:	4619      	mov	r1, r3
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	2334      	movs	r3, #52	; 0x34
 80075d0:	fb03 f301 	mul.w	r3, r3, r1
 80075d4:	4413      	add	r3, r2
 80075d6:	33c1      	adds	r3, #193	; 0xc1
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075e2:	4619      	mov	r1, r3
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	2334      	movs	r3, #52	; 0x34
 80075e8:	fb03 f301 	mul.w	r3, r3, r1
 80075ec:	4413      	add	r3, r2
 80075ee:	3390      	adds	r3, #144	; 0x90
 80075f0:	2205      	movs	r2, #5
 80075f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075fa:	4619      	mov	r1, r3
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	2334      	movs	r3, #52	; 0x34
 8007600:	fb03 f301 	mul.w	r3, r3, r1
 8007604:	4413      	add	r3, r2
 8007606:	3391      	adds	r3, #145	; 0x91
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007612:	4619      	mov	r1, r3
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	2334      	movs	r3, #52	; 0x34
 8007618:	fb03 f301 	mul.w	r3, r3, r1
 800761c:	4413      	add	r3, r2
 800761e:	3392      	adds	r3, #146	; 0x92
 8007620:	2202      	movs	r2, #2
 8007622:	701a      	strb	r2, [r3, #0]
            break;
 8007624:	e127      	b.n	8007876 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b04      	cmp	r3, #4
 800762a:	f040 8124 	bne.w	8007876 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007634:	4619      	mov	r1, r3
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	2334      	movs	r3, #52	; 0x34
 800763a:	fb03 f301 	mul.w	r3, r3, r1
 800763e:	4413      	add	r3, r2
 8007640:	3390      	adds	r3, #144	; 0x90
 8007642:	2201      	movs	r2, #1
 8007644:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800764c:	4619      	mov	r1, r3
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	2334      	movs	r3, #52	; 0x34
 8007652:	fb03 f301 	mul.w	r3, r3, r1
 8007656:	4413      	add	r3, r2
 8007658:	3391      	adds	r3, #145	; 0x91
 800765a:	2202      	movs	r2, #2
 800765c:	701a      	strb	r2, [r3, #0]
            break;
 800765e:	e10a      	b.n	8007876 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007666:	b2d9      	uxtb	r1, r3
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800766e:	461a      	mov	r2, r3
 8007670:	2334      	movs	r3, #52	; 0x34
 8007672:	fb03 f302 	mul.w	r3, r3, r2
 8007676:	3390      	adds	r3, #144	; 0x90
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4413      	add	r3, r2
 800767c:	3304      	adds	r3, #4
 800767e:	461a      	mov	r2, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fddc 	bl	800823e <USBH_MSC_SCSI_ReadCapacity>
 8007686:	4603      	mov	r3, r0
 8007688:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d120      	bne.n	80076d2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007696:	4619      	mov	r1, r3
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	2334      	movs	r3, #52	; 0x34
 800769c:	fb03 f301 	mul.w	r3, r3, r1
 80076a0:	4413      	add	r3, r2
 80076a2:	3390      	adds	r3, #144	; 0x90
 80076a4:	2201      	movs	r2, #1
 80076a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ae:	4619      	mov	r1, r3
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	2334      	movs	r3, #52	; 0x34
 80076b4:	fb03 f301 	mul.w	r3, r3, r1
 80076b8:	4413      	add	r3, r2
 80076ba:	3391      	adds	r3, #145	; 0x91
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076c6:	3301      	adds	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80076d0:	e0d3      	b.n	800787a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d10c      	bne.n	80076f2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076de:	4619      	mov	r1, r3
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	2334      	movs	r3, #52	; 0x34
 80076e4:	fb03 f301 	mul.w	r3, r3, r1
 80076e8:	4413      	add	r3, r2
 80076ea:	3390      	adds	r3, #144	; 0x90
 80076ec:	2205      	movs	r2, #5
 80076ee:	701a      	strb	r2, [r3, #0]
            break;
 80076f0:	e0c3      	b.n	800787a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	f040 80c0 	bne.w	800787a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007700:	4619      	mov	r1, r3
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	2334      	movs	r3, #52	; 0x34
 8007706:	fb03 f301 	mul.w	r3, r3, r1
 800770a:	4413      	add	r3, r2
 800770c:	3390      	adds	r3, #144	; 0x90
 800770e:	2201      	movs	r2, #1
 8007710:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007718:	4619      	mov	r1, r3
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	2334      	movs	r3, #52	; 0x34
 800771e:	fb03 f301 	mul.w	r3, r3, r1
 8007722:	4413      	add	r3, r2
 8007724:	3391      	adds	r3, #145	; 0x91
 8007726:	2202      	movs	r2, #2
 8007728:	701a      	strb	r2, [r3, #0]
            break;
 800772a:	e0a6      	b.n	800787a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007732:	b2d9      	uxtb	r1, r3
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800773a:	461a      	mov	r2, r3
 800773c:	2334      	movs	r3, #52	; 0x34
 800773e:	fb03 f302 	mul.w	r3, r3, r2
 8007742:	3398      	adds	r3, #152	; 0x98
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	4413      	add	r3, r2
 8007748:	3304      	adds	r3, #4
 800774a:	461a      	mov	r2, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fe96 	bl	800847e <USBH_MSC_SCSI_RequestSense>
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d145      	bne.n	80077e8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007762:	4619      	mov	r1, r3
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	2334      	movs	r3, #52	; 0x34
 8007768:	fb03 f301 	mul.w	r3, r3, r1
 800776c:	4413      	add	r3, r2
 800776e:	339c      	adds	r3, #156	; 0x9c
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b06      	cmp	r3, #6
 8007774:	d00c      	beq.n	8007790 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800777c:	4619      	mov	r1, r3
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	2334      	movs	r3, #52	; 0x34
 8007782:	fb03 f301 	mul.w	r3, r3, r1
 8007786:	4413      	add	r3, r2
 8007788:	339c      	adds	r3, #156	; 0x9c
 800778a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800778c:	2b02      	cmp	r3, #2
 800778e:	d117      	bne.n	80077c0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f242 720f 	movw	r2, #9999	; 0x270f
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d80c      	bhi.n	80077c0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077ac:	4619      	mov	r1, r3
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	2334      	movs	r3, #52	; 0x34
 80077b2:	fb03 f301 	mul.w	r3, r3, r1
 80077b6:	4413      	add	r3, r2
 80077b8:	3390      	adds	r3, #144	; 0x90
 80077ba:	2202      	movs	r2, #2
 80077bc:	701a      	strb	r2, [r3, #0]
                  break;
 80077be:	e05f      	b.n	8007880 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077c6:	4619      	mov	r1, r3
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	2334      	movs	r3, #52	; 0x34
 80077cc:	fb03 f301 	mul.w	r3, r3, r1
 80077d0:	4413      	add	r3, r2
 80077d2:	3390      	adds	r3, #144	; 0x90
 80077d4:	2201      	movs	r2, #1
 80077d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077de:	3301      	adds	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d10c      	bne.n	8007808 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077f4:	4619      	mov	r1, r3
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	2334      	movs	r3, #52	; 0x34
 80077fa:	fb03 f301 	mul.w	r3, r3, r1
 80077fe:	4413      	add	r3, r2
 8007800:	3390      	adds	r3, #144	; 0x90
 8007802:	2208      	movs	r2, #8
 8007804:	701a      	strb	r2, [r3, #0]
            break;
 8007806:	e03a      	b.n	800787e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b04      	cmp	r3, #4
 800780c:	d137      	bne.n	800787e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007814:	4619      	mov	r1, r3
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	2334      	movs	r3, #52	; 0x34
 800781a:	fb03 f301 	mul.w	r3, r3, r1
 800781e:	4413      	add	r3, r2
 8007820:	3390      	adds	r3, #144	; 0x90
 8007822:	2201      	movs	r2, #1
 8007824:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800782c:	4619      	mov	r1, r3
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	2334      	movs	r3, #52	; 0x34
 8007832:	fb03 f301 	mul.w	r3, r3, r1
 8007836:	4413      	add	r3, r2
 8007838:	3391      	adds	r3, #145	; 0x91
 800783a:	2202      	movs	r2, #2
 800783c:	701a      	strb	r2, [r3, #0]
            break;
 800783e:	e01e      	b.n	800787e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007846:	3301      	adds	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007850:	e016      	b.n	8007880 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2200      	movs	r2, #0
 8007856:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2201      	movs	r2, #1
 800785e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007866:	2102      	movs	r1, #2
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
      break;
 800786c:	e00c      	b.n	8007888 <USBH_MSC_Process+0x514>
            break;
 800786e:	bf00      	nop
 8007870:	e00a      	b.n	8007888 <USBH_MSC_Process+0x514>
            break;
 8007872:	bf00      	nop
 8007874:	e008      	b.n	8007888 <USBH_MSC_Process+0x514>
            break;
 8007876:	bf00      	nop
 8007878:	e006      	b.n	8007888 <USBH_MSC_Process+0x514>
            break;
 800787a:	bf00      	nop
 800787c:	e004      	b.n	8007888 <USBH_MSC_Process+0x514>
            break;
 800787e:	bf00      	nop
      break;
 8007880:	e002      	b.n	8007888 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
      break;
 8007886:	bf00      	nop
  }
  return error;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop

08007894 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b088      	sub	sp, #32
 80078ae:	af02      	add	r7, sp, #8
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80078c0:	2301      	movs	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	2134      	movs	r1, #52	; 0x34
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	3390      	adds	r3, #144	; 0x90
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b07      	cmp	r3, #7
 80078da:	d03c      	beq.n	8007956 <USBH_MSC_RdWrProcess+0xac>
 80078dc:	2b07      	cmp	r3, #7
 80078de:	f300 80a7 	bgt.w	8007a30 <USBH_MSC_RdWrProcess+0x186>
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	d06c      	beq.n	80079c0 <USBH_MSC_RdWrProcess+0x116>
 80078e6:	2b06      	cmp	r3, #6
 80078e8:	f040 80a2 	bne.w	8007a30 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80078ec:	78f9      	ldrb	r1, [r7, #3]
 80078ee:	2300      	movs	r3, #0
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	2300      	movs	r3, #0
 80078f4:	2200      	movs	r2, #0
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fea5 	bl	8008646 <USBH_MSC_SCSI_Read>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	2134      	movs	r1, #52	; 0x34
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	3390      	adds	r3, #144	; 0x90
 8007914:	2201      	movs	r2, #1
 8007916:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800791c:	e08a      	b.n	8007a34 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d109      	bne.n	8007938 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	2134      	movs	r1, #52	; 0x34
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	3390      	adds	r3, #144	; 0x90
 8007932:	2205      	movs	r2, #5
 8007934:	701a      	strb	r2, [r3, #0]
      break;
 8007936:	e07d      	b.n	8007a34 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	2b04      	cmp	r3, #4
 800793c:	d17a      	bne.n	8007a34 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	2134      	movs	r1, #52	; 0x34
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	4413      	add	r3, r2
 800794a:	3390      	adds	r3, #144	; 0x90
 800794c:	2208      	movs	r2, #8
 800794e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007950:	2302      	movs	r3, #2
 8007952:	75fb      	strb	r3, [r7, #23]
      break;
 8007954:	e06e      	b.n	8007a34 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007956:	78f9      	ldrb	r1, [r7, #3]
 8007958:	2300      	movs	r3, #0
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	2200      	movs	r2, #0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fe05 	bl	8008570 <USBH_MSC_SCSI_Write>
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10b      	bne.n	8007988 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	2134      	movs	r1, #52	; 0x34
 8007976:	fb01 f303 	mul.w	r3, r1, r3
 800797a:	4413      	add	r3, r2
 800797c:	3390      	adds	r3, #144	; 0x90
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007986:	e057      	b.n	8007a38 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d109      	bne.n	80079a2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800798e:	78fb      	ldrb	r3, [r7, #3]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	2134      	movs	r1, #52	; 0x34
 8007994:	fb01 f303 	mul.w	r3, r1, r3
 8007998:	4413      	add	r3, r2
 800799a:	3390      	adds	r3, #144	; 0x90
 800799c:	2205      	movs	r2, #5
 800799e:	701a      	strb	r2, [r3, #0]
      break;
 80079a0:	e04a      	b.n	8007a38 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d147      	bne.n	8007a38 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	2134      	movs	r1, #52	; 0x34
 80079ae:	fb01 f303 	mul.w	r3, r1, r3
 80079b2:	4413      	add	r3, r2
 80079b4:	3390      	adds	r3, #144	; 0x90
 80079b6:	2208      	movs	r2, #8
 80079b8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80079ba:	2302      	movs	r3, #2
 80079bc:	75fb      	strb	r3, [r7, #23]
      break;
 80079be:	e03b      	b.n	8007a38 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	2234      	movs	r2, #52	; 0x34
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	3398      	adds	r3, #152	; 0x98
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4413      	add	r3, r2
 80079ce:	1d1a      	adds	r2, r3, #4
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fd52 	bl	800847e <USBH_MSC_SCSI_RequestSense>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d113      	bne.n	8007a0c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	2134      	movs	r1, #52	; 0x34
 80079ea:	fb01 f303 	mul.w	r3, r1, r3
 80079ee:	4413      	add	r3, r2
 80079f0:	3390      	adds	r3, #144	; 0x90
 80079f2:	2201      	movs	r2, #1
 80079f4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80079f6:	78fb      	ldrb	r3, [r7, #3]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	2134      	movs	r1, #52	; 0x34
 80079fc:	fb01 f303 	mul.w	r3, r1, r3
 8007a00:	4413      	add	r3, r2
 8007a02:	3391      	adds	r3, #145	; 0x91
 8007a04:	2202      	movs	r2, #2
 8007a06:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d014      	beq.n	8007a3c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d111      	bne.n	8007a3c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	2134      	movs	r1, #52	; 0x34
 8007a1e:	fb01 f303 	mul.w	r3, r1, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	3390      	adds	r3, #144	; 0x90
 8007a26:	2208      	movs	r2, #8
 8007a28:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a2e:	e005      	b.n	8007a3c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8007a30:	bf00      	nop
 8007a32:	e004      	b.n	8007a3e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007a34:	bf00      	nop
 8007a36:	e002      	b.n	8007a3e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007a38:	bf00      	nop
 8007a3a:	e000      	b.n	8007a3e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007a3c:	bf00      	nop

  }
  return error;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b0b      	cmp	r3, #11
 8007a66:	d10c      	bne.n	8007a82 <USBH_MSC_UnitIsReady+0x3a>
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	2134      	movs	r1, #52	; 0x34
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	4413      	add	r3, r2
 8007a74:	3391      	adds	r3, #145	; 0x91
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	73fb      	strb	r3, [r7, #15]
 8007a80:	e001      	b.n	8007a86 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b0b      	cmp	r3, #11
 8007ab4:	d10d      	bne.n	8007ad2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	2234      	movs	r2, #52	; 0x34
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	3390      	adds	r3, #144	; 0x90
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	2234      	movs	r2, #52	; 0x34
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f005 f98b 	bl	800cde4 <memcpy>
    return USBH_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e000      	b.n	8007ad4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007ad2:	2302      	movs	r3, #2
  }
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00e      	beq.n	8007b20 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007b08:	2b0b      	cmp	r3, #11
 8007b0a:	d109      	bne.n	8007b20 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	2134      	movs	r1, #52	; 0x34
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	4413      	add	r3, r2
 8007b18:	3390      	adds	r3, #144	; 0x90
 8007b1a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d001      	beq.n	8007b24 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007b20:	2302      	movs	r3, #2
 8007b22:	e040      	b.n	8007ba6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2206      	movs	r2, #6
 8007b28:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	2134      	movs	r1, #52	; 0x34
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	3390      	adds	r3, #144	; 0x90
 8007b38:	2206      	movs	r2, #6
 8007b3a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007b46:	7af9      	ldrb	r1, [r7, #11]
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fd78 	bl	8008646 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b5c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007b5e:	e016      	b.n	8007b8e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	f242 7110 	movw	r1, #10000	; 0x2710
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d805      	bhi.n	8007b84 <USBH_MSC_Read+0xa8>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2201      	movs	r2, #1
 8007b88:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e00b      	b.n	8007ba6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	4619      	mov	r1, r3
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f7ff fe89 	bl	80078aa <USBH_MSC_RdWrProcess>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d0e0      	beq.n	8007b60 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b088      	sub	sp, #32
 8007bb2:	af02      	add	r7, sp, #8
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00e      	beq.n	8007bf2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007bda:	2b0b      	cmp	r3, #11
 8007bdc:	d109      	bne.n	8007bf2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	2134      	movs	r1, #52	; 0x34
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	3390      	adds	r3, #144	; 0x90
 8007bec:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d001      	beq.n	8007bf6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e040      	b.n	8007c78 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2207      	movs	r2, #7
 8007bfa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	2134      	movs	r1, #52	; 0x34
 8007c02:	fb01 f303 	mul.w	r3, r1, r3
 8007c06:	4413      	add	r3, r2
 8007c08:	3390      	adds	r3, #144	; 0x90
 8007c0a:	2207      	movs	r2, #7
 8007c0c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007c18:	7af9      	ldrb	r1, [r7, #11]
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fca4 	bl	8008570 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c2e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007c30:	e016      	b.n	8007c60 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	1ad2      	subs	r2, r2, r3
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007c42:	fb01 f303 	mul.w	r3, r1, r3
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d805      	bhi.n	8007c56 <USBH_MSC_Write+0xa8>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d104      	bne.n	8007c60 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e00b      	b.n	8007c78 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	4619      	mov	r1, r3
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff fe20 	bl	80078aa <USBH_MSC_RdWrProcess>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d0e0      	beq.n	8007c32 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2201      	movs	r2, #1
 8007c74:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2221      	movs	r2, #33	; 0x21
 8007c8c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	22ff      	movs	r2, #255	; 0xff
 8007c92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fdab 	bl	8009806 <USBH_CtlReq>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	22a1      	movs	r2, #161	; 0xa1
 8007cc8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	22fe      	movs	r2, #254	; 0xfe
 8007cce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fd8d 	bl	8009806 <USBH_CtlReq>
 8007cec:	4603      	mov	r3, r0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <USBH_MSC_BOT_Init+0x3c>)
 8007d0e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a09      	ldr	r2, [pc, #36]	; (8007d38 <USBH_MSC_BOT_Init+0x40>)
 8007d14:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	43425355 	.word	0x43425355
 8007d38:	20304050 	.word	0x20304050

08007d3c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007d50:	2301      	movs	r3, #1
 8007d52:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	2b0a      	cmp	r3, #10
 8007d70:	f200 819e 	bhi.w	80080b0 <USBH_MSC_BOT_Process+0x374>
 8007d74:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <USBH_MSC_BOT_Process+0x40>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	08007dd1 	.word	0x08007dd1
 8007d84:	08007e3b 	.word	0x08007e3b
 8007d88:	08007e59 	.word	0x08007e59
 8007d8c:	08007edd 	.word	0x08007edd
 8007d90:	08007eff 	.word	0x08007eff
 8007d94:	08007f97 	.word	0x08007f97
 8007d98:	08007fb3 	.word	0x08007fb3
 8007d9c:	08008005 	.word	0x08008005
 8007da0:	08008035 	.word	0x08008035
 8007da4:	08008097 	.word	0x08008097
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	78fa      	ldrb	r2, [r7, #3]
 8007dac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	795b      	ldrb	r3, [r3, #5]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	9200      	str	r2, [sp, #0]
 8007dc6:	221f      	movs	r2, #31
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 ff2a 	bl	8009c22 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007dce:	e17e      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	795b      	ldrb	r3, [r3, #5]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f004 fee6 	bl	800cba8 <USBH_LL_GetURBState>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007de0:	7d3b      	ldrb	r3, [r7, #20]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d118      	bne.n	8007e18 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00f      	beq.n	8007e0e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da04      	bge.n	8007e04 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e02:	e157      	b.n	80080b4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2205      	movs	r2, #5
 8007e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e0c:	e152      	b.n	80080b4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2207      	movs	r2, #7
 8007e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e16:	e14d      	b.n	80080b4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e18:	7d3b      	ldrb	r3, [r7, #20]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d104      	bne.n	8007e28 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e26:	e145      	b.n	80080b4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8007e28:	7d3b      	ldrb	r3, [r7, #20]
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	f040 8142 	bne.w	80080b4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	220a      	movs	r2, #10
 8007e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e38:	e13c      	b.n	80080b4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	895a      	ldrh	r2, [r3, #10]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	791b      	ldrb	r3, [r3, #4]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 ff0f 	bl	8009c6c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2204      	movs	r2, #4
 8007e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007e56:	e13a      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	791b      	ldrb	r3, [r3, #4]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f004 fea2 	bl	800cba8 <USBH_LL_GetURBState>
 8007e64:	4603      	mov	r3, r0
 8007e66:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007e68:	7d3b      	ldrb	r3, [r7, #20]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d12d      	bne.n	8007eca <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	8952      	ldrh	r2, [r2, #10]
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d910      	bls.n	8007e9c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	8952      	ldrh	r2, [r2, #10]
 8007e84:	441a      	add	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	8952      	ldrh	r2, [r2, #10]
 8007e94:	1a9a      	subs	r2, r3, r2
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e9a:	e002      	b.n	8007ea2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	895a      	ldrh	r2, [r3, #10]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	791b      	ldrb	r3, [r3, #4]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 fed7 	bl	8009c6c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007ebe:	e0fb      	b.n	80080b8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2207      	movs	r2, #7
 8007ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ec8:	e0f6      	b.n	80080b8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8007eca:	7d3b      	ldrb	r3, [r7, #20]
 8007ecc:	2b05      	cmp	r3, #5
 8007ece:	f040 80f3 	bne.w	80080b8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2209      	movs	r2, #9
 8007ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007eda:	e0ed      	b.n	80080b8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	891a      	ldrh	r2, [r3, #8]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	795b      	ldrb	r3, [r3, #5]
 8007eea:	2001      	movs	r0, #1
 8007eec:	9000      	str	r0, [sp, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fe97 	bl	8009c22 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2206      	movs	r2, #6
 8007ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007efc:	e0e7      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	795b      	ldrb	r3, [r3, #5]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f004 fe4f 	bl	800cba8 <USBH_LL_GetURBState>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007f0e:	7d3b      	ldrb	r3, [r7, #20]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d12f      	bne.n	8007f74 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	8912      	ldrh	r2, [r2, #8]
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d910      	bls.n	8007f42 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	8912      	ldrh	r2, [r2, #8]
 8007f2a:	441a      	add	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	8912      	ldrh	r2, [r2, #8]
 8007f3a:	1a9a      	subs	r2, r3, r2
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f40:	e002      	b.n	8007f48 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2200      	movs	r2, #0
 8007f46:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00c      	beq.n	8007f6a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	891a      	ldrh	r2, [r3, #8]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	795b      	ldrb	r3, [r3, #5]
 8007f5e:	2001      	movs	r0, #1
 8007f60:	9000      	str	r0, [sp, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fe5d 	bl	8009c22 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007f68:	e0a8      	b.n	80080bc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	2207      	movs	r2, #7
 8007f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f72:	e0a3      	b.n	80080bc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f74:	7d3b      	ldrb	r3, [r7, #20]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d104      	bne.n	8007f84 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2205      	movs	r2, #5
 8007f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f82:	e09b      	b.n	80080bc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007f84:	7d3b      	ldrb	r3, [r7, #20]
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	f040 8098 	bne.w	80080bc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	220a      	movs	r2, #10
 8007f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f94:	e092      	b.n	80080bc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	791b      	ldrb	r3, [r3, #4]
 8007fa0:	220d      	movs	r2, #13
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fe62 	bl	8009c6c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2208      	movs	r2, #8
 8007fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007fb0:	e08d      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	791b      	ldrb	r3, [r3, #4]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f004 fdf5 	bl	800cba8 <USBH_LL_GetURBState>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007fc2:	7d3b      	ldrb	r3, [r7, #20]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d115      	bne.n	8007ff4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f8a9 	bl	8008130 <USBH_MSC_DecodeCSW>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007fe2:	7d7b      	ldrb	r3, [r7, #21]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007fec:	e068      	b.n	80080c0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff2:	e065      	b.n	80080c0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007ff4:	7d3b      	ldrb	r3, [r7, #20]
 8007ff6:	2b05      	cmp	r3, #5
 8007ff8:	d162      	bne.n	80080c0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2209      	movs	r2, #9
 8007ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008002:	e05d      	b.n	80080c0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	2200      	movs	r2, #0
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f864 	bl	80080d8 <USBH_MSC_BOT_Abort>
 8008010:	4603      	mov	r3, r0
 8008012:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008014:	7dbb      	ldrb	r3, [r7, #22]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2207      	movs	r2, #7
 800801e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008022:	e04f      	b.n	80080c4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008024:	7dbb      	ldrb	r3, [r7, #22]
 8008026:	2b04      	cmp	r3, #4
 8008028:	d14c      	bne.n	80080c4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	220b      	movs	r2, #11
 800802e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008032:	e047      	b.n	80080c4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	2201      	movs	r2, #1
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f84c 	bl	80080d8 <USBH_MSC_BOT_Abort>
 8008040:	4603      	mov	r3, r0
 8008042:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008044:	7dbb      	ldrb	r3, [r7, #22]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d11d      	bne.n	8008086 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	795b      	ldrb	r3, [r3, #5]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f004 fe06 	bl	800cc62 <USBH_LL_GetToggle>
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	7959      	ldrb	r1, [r3, #5]
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	f1c3 0301 	rsb	r3, r3, #1
 8008064:	b2db      	uxtb	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f004 fdc7 	bl	800cbfc <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f004 fdc0 	bl	800cbfc <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2209      	movs	r2, #9
 8008080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008084:	e020      	b.n	80080c8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008086:	7dbb      	ldrb	r3, [r7, #22]
 8008088:	2b04      	cmp	r3, #4
 800808a:	d11d      	bne.n	80080c8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	220b      	movs	r2, #11
 8008090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008094:	e018      	b.n	80080c8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fdf2 	bl	8007c80 <USBH_MSC_BOT_REQ_Reset>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d112      	bne.n	80080cc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80080ae:	e00d      	b.n	80080cc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80080b0:	bf00      	nop
 80080b2:	e00c      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>
      break;
 80080b4:	bf00      	nop
 80080b6:	e00a      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>
      break;
 80080b8:	bf00      	nop
 80080ba:	e008      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>
      break;
 80080bc:	bf00      	nop
 80080be:	e006      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>
      break;
 80080c0:	bf00      	nop
 80080c2:	e004      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>
      break;
 80080c4:	bf00      	nop
 80080c6:	e002      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>
      break;
 80080c8:	bf00      	nop
 80080ca:	e000      	b.n	80080ce <USBH_MSC_BOT_Process+0x392>
      break;
 80080cc:	bf00      	nop
  }
  return status;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
 80080e4:	4613      	mov	r3, r2
 80080e6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80080e8:	2302      	movs	r3, #2
 80080ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80080f6:	78bb      	ldrb	r3, [r7, #2]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <USBH_MSC_BOT_Abort+0x2a>
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d009      	beq.n	8008114 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008100:	e011      	b.n	8008126 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	79db      	ldrb	r3, [r3, #7]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f99c 	bl	8009446 <USBH_ClrFeature>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]
      break;
 8008112:	e008      	b.n	8008126 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	799b      	ldrb	r3, [r3, #6]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 f993 	bl	8009446 <USBH_ClrFeature>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
      break;
 8008124:	bf00      	nop
  }
  return status;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008142:	2301      	movs	r3, #1
 8008144:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	791b      	ldrb	r3, [r3, #4]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f004 fc99 	bl	800ca84 <USBH_LL_GetLastXferSize>
 8008152:	4603      	mov	r3, r0
 8008154:	2b0d      	cmp	r3, #13
 8008156:	d002      	beq.n	800815e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008158:	2302      	movs	r3, #2
 800815a:	73fb      	strb	r3, [r7, #15]
 800815c:	e024      	b.n	80081a8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008162:	4a14      	ldr	r2, [pc, #80]	; (80081b4 <USBH_MSC_DecodeCSW+0x84>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d11d      	bne.n	80081a4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008170:	429a      	cmp	r2, r3
 8008172:	d119      	bne.n	80081a8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]
 8008182:	e011      	b.n	80081a8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800818a:	2b01      	cmp	r3, #1
 800818c:	d102      	bne.n	8008194 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800818e:	2301      	movs	r3, #1
 8008190:	73fb      	strb	r3, [r7, #15]
 8008192:	e009      	b.n	80081a8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800819a:	2b02      	cmp	r3, #2
 800819c:	d104      	bne.n	80081a8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800819e:	2302      	movs	r3, #2
 80081a0:	73fb      	strb	r3, [r7, #15]
 80081a2:	e001      	b.n	80081a8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80081a4:	2302      	movs	r3, #2
 80081a6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	53425355 	.word	0x53425355

080081b8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80081c4:	2302      	movs	r3, #2
 80081c6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d002      	beq.n	80081e2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d021      	beq.n	8008224 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80081e0:	e028      	b.n	8008234 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2200      	movs	r2, #0
 80081e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	220a      	movs	r2, #10
 80081f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3363      	adds	r3, #99	; 0x63
 80081fc:	2210      	movs	r2, #16
 80081fe:	2100      	movs	r1, #0
 8008200:	4618      	mov	r0, r3
 8008202:	f004 fdfd 	bl	800ce00 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2202      	movs	r2, #2
 800821a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800821e:	2301      	movs	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]
      break;
 8008222:	e007      	b.n	8008234 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff fd87 	bl	8007d3c <USBH_MSC_BOT_Process>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]
      break;
 8008232:	bf00      	nop
  }

  return error;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	460b      	mov	r3, r1
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800824c:	2301      	movs	r3, #1
 800824e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008260:	2b01      	cmp	r3, #1
 8008262:	d002      	beq.n	800826a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008264:	2b02      	cmp	r3, #2
 8008266:	d027      	beq.n	80082b8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008268:	e05f      	b.n	800832a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2208      	movs	r2, #8
 800826e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	220a      	movs	r2, #10
 800827c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	3363      	adds	r3, #99	; 0x63
 8008284:	2210      	movs	r2, #16
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f004 fdb9 	bl	800ce00 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	2225      	movs	r2, #37	; 0x25
 8008292:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2202      	movs	r2, #2
 80082a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f103 0210 	add.w	r2, r3, #16
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80082b2:	2301      	movs	r3, #1
 80082b4:	75fb      	strb	r3, [r7, #23]
      break;
 80082b6:	e038      	b.n	800832a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	4619      	mov	r1, r3
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f7ff fd3d 	bl	8007d3c <USBH_MSC_BOT_Process>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d12d      	bne.n	8008328 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d2:	3303      	adds	r3, #3
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082de:	3302      	adds	r3, #2
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ec:	3301      	adds	r3, #1
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80082f2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	061b      	lsls	r3, r3, #24
 80082fe:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830a:	3307      	adds	r3, #7
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b29a      	uxth	r2, r3
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008316:	3306      	adds	r3, #6
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	b29b      	uxth	r3, r3
 8008320:	4313      	orrs	r3, r2
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	809a      	strh	r2, [r3, #4]
      break;
 8008328:	bf00      	nop
  }

  return error;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	460b      	mov	r3, r1
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008342:	2302      	movs	r3, #2
 8008344:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008356:	2b01      	cmp	r3, #1
 8008358:	d002      	beq.n	8008360 <USBH_MSC_SCSI_Inquiry+0x2c>
 800835a:	2b02      	cmp	r3, #2
 800835c:	d03d      	beq.n	80083da <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800835e:	e089      	b.n	8008474 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2224      	movs	r2, #36	; 0x24
 8008364:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2280      	movs	r2, #128	; 0x80
 800836a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	220a      	movs	r2, #10
 8008372:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3363      	adds	r3, #99	; 0x63
 800837a:	220a      	movs	r2, #10
 800837c:	2100      	movs	r1, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f004 fd3e 	bl	800ce00 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2212      	movs	r2, #18
 8008388:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	015b      	lsls	r3, r3, #5
 8008390:	b2da      	uxtb	r2, r3
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2224      	movs	r2, #36	; 0x24
 80083ac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f103 0210 	add.w	r2, r3, #16
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80083d4:	2301      	movs	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
      break;
 80083d8:	e04c      	b.n	8008474 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	4619      	mov	r1, r3
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fcac 	bl	8007d3c <USBH_MSC_BOT_Process>
 80083e4:	4603      	mov	r3, r0
 80083e6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d141      	bne.n	8008472 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80083ee:	2222      	movs	r2, #34	; 0x22
 80083f0:	2100      	movs	r1, #0
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f004 fd04 	bl	800ce00 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	b2da      	uxtb	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	b2da      	uxtb	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008420:	3301      	adds	r3, #1
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b25b      	sxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	da03      	bge.n	8008432 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	709a      	strb	r2, [r3, #2]
 8008430:	e002      	b.n	8008438 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	1cd8      	adds	r0, r3, #3
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008442:	3308      	adds	r3, #8
 8008444:	2208      	movs	r2, #8
 8008446:	4619      	mov	r1, r3
 8008448:	f004 fccc 	bl	800cde4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f103 000c 	add.w	r0, r3, #12
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008458:	3310      	adds	r3, #16
 800845a:	2210      	movs	r2, #16
 800845c:	4619      	mov	r1, r3
 800845e:	f004 fcc1 	bl	800cde4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	331d      	adds	r3, #29
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800846c:	3220      	adds	r2, #32
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	601a      	str	r2, [r3, #0]
      break;
 8008472:	bf00      	nop
  }

  return error;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b086      	sub	sp, #24
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	460b      	mov	r3, r1
 8008488:	607a      	str	r2, [r7, #4]
 800848a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800848c:	2302      	movs	r3, #2
 800848e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d002      	beq.n	80084aa <USBH_MSC_SCSI_RequestSense+0x2c>
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d03d      	beq.n	8008524 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80084a8:	e05d      	b.n	8008566 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	220e      	movs	r2, #14
 80084ae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2280      	movs	r2, #128	; 0x80
 80084b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	220a      	movs	r2, #10
 80084bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3363      	adds	r3, #99	; 0x63
 80084c4:	2210      	movs	r2, #16
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f004 fc99 	bl	800ce00 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2203      	movs	r2, #3
 80084d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80084d6:	7afb      	ldrb	r3, [r7, #11]
 80084d8:	015b      	lsls	r3, r3, #5
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	220e      	movs	r2, #14
 80084f6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2202      	movs	r2, #2
 800850e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f103 0210 	add.w	r2, r3, #16
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800851e:	2301      	movs	r3, #1
 8008520:	75fb      	strb	r3, [r7, #23]
      break;
 8008522:	e020      	b.n	8008566 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff fc07 	bl	8007d3c <USBH_MSC_BOT_Process>
 800852e:	4603      	mov	r3, r0
 8008530:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d115      	bne.n	8008564 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800853e:	3302      	adds	r3, #2
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	b2da      	uxtb	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008552:	7b1a      	ldrb	r2, [r3, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855e:	7b5a      	ldrb	r2, [r3, #13]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	709a      	strb	r2, [r3, #2]
      break;
 8008564:	bf00      	nop
  }

  return error;
 8008566:	7dfb      	ldrb	r3, [r7, #23]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	607a      	str	r2, [r7, #4]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	460b      	mov	r3, r1
 800857e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008580:	2302      	movs	r3, #2
 8008582:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008594:	2b01      	cmp	r3, #1
 8008596:	d002      	beq.n	800859e <USBH_MSC_SCSI_Write+0x2e>
 8008598:	2b02      	cmp	r3, #2
 800859a:	d047      	beq.n	800862c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800859c:	e04e      	b.n	800863c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80085a4:	461a      	mov	r2, r3
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	fb03 f202 	mul.w	r2, r3, r2
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	220a      	movs	r2, #10
 80085bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3363      	adds	r3, #99	; 0x63
 80085c4:	2210      	movs	r2, #16
 80085c6:	2100      	movs	r1, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f004 fc19 	bl	800ce00 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	222a      	movs	r2, #42	; 0x2a
 80085d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80085d6:	79fa      	ldrb	r2, [r7, #7]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80085de:	79ba      	ldrb	r2, [r7, #6]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80085e6:	797a      	ldrb	r2, [r7, #5]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80085ee:	1d3b      	adds	r3, r7, #4
 80085f0:	781a      	ldrb	r2, [r3, #0]
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80085f8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008602:	f107 0320 	add.w	r3, r7, #32
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2202      	movs	r2, #2
 800861a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008626:	2301      	movs	r3, #1
 8008628:	75fb      	strb	r3, [r7, #23]
      break;
 800862a:	e007      	b.n	800863c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800862c:	7afb      	ldrb	r3, [r7, #11]
 800862e:	4619      	mov	r1, r3
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff fb83 	bl	8007d3c <USBH_MSC_BOT_Process>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]
      break;
 800863a:	bf00      	nop
  }

  return error;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	460b      	mov	r3, r1
 8008654:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008656:	2302      	movs	r3, #2
 8008658:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800866a:	2b01      	cmp	r3, #1
 800866c:	d002      	beq.n	8008674 <USBH_MSC_SCSI_Read+0x2e>
 800866e:	2b02      	cmp	r3, #2
 8008670:	d047      	beq.n	8008702 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008672:	e04e      	b.n	8008712 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800867a:	461a      	mov	r2, r3
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	fb03 f202 	mul.w	r2, r3, r2
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	2280      	movs	r2, #128	; 0x80
 800868a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	220a      	movs	r2, #10
 8008692:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	3363      	adds	r3, #99	; 0x63
 800869a:	2210      	movs	r2, #16
 800869c:	2100      	movs	r1, #0
 800869e:	4618      	mov	r0, r3
 80086a0:	f004 fbae 	bl	800ce00 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2228      	movs	r2, #40	; 0x28
 80086a8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80086ac:	79fa      	ldrb	r2, [r7, #7]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80086b4:	79ba      	ldrb	r2, [r7, #6]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80086bc:	797a      	ldrb	r2, [r7, #5]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80086ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80086d8:	f107 0320 	add.w	r3, r7, #32
 80086dc:	781a      	ldrb	r2, [r3, #0]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e007      	b.n	8008712 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	4619      	mov	r1, r3
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff fb18 	bl	8007d3c <USBH_MSC_BOT_Process>
 800870c:	4603      	mov	r3, r0
 800870e:	75fb      	strb	r3, [r7, #23]
      break;
 8008710:	bf00      	nop
  }

  return error;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008730:	2302      	movs	r3, #2
 8008732:	e029      	b.n	8008788 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	79fa      	ldrb	r2, [r7, #7]
 8008738:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f81f 	bl	8008790 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f004 f8cb 	bl	800c91c <USBH_LL_Init>

  return USBH_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	e009      	b.n	80087b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	33e0      	adds	r3, #224	; 0xe0
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	2200      	movs	r2, #0
 80087ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b0e      	cmp	r3, #14
 80087ba:	d9f2      	bls.n	80087a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e009      	b.n	80087d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087cc:	2200      	movs	r2, #0
 80087ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087dc:	d3f1      	bcc.n	80087c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2240      	movs	r2, #64	; 0x40
 8008802:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d016      	beq.n	800887a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10e      	bne.n	8008874 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800885c:	1c59      	adds	r1, r3, #1
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	33de      	adds	r3, #222	; 0xde
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
 8008872:	e004      	b.n	800887e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008874:	2302      	movs	r3, #2
 8008876:	73fb      	strb	r3, [r7, #15]
 8008878:	e001      	b.n	800887e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800887a:	2302      	movs	r3, #2
 800887c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d204      	bcs.n	80088b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80088b0:	e001      	b.n	80088b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80088b2:	2302      	movs	r3, #2
 80088b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	4608      	mov	r0, r1
 80088ce:	4611      	mov	r1, r2
 80088d0:	461a      	mov	r2, r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	70fb      	strb	r3, [r7, #3]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70bb      	strb	r3, [r7, #2]
 80088da:	4613      	mov	r3, r2
 80088dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80088ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088ee:	e025      	b.n	800893c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	221a      	movs	r2, #26
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	3308      	adds	r3, #8
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	3302      	adds	r3, #2
 8008900:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	795b      	ldrb	r3, [r3, #5]
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	429a      	cmp	r2, r3
 800890a:	d002      	beq.n	8008912 <USBH_FindInterface+0x4e>
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	2bff      	cmp	r3, #255	; 0xff
 8008910:	d111      	bne.n	8008936 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008916:	78ba      	ldrb	r2, [r7, #2]
 8008918:	429a      	cmp	r2, r3
 800891a:	d002      	beq.n	8008922 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800891c:	78bb      	ldrb	r3, [r7, #2]
 800891e:	2bff      	cmp	r3, #255	; 0xff
 8008920:	d109      	bne.n	8008936 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008926:	787a      	ldrb	r2, [r7, #1]
 8008928:	429a      	cmp	r2, r3
 800892a:	d002      	beq.n	8008932 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800892c:	787b      	ldrb	r3, [r7, #1]
 800892e:	2bff      	cmp	r3, #255	; 0xff
 8008930:	d101      	bne.n	8008936 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	e006      	b.n	8008944 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	3301      	adds	r3, #1
 800893a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d9d6      	bls.n	80088f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008942:	23ff      	movs	r3, #255	; 0xff
}
 8008944:	4618      	mov	r0, r3
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f004 f81b 	bl	800c994 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800895e:	2101      	movs	r1, #1
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f004 f934 	bl	800cbce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af04      	add	r7, sp, #16
 8008976:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008978:	2302      	movs	r3, #2
 800897a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d102      	bne.n	8008992 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2203      	movs	r2, #3
 8008990:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b0b      	cmp	r3, #11
 800899a:	f200 81b3 	bhi.w	8008d04 <USBH_Process+0x394>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <USBH_Process+0x34>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	080089d5 	.word	0x080089d5
 80089a8:	08008a07 	.word	0x08008a07
 80089ac:	08008a6f 	.word	0x08008a6f
 80089b0:	08008c9f 	.word	0x08008c9f
 80089b4:	08008d05 	.word	0x08008d05
 80089b8:	08008b13 	.word	0x08008b13
 80089bc:	08008c45 	.word	0x08008c45
 80089c0:	08008b49 	.word	0x08008b49
 80089c4:	08008b69 	.word	0x08008b69
 80089c8:	08008b89 	.word	0x08008b89
 80089cc:	08008bb7 	.word	0x08008bb7
 80089d0:	08008c87 	.word	0x08008c87
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 8193 	beq.w	8008d08 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80089e8:	20c8      	movs	r0, #200	; 0xc8
 80089ea:	f004 f96d 	bl	800ccc8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f004 f82d 	bl	800ca4e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008a04:	e180      	b.n	8008d08 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d107      	bne.n	8008a20 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a1e:	e182      	b.n	8008d26 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a2a:	d914      	bls.n	8008a56 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a32:	3301      	adds	r3, #1
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d903      	bls.n	8008a4e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	220d      	movs	r2, #13
 8008a4a:	701a      	strb	r2, [r3, #0]
      break;
 8008a4c:	e16b      	b.n	8008d26 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
      break;
 8008a54:	e167      	b.n	8008d26 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a5c:	f103 020a 	add.w	r2, r3, #10
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008a66:	200a      	movs	r0, #10
 8008a68:	f004 f92e 	bl	800ccc8 <USBH_Delay>
      break;
 8008a6c:	e15b      	b.n	8008d26 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a7e:	2104      	movs	r1, #4
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008a84:	2064      	movs	r0, #100	; 0x64
 8008a86:	f004 f91f 	bl	800ccc8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f003 ffb8 	bl	800ca00 <USBH_LL_GetSpeed>
 8008a90:	4603      	mov	r3, r0
 8008a92:	461a      	mov	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2205      	movs	r2, #5
 8008a9e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 f92f 	bl	8009d06 <USBH_AllocPipe>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	461a      	mov	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ab0:	2180      	movs	r1, #128	; 0x80
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f001 f927 	bl	8009d06 <USBH_AllocPipe>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	461a      	mov	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	7919      	ldrb	r1, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ad4:	b292      	uxth	r2, r2
 8008ad6:	9202      	str	r2, [sp, #8]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	9201      	str	r2, [sp, #4]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2280      	movs	r2, #128	; 0x80
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f8e0 	bl	8009ca8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7959      	ldrb	r1, [r3, #5]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008afc:	b292      	uxth	r2, r2
 8008afe:	9202      	str	r2, [sp, #8]
 8008b00:	2200      	movs	r2, #0
 8008b02:	9201      	str	r2, [sp, #4]
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	4603      	mov	r3, r0
 8008b08:	2200      	movs	r2, #0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 f8cc 	bl	8009ca8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b10:	e109      	b.n	8008d26 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f90c 	bl	8008d30 <USBH_HandleEnum>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f040 80f3 	bne.w	8008d0c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d103      	bne.n	8008b40 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2208      	movs	r2, #8
 8008b3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b3e:	e0e5      	b.n	8008d0c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2207      	movs	r2, #7
 8008b44:	701a      	strb	r2, [r3, #0]
      break;
 8008b46:	e0e1      	b.n	8008d0c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f000 80de 	beq.w	8008d10 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2208      	movs	r2, #8
 8008b64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008b66:	e0d3      	b.n	8008d10 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fc20 	bl	80093b8 <USBH_SetCfg>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f040 80ca 	bne.w	8008d14 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2209      	movs	r2, #9
 8008b84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b86:	e0c5      	b.n	8008d14 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00b      	beq.n	8008bae <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008b96:	2101      	movs	r1, #1
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc30 	bl	80093fe <USBH_SetFeature>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f040 80b9 	bne.w	8008d18 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	220a      	movs	r2, #10
 8008baa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008bac:	e0b4      	b.n	8008d18 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	220a      	movs	r2, #10
 8008bb2:	701a      	strb	r2, [r3, #0]
      break;
 8008bb4:	e0b0      	b.n	8008d18 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80ad 	beq.w	8008d1c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	e016      	b.n	8008bfe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008bd0:	7bfa      	ldrb	r2, [r7, #15]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32de      	adds	r2, #222	; 0xde
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	791a      	ldrb	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d108      	bne.n	8008bf8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008be6:	7bfa      	ldrb	r2, [r7, #15]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	32de      	adds	r2, #222	; 0xde
 8008bec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008bf6:	e005      	b.n	8008c04 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	73fb      	strb	r3, [r7, #15]
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0e5      	beq.n	8008bd0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d016      	beq.n	8008c3c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2206      	movs	r2, #6
 8008c24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c2c:	2103      	movs	r1, #3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c32:	e073      	b.n	8008d1c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	220d      	movs	r2, #13
 8008c38:	701a      	strb	r2, [r3, #0]
      break;
 8008c3a:	e06f      	b.n	8008d1c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	220d      	movs	r2, #13
 8008c40:	701a      	strb	r2, [r3, #0]
      break;
 8008c42:	e06b      	b.n	8008d1c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d017      	beq.n	8008c7e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4798      	blx	r3
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d103      	bne.n	8008c6e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	220b      	movs	r2, #11
 8008c6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c6c:	e058      	b.n	8008d20 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d154      	bne.n	8008d20 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	220d      	movs	r2, #13
 8008c7a:	701a      	strb	r2, [r3, #0]
      break;
 8008c7c:	e050      	b.n	8008d20 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	220d      	movs	r2, #13
 8008c82:	701a      	strb	r2, [r3, #0]
      break;
 8008c84:	e04c      	b.n	8008d20 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d049      	beq.n	8008d24 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	4798      	blx	r3
      }
      break;
 8008c9c:	e042      	b.n	8008d24 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff fd72 	bl	8008790 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cda:	2105      	movs	r1, #5
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d107      	bne.n	8008cfc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff fe2b 	bl	8008950 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008cfa:	e014      	b.n	8008d26 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f003 fe49 	bl	800c994 <USBH_LL_Start>
      break;
 8008d02:	e010      	b.n	8008d26 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008d04:	bf00      	nop
 8008d06:	e00e      	b.n	8008d26 <USBH_Process+0x3b6>
      break;
 8008d08:	bf00      	nop
 8008d0a:	e00c      	b.n	8008d26 <USBH_Process+0x3b6>
      break;
 8008d0c:	bf00      	nop
 8008d0e:	e00a      	b.n	8008d26 <USBH_Process+0x3b6>
    break;
 8008d10:	bf00      	nop
 8008d12:	e008      	b.n	8008d26 <USBH_Process+0x3b6>
      break;
 8008d14:	bf00      	nop
 8008d16:	e006      	b.n	8008d26 <USBH_Process+0x3b6>
      break;
 8008d18:	bf00      	nop
 8008d1a:	e004      	b.n	8008d26 <USBH_Process+0x3b6>
      break;
 8008d1c:	bf00      	nop
 8008d1e:	e002      	b.n	8008d26 <USBH_Process+0x3b6>
      break;
 8008d20:	bf00      	nop
 8008d22:	e000      	b.n	8008d26 <USBH_Process+0x3b6>
      break;
 8008d24:	bf00      	nop
  }
  return USBH_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b07      	cmp	r3, #7
 8008d46:	f200 81c1 	bhi.w	80090cc <USBH_HandleEnum+0x39c>
 8008d4a:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <USBH_HandleEnum+0x20>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008d71 	.word	0x08008d71
 8008d54:	08008e2f 	.word	0x08008e2f
 8008d58:	08008e99 	.word	0x08008e99
 8008d5c:	08008f27 	.word	0x08008f27
 8008d60:	08008f91 	.word	0x08008f91
 8008d64:	08009001 	.word	0x08009001
 8008d68:	08009047 	.word	0x08009047
 8008d6c:	0800908d 	.word	0x0800908d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008d70:	2108      	movs	r1, #8
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa50 	bl	8009218 <USBH_Get_DevDesc>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d130      	bne.n	8008de4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7919      	ldrb	r1, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008da6:	b292      	uxth	r2, r2
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	2200      	movs	r2, #0
 8008dac:	9201      	str	r2, [sp, #4]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	4603      	mov	r3, r0
 8008db2:	2280      	movs	r2, #128	; 0x80
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 ff77 	bl	8009ca8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7959      	ldrb	r1, [r3, #5]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dce:	b292      	uxth	r2, r2
 8008dd0:	9202      	str	r2, [sp, #8]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	9201      	str	r2, [sp, #4]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2200      	movs	r2, #0
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 ff63 	bl	8009ca8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008de2:	e175      	b.n	80090d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	f040 8172 	bne.w	80090d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008df2:	3301      	adds	r3, #1
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d903      	bls.n	8008e0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	220d      	movs	r2, #13
 8008e0a:	701a      	strb	r2, [r3, #0]
      break;
 8008e0c:	e160      	b.n	80090d0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	795b      	ldrb	r3, [r3, #5]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 ff97 	bl	8009d48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	791b      	ldrb	r3, [r3, #4]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 ff91 	bl	8009d48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
      break;
 8008e2c:	e150      	b.n	80090d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008e2e:	2112      	movs	r1, #18
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f9f1 	bl	8009218 <USBH_Get_DevDesc>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d103      	bne.n	8008e48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e46:	e145      	b.n	80090d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	f040 8142 	bne.w	80090d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e56:	3301      	adds	r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d903      	bls.n	8008e72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	220d      	movs	r2, #13
 8008e6e:	701a      	strb	r2, [r3, #0]
      break;
 8008e70:	e130      	b.n	80090d4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	795b      	ldrb	r3, [r3, #5]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 ff65 	bl	8009d48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	791b      	ldrb	r3, [r3, #4]
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 ff5f 	bl	8009d48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
      break;
 8008e96:	e11d      	b.n	80090d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008e98:	2101      	movs	r1, #1
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa68 	bl	8009370 <USBH_SetAddress>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d132      	bne.n	8008f10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008eaa:	2002      	movs	r0, #2
 8008eac:	f003 ff0c 	bl	800ccc8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	7919      	ldrb	r1, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ed2:	b292      	uxth	r2, r2
 8008ed4:	9202      	str	r2, [sp, #8]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	9201      	str	r2, [sp, #4]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	4603      	mov	r3, r0
 8008ede:	2280      	movs	r2, #128	; 0x80
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fee1 	bl	8009ca8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7959      	ldrb	r1, [r3, #5]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008efa:	b292      	uxth	r2, r2
 8008efc:	9202      	str	r2, [sp, #8]
 8008efe:	2200      	movs	r2, #0
 8008f00:	9201      	str	r2, [sp, #4]
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	4603      	mov	r3, r0
 8008f06:	2200      	movs	r2, #0
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fecd 	bl	8009ca8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f0e:	e0e3      	b.n	80090d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	f040 80e0 	bne.w	80090d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	220d      	movs	r2, #13
 8008f1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	705a      	strb	r2, [r3, #1]
      break;
 8008f24:	e0d8      	b.n	80090d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008f26:	2109      	movs	r1, #9
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f99d 	bl	8009268 <USBH_Get_CfgDesc>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d103      	bne.n	8008f40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f3e:	e0cd      	b.n	80090dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	f040 80ca 	bne.w	80090dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f4e:	3301      	adds	r3, #1
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d903      	bls.n	8008f6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	220d      	movs	r2, #13
 8008f66:	701a      	strb	r2, [r3, #0]
      break;
 8008f68:	e0b8      	b.n	80090dc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	795b      	ldrb	r3, [r3, #5]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fee9 	bl	8009d48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	791b      	ldrb	r3, [r3, #4]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fee3 	bl	8009d48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
      break;
 8008f8e:	e0a5      	b.n	80090dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f965 	bl	8009268 <USBH_Get_CfgDesc>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2205      	movs	r2, #5
 8008fac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fae:	e097      	b.n	80090e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	f040 8094 	bne.w	80090e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d903      	bls.n	8008fda <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	220d      	movs	r2, #13
 8008fd6:	701a      	strb	r2, [r3, #0]
      break;
 8008fd8:	e082      	b.n	80090e0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	795b      	ldrb	r3, [r3, #5]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 feb1 	bl	8009d48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	791b      	ldrb	r3, [r3, #4]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 feab 	bl	8009d48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
      break;
 8008ffe:	e06f      	b.n	80090e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009006:	2b00      	cmp	r3, #0
 8009008:	d019      	beq.n	800903e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009016:	23ff      	movs	r3, #255	; 0xff
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f949 	bl	80092b0 <USBH_Get_StringDesc>
 800901e:	4603      	mov	r3, r0
 8009020:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2206      	movs	r2, #6
 800902c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800902e:	e059      	b.n	80090e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d156      	bne.n	80090e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2206      	movs	r2, #6
 800903a:	705a      	strb	r2, [r3, #1]
      break;
 800903c:	e052      	b.n	80090e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2206      	movs	r2, #6
 8009042:	705a      	strb	r2, [r3, #1]
      break;
 8009044:	e04e      	b.n	80090e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800904c:	2b00      	cmp	r3, #0
 800904e:	d019      	beq.n	8009084 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800905c:	23ff      	movs	r3, #255	; 0xff
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f926 	bl	80092b0 <USBH_Get_StringDesc>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d103      	bne.n	8009076 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2207      	movs	r2, #7
 8009072:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009074:	e038      	b.n	80090e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b03      	cmp	r3, #3
 800907a:	d135      	bne.n	80090e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2207      	movs	r2, #7
 8009080:	705a      	strb	r2, [r3, #1]
      break;
 8009082:	e031      	b.n	80090e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2207      	movs	r2, #7
 8009088:	705a      	strb	r2, [r3, #1]
      break;
 800908a:	e02d      	b.n	80090e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009092:	2b00      	cmp	r3, #0
 8009094:	d017      	beq.n	80090c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80090a2:	23ff      	movs	r3, #255	; 0xff
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f903 	bl	80092b0 <USBH_Get_StringDesc>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80090b8:	e018      	b.n	80090ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d115      	bne.n	80090ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
      break;
 80090c4:	e012      	b.n	80090ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ca:	e00f      	b.n	80090ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 80090cc:	bf00      	nop
 80090ce:	e00e      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090d0:	bf00      	nop
 80090d2:	e00c      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090d4:	bf00      	nop
 80090d6:	e00a      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090d8:	bf00      	nop
 80090da:	e008      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090dc:	bf00      	nop
 80090de:	e006      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090e0:	bf00      	nop
 80090e2:	e004      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090e4:	bf00      	nop
 80090e6:	e002      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090e8:	bf00      	nop
 80090ea:	e000      	b.n	80090ee <USBH_HandleEnum+0x3be>
      break;
 80090ec:	bf00      	nop
  }
  return Status;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f804 	bl	800913a <USBH_HandleSof>
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b0b      	cmp	r3, #11
 800914a:	d10a      	bne.n	8009162 <USBH_HandleSof+0x28>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
  }
}
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800917a:	bf00      	nop
}
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009196:	bf00      	nop
}
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f003 fbea 	bl	800c9ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	791b      	ldrb	r3, [r3, #4]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fda3 	bl	8009d48 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	795b      	ldrb	r3, [r3, #5]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fd9d 	bl	8009d48 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af02      	add	r7, sp, #8
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	b29b      	uxth	r3, r3
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4613      	mov	r3, r2
 8009232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009236:	2100      	movs	r1, #0
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f864 	bl	8009306 <USBH_GetDescriptor>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	b292      	uxth	r2, r2
 8009258:	4619      	mov	r1, r3
 800925a:	f000 f918 	bl	800948e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af02      	add	r7, sp, #8
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	331c      	adds	r3, #28
 8009278:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800927a:	887b      	ldrh	r3, [r7, #2]
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009284:	2100      	movs	r1, #0
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f83d 	bl	8009306 <USBH_GetDescriptor>
 800928c:	4603      	mov	r3, r0
 800928e:	72fb      	strb	r3, [r7, #11]
 8009290:	7afb      	ldrb	r3, [r7, #11]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d107      	bne.n	80092a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800929c:	887a      	ldrh	r2, [r7, #2]
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f964 	bl	800956e <USBH_ParseCfgDesc>
  }

  return status;
 80092a6:	7afb      	ldrb	r3, [r7, #11]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	461a      	mov	r2, r3
 80092bc:	460b      	mov	r3, r1
 80092be:	72fb      	strb	r3, [r7, #11]
 80092c0:	4613      	mov	r3, r2
 80092c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80092cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80092d4:	893b      	ldrh	r3, [r7, #8]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	460b      	mov	r3, r1
 80092da:	2100      	movs	r1, #0
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 f812 	bl	8009306 <USBH_GetDescriptor>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75fb      	strb	r3, [r7, #23]
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d107      	bne.n	80092fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80092f2:	893a      	ldrh	r2, [r7, #8]
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fa37 	bl	800976a <USBH_ParseStringDesc>
  }

  return status;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	60f8      	str	r0, [r7, #12]
 800930e:	607b      	str	r3, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	72fb      	strb	r3, [r7, #11]
 8009314:	4613      	mov	r3, r2
 8009316:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	789b      	ldrb	r3, [r3, #2]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d11c      	bne.n	800935a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009326:	b2da      	uxtb	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2206      	movs	r2, #6
 8009330:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	893a      	ldrh	r2, [r7, #8]
 8009336:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009338:	893b      	ldrh	r3, [r7, #8]
 800933a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800933e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009342:	d104      	bne.n	800934e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f240 4209 	movw	r2, #1033	; 0x409
 800934a:	829a      	strh	r2, [r3, #20]
 800934c:	e002      	b.n	8009354 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	8b3a      	ldrh	r2, [r7, #24]
 8009358:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800935a:	8b3b      	ldrh	r3, [r7, #24]
 800935c:	461a      	mov	r2, r3
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fa50 	bl	8009806 <USBH_CtlReq>
 8009366:	4603      	mov	r3, r0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	789b      	ldrb	r3, [r3, #2]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d10f      	bne.n	80093a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2205      	movs	r2, #5
 800938e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80093a4:	2200      	movs	r2, #0
 80093a6:	2100      	movs	r1, #0
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa2c 	bl	8009806 <USBH_CtlReq>
 80093ae:	4603      	mov	r3, r0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	789b      	ldrb	r3, [r3, #2]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d10e      	bne.n	80093ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2209      	movs	r2, #9
 80093d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	887a      	ldrh	r2, [r7, #2]
 80093dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80093ea:	2200      	movs	r2, #0
 80093ec:	2100      	movs	r1, #0
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa09 	bl	8009806 <USBH_CtlReq>
 80093f4:	4603      	mov	r3, r0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	789b      	ldrb	r3, [r3, #2]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d10f      	bne.n	8009432 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2203      	movs	r2, #3
 800941c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800941e:	78fb      	ldrb	r3, [r7, #3]
 8009420:	b29a      	uxth	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f9e5 	bl	8009806 <USBH_CtlReq>
 800943c:	4603      	mov	r3, r0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	789b      	ldrb	r3, [r3, #2]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d10f      	bne.n	800947a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2202      	movs	r2, #2
 800945e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800947a:	2200      	movs	r2, #0
 800947c:	2100      	movs	r1, #0
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9c1 	bl	8009806 <USBH_CtlReq>
 8009484:	4603      	mov	r3, r0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	785a      	ldrb	r2, [r3, #1]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	3302      	adds	r3, #2
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	3303      	adds	r3, #3
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	b29b      	uxth	r3, r3
 80094c0:	4313      	orrs	r3, r2
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	791a      	ldrb	r2, [r3, #4]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	795a      	ldrb	r2, [r3, #5]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	799a      	ldrb	r2, [r3, #6]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	79da      	ldrb	r2, [r3, #7]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80094e8:	88fb      	ldrh	r3, [r7, #6]
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	d939      	bls.n	8009562 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	3308      	adds	r3, #8
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	3309      	adds	r3, #9
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	b29b      	uxth	r3, r3
 8009502:	4313      	orrs	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	330a      	adds	r3, #10
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	b29a      	uxth	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	330b      	adds	r3, #11
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	b29b      	uxth	r3, r3
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	b29b      	uxth	r3, r3
 800951e:	4313      	orrs	r3, r2
 8009520:	b29a      	uxth	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	330c      	adds	r3, #12
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	b29a      	uxth	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	330d      	adds	r3, #13
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	b29b      	uxth	r3, r3
 800953a:	4313      	orrs	r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	7b9a      	ldrb	r2, [r3, #14]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	7bda      	ldrb	r2, [r3, #15]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	7c1a      	ldrb	r2, [r3, #16]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	7c5a      	ldrb	r2, [r3, #17]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	745a      	strb	r2, [r3, #17]
  }
}
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b08a      	sub	sp, #40	; 0x28
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	4613      	mov	r3, r2
 800957a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	781a      	ldrb	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	785a      	ldrb	r2, [r3, #1]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	3302      	adds	r3, #2
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	3303      	adds	r3, #3
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	791a      	ldrb	r2, [r3, #4]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	795a      	ldrb	r2, [r3, #5]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	799a      	ldrb	r2, [r3, #6]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	79da      	ldrb	r2, [r3, #7]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	7a1a      	ldrb	r2, [r3, #8]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80095e4:	88fb      	ldrh	r3, [r7, #6]
 80095e6:	2b09      	cmp	r3, #9
 80095e8:	d95f      	bls.n	80096aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80095ea:	2309      	movs	r3, #9
 80095ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80095f2:	e051      	b.n	8009698 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095f4:	f107 0316 	add.w	r3, r7, #22
 80095f8:	4619      	mov	r1, r3
 80095fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095fc:	f000 f8e8 	bl	80097d0 <USBH_GetNextDesc>
 8009600:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b04      	cmp	r3, #4
 8009608:	d146      	bne.n	8009698 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800960a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800960e:	221a      	movs	r2, #26
 8009610:	fb02 f303 	mul.w	r3, r2, r3
 8009614:	3308      	adds	r3, #8
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	3302      	adds	r3, #2
 800961c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800961e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009620:	69f8      	ldr	r0, [r7, #28]
 8009622:	f000 f846 	bl	80096b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800962c:	2300      	movs	r3, #0
 800962e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009630:	e022      	b.n	8009678 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009632:	f107 0316 	add.w	r3, r7, #22
 8009636:	4619      	mov	r1, r3
 8009638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800963a:	f000 f8c9 	bl	80097d0 <USBH_GetNextDesc>
 800963e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	2b05      	cmp	r3, #5
 8009646:	d117      	bne.n	8009678 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800964c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009650:	3201      	adds	r2, #1
 8009652:	00d2      	lsls	r2, r2, #3
 8009654:	211a      	movs	r1, #26
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	4413      	add	r3, r2
 800965c:	3308      	adds	r3, #8
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	3304      	adds	r3, #4
 8009664:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009668:	69b8      	ldr	r0, [r7, #24]
 800966a:	f000 f851 	bl	8009710 <USBH_ParseEPDesc>
            ep_ix++;
 800966e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009672:	3301      	adds	r3, #1
 8009674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	791b      	ldrb	r3, [r3, #4]
 800967c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009680:	429a      	cmp	r2, r3
 8009682:	d204      	bcs.n	800968e <USBH_ParseCfgDesc+0x120>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	885a      	ldrh	r2, [r3, #2]
 8009688:	8afb      	ldrh	r3, [r7, #22]
 800968a:	429a      	cmp	r2, r3
 800968c:	d8d1      	bhi.n	8009632 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800968e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009692:	3301      	adds	r3, #1
 8009694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800969c:	2b01      	cmp	r3, #1
 800969e:	d804      	bhi.n	80096aa <USBH_ParseCfgDesc+0x13c>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	885a      	ldrh	r2, [r3, #2]
 80096a4:	8afb      	ldrh	r3, [r7, #22]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d8a4      	bhi.n	80095f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80096aa:	bf00      	nop
 80096ac:	3728      	adds	r7, #40	; 0x28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781a      	ldrb	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	785a      	ldrb	r2, [r3, #1]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	789a      	ldrb	r2, [r3, #2]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	78da      	ldrb	r2, [r3, #3]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	791a      	ldrb	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	795a      	ldrb	r2, [r3, #5]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	799a      	ldrb	r2, [r3, #6]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	79da      	ldrb	r2, [r3, #7]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	7a1a      	ldrb	r2, [r3, #8]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	721a      	strb	r2, [r3, #8]
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781a      	ldrb	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	785a      	ldrb	r2, [r3, #1]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	789a      	ldrb	r2, [r3, #2]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	78da      	ldrb	r2, [r3, #3]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	3304      	adds	r3, #4
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b29a      	uxth	r2, r3
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	3305      	adds	r3, #5
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	799a      	ldrb	r2, [r3, #6]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	719a      	strb	r2, [r3, #6]
}
 800975e:	bf00      	nop
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800976a:	b480      	push	{r7}
 800976c:	b087      	sub	sp, #28
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	4613      	mov	r3, r2
 8009776:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3301      	adds	r3, #1
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d120      	bne.n	80097c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	1e9a      	subs	r2, r3, #2
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	4293      	cmp	r3, r2
 800978c:	bf28      	it	cs
 800978e:	4613      	movcs	r3, r2
 8009790:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3302      	adds	r3, #2
 8009796:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009798:	2300      	movs	r3, #0
 800979a:	82fb      	strh	r3, [r7, #22]
 800979c:	e00b      	b.n	80097b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800979e:	8afb      	ldrh	r3, [r7, #22]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	3301      	adds	r3, #1
 80097ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80097b0:	8afb      	ldrh	r3, [r7, #22]
 80097b2:	3302      	adds	r3, #2
 80097b4:	82fb      	strh	r3, [r7, #22]
 80097b6:	8afa      	ldrh	r2, [r7, #22]
 80097b8:	8abb      	ldrh	r3, [r7, #20]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d3ef      	bcc.n	800979e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2200      	movs	r2, #0
 80097c2:	701a      	strb	r2, [r3, #0]
  }
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	881a      	ldrh	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4413      	add	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097f8:	68fb      	ldr	r3, [r7, #12]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b086      	sub	sp, #24
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	4613      	mov	r3, r2
 8009812:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009814:	2301      	movs	r3, #1
 8009816:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	789b      	ldrb	r3, [r3, #2]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d002      	beq.n	8009826 <USBH_CtlReq+0x20>
 8009820:	2b02      	cmp	r3, #2
 8009822:	d00f      	beq.n	8009844 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009824:	e027      	b.n	8009876 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2202      	movs	r2, #2
 800983c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
      break;
 8009842:	e018      	b.n	8009876 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f81b 	bl	8009880 <USBH_HandleControl>
 800984a:	4603      	mov	r3, r0
 800984c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <USBH_CtlReq+0x54>
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	2b03      	cmp	r3, #3
 8009858:	d106      	bne.n	8009868 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	761a      	strb	r2, [r3, #24]
      break;
 8009866:	e005      	b.n	8009874 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d102      	bne.n	8009874 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2201      	movs	r2, #1
 8009872:	709a      	strb	r2, [r3, #2]
      break;
 8009874:	bf00      	nop
  }
  return status;
 8009876:	7dfb      	ldrb	r3, [r7, #23]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af02      	add	r7, sp, #8
 8009886:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009888:	2301      	movs	r3, #1
 800988a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800988c:	2300      	movs	r3, #0
 800988e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7e1b      	ldrb	r3, [r3, #24]
 8009894:	3b01      	subs	r3, #1
 8009896:	2b0a      	cmp	r3, #10
 8009898:	f200 8156 	bhi.w	8009b48 <USBH_HandleControl+0x2c8>
 800989c:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <USBH_HandleControl+0x24>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	080098eb 	.word	0x080098eb
 80098ac:	08009955 	.word	0x08009955
 80098b0:	0800997b 	.word	0x0800997b
 80098b4:	080099b3 	.word	0x080099b3
 80098b8:	080099dd 	.word	0x080099dd
 80098bc:	08009a2f 	.word	0x08009a2f
 80098c0:	08009a51 	.word	0x08009a51
 80098c4:	08009a8d 	.word	0x08009a8d
 80098c8:	08009ab3 	.word	0x08009ab3
 80098cc:	08009af1 	.word	0x08009af1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f103 0110 	add.w	r1, r3, #16
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	461a      	mov	r2, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f943 	bl	8009b68 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2202      	movs	r2, #2
 80098e6:	761a      	strb	r2, [r3, #24]
      break;
 80098e8:	e139      	b.n	8009b5e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	795b      	ldrb	r3, [r3, #5]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f003 f959 	bl	800cba8 <USBH_LL_GetURBState>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d11e      	bne.n	800993e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	7c1b      	ldrb	r3, [r3, #16]
 8009904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009908:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	8adb      	ldrh	r3, [r3, #22]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009912:	7b7b      	ldrb	r3, [r7, #13]
 8009914:	2b80      	cmp	r3, #128	; 0x80
 8009916:	d103      	bne.n	8009920 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2203      	movs	r2, #3
 800991c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800991e:	e115      	b.n	8009b4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2205      	movs	r2, #5
 8009924:	761a      	strb	r2, [r3, #24]
      break;
 8009926:	e111      	b.n	8009b4c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009928:	7b7b      	ldrb	r3, [r7, #13]
 800992a:	2b80      	cmp	r3, #128	; 0x80
 800992c:	d103      	bne.n	8009936 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2209      	movs	r2, #9
 8009932:	761a      	strb	r2, [r3, #24]
      break;
 8009934:	e10a      	b.n	8009b4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2207      	movs	r2, #7
 800993a:	761a      	strb	r2, [r3, #24]
      break;
 800993c:	e106      	b.n	8009b4c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d003      	beq.n	800994c <USBH_HandleControl+0xcc>
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	2b02      	cmp	r3, #2
 8009948:	f040 8100 	bne.w	8009b4c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	220b      	movs	r2, #11
 8009950:	761a      	strb	r2, [r3, #24]
      break;
 8009952:	e0fb      	b.n	8009b4c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800995a:	b29a      	uxth	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6899      	ldr	r1, [r3, #8]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	899a      	ldrh	r2, [r3, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	791b      	ldrb	r3, [r3, #4]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f93a 	bl	8009be6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2204      	movs	r2, #4
 8009976:	761a      	strb	r2, [r3, #24]
      break;
 8009978:	e0f1      	b.n	8009b5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	791b      	ldrb	r3, [r3, #4]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f003 f911 	bl	800cba8 <USBH_LL_GetURBState>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d102      	bne.n	8009996 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2209      	movs	r2, #9
 8009994:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	2b05      	cmp	r3, #5
 800999a:	d102      	bne.n	80099a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800999c:	2303      	movs	r3, #3
 800999e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80099a0:	e0d6      	b.n	8009b50 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	f040 80d3 	bne.w	8009b50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	220b      	movs	r2, #11
 80099ae:	761a      	strb	r2, [r3, #24]
      break;
 80099b0:	e0ce      	b.n	8009b50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6899      	ldr	r1, [r3, #8]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	899a      	ldrh	r2, [r3, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	795b      	ldrb	r3, [r3, #5]
 80099be:	2001      	movs	r0, #1
 80099c0:	9000      	str	r0, [sp, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f8ea 	bl	8009b9c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2206      	movs	r2, #6
 80099d8:	761a      	strb	r2, [r3, #24]
      break;
 80099da:	e0c0      	b.n	8009b5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	795b      	ldrb	r3, [r3, #5]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f003 f8e0 	bl	800cba8 <USBH_LL_GetURBState>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d103      	bne.n	80099fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2207      	movs	r2, #7
 80099f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80099f8:	e0ac      	b.n	8009b54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	2b05      	cmp	r3, #5
 80099fe:	d105      	bne.n	8009a0c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	220c      	movs	r2, #12
 8009a04:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a06:	2303      	movs	r3, #3
 8009a08:	73fb      	strb	r3, [r7, #15]
      break;
 8009a0a:	e0a3      	b.n	8009b54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d103      	bne.n	8009a1a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2205      	movs	r2, #5
 8009a16:	761a      	strb	r2, [r3, #24]
      break;
 8009a18:	e09c      	b.n	8009b54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	f040 8099 	bne.w	8009b54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	220b      	movs	r2, #11
 8009a26:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2c:	e092      	b.n	8009b54 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	791b      	ldrb	r3, [r3, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f8d5 	bl	8009be6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2208      	movs	r2, #8
 8009a4c:	761a      	strb	r2, [r3, #24]

      break;
 8009a4e:	e086      	b.n	8009b5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	791b      	ldrb	r3, [r3, #4]
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f003 f8a6 	bl	800cba8 <USBH_LL_GetURBState>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d105      	bne.n	8009a72 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	220d      	movs	r2, #13
 8009a6a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009a70:	e072      	b.n	8009b58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d103      	bne.n	8009a80 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	220b      	movs	r2, #11
 8009a7c:	761a      	strb	r2, [r3, #24]
      break;
 8009a7e:	e06b      	b.n	8009b58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	d168      	bne.n	8009b58 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009a86:	2303      	movs	r3, #3
 8009a88:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8a:	e065      	b.n	8009b58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	795b      	ldrb	r3, [r3, #5]
 8009a90:	2201      	movs	r2, #1
 8009a92:	9200      	str	r2, [sp, #0]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2100      	movs	r1, #0
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f87f 	bl	8009b9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	220a      	movs	r2, #10
 8009aae:	761a      	strb	r2, [r3, #24]
      break;
 8009ab0:	e055      	b.n	8009b5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	795b      	ldrb	r3, [r3, #5]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f003 f875 	bl	800cba8 <USBH_LL_GetURBState>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d105      	bne.n	8009ad4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	220d      	movs	r2, #13
 8009ad0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ad2:	e043      	b.n	8009b5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d103      	bne.n	8009ae2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2209      	movs	r2, #9
 8009ade:	761a      	strb	r2, [r3, #24]
      break;
 8009ae0:	e03c      	b.n	8009b5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d139      	bne.n	8009b5c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	220b      	movs	r2, #11
 8009aec:	761a      	strb	r2, [r3, #24]
      break;
 8009aee:	e035      	b.n	8009b5c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	7e5b      	ldrb	r3, [r3, #25]
 8009af4:	3301      	adds	r3, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	765a      	strb	r2, [r3, #25]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	7e5b      	ldrb	r3, [r3, #25]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d806      	bhi.n	8009b12 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b10:	e025      	b.n	8009b5e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b18:	2106      	movs	r1, #6
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	795b      	ldrb	r3, [r3, #5]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f90c 	bl	8009d48 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	791b      	ldrb	r3, [r3, #4]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f906 	bl	8009d48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b42:	2302      	movs	r3, #2
 8009b44:	73fb      	strb	r3, [r7, #15]
      break;
 8009b46:	e00a      	b.n	8009b5e <USBH_HandleControl+0x2de>

    default:
      break;
 8009b48:	bf00      	nop
 8009b4a:	e008      	b.n	8009b5e <USBH_HandleControl+0x2de>
      break;
 8009b4c:	bf00      	nop
 8009b4e:	e006      	b.n	8009b5e <USBH_HandleControl+0x2de>
      break;
 8009b50:	bf00      	nop
 8009b52:	e004      	b.n	8009b5e <USBH_HandleControl+0x2de>
      break;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <USBH_HandleControl+0x2de>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <USBH_HandleControl+0x2de>
      break;
 8009b5c:	bf00      	nop
  }

  return status;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af04      	add	r7, sp, #16
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	4613      	mov	r3, r2
 8009b74:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b76:	79f9      	ldrb	r1, [r7, #7]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	9302      	str	r3, [sp, #8]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	2300      	movs	r3, #0
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f002 ffda 	bl	800cb46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af04      	add	r7, sp, #16
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	461a      	mov	r2, r3
 8009baa:	460b      	mov	r3, r1
 8009bac:	80fb      	strh	r3, [r7, #6]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009bc0:	7979      	ldrb	r1, [r7, #5]
 8009bc2:	7e3b      	ldrb	r3, [r7, #24]
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	9302      	str	r3, [sp, #8]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	2301      	movs	r3, #1
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f002 ffb5 	bl	800cb46 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b088      	sub	sp, #32
 8009bea:	af04      	add	r7, sp, #16
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	80fb      	strh	r3, [r7, #6]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009bfc:	7979      	ldrb	r1, [r7, #5]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	9303      	str	r3, [sp, #12]
 8009c02:	88fb      	ldrh	r3, [r7, #6]
 8009c04:	9302      	str	r3, [sp, #8]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2201      	movs	r2, #1
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f002 ff97 	bl	800cb46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009c18:	2300      	movs	r3, #0

}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b088      	sub	sp, #32
 8009c26:	af04      	add	r7, sp, #16
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	461a      	mov	r2, r3
 8009c30:	460b      	mov	r3, r1
 8009c32:	80fb      	strh	r3, [r7, #6]
 8009c34:	4613      	mov	r3, r2
 8009c36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c42:	2300      	movs	r3, #0
 8009c44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009c46:	7979      	ldrb	r1, [r7, #5]
 8009c48:	7e3b      	ldrb	r3, [r7, #24]
 8009c4a:	9303      	str	r3, [sp, #12]
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	9302      	str	r3, [sp, #8]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	2301      	movs	r3, #1
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	2302      	movs	r3, #2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f002 ff72 	bl	800cb46 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4611      	mov	r1, r2
 8009c78:	461a      	mov	r2, r3
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	80fb      	strh	r3, [r7, #6]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009c82:	7979      	ldrb	r1, [r7, #5]
 8009c84:	2300      	movs	r3, #0
 8009c86:	9303      	str	r3, [sp, #12]
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	9302      	str	r3, [sp, #8]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	2301      	movs	r3, #1
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	2302      	movs	r3, #2
 8009c96:	2201      	movs	r2, #1
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f002 ff54 	bl	800cb46 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af04      	add	r7, sp, #16
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	70fb      	strb	r3, [r7, #3]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70bb      	strb	r3, [r7, #2]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cc2:	7878      	ldrb	r0, [r7, #1]
 8009cc4:	78ba      	ldrb	r2, [r7, #2]
 8009cc6:	78f9      	ldrb	r1, [r7, #3]
 8009cc8:	8b3b      	ldrh	r3, [r7, #24]
 8009cca:	9302      	str	r3, [sp, #8]
 8009ccc:	7d3b      	ldrb	r3, [r7, #20]
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	7c3b      	ldrb	r3, [r7, #16]
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f002 fee7 	bl	800caaa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009cf2:	78fb      	ldrb	r3, [r7, #3]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f002 ff06 	bl	800cb08 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f836 	bl	8009d84 <USBH_GetFreePipe>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d1c:	89fb      	ldrh	r3, [r7, #14]
 8009d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d00a      	beq.n	8009d3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009d26:	78fa      	ldrb	r2, [r7, #3]
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	f003 030f 	and.w	r3, r3, #15
 8009d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	33e0      	adds	r3, #224	; 0xe0
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d3c:	89fb      	ldrh	r3, [r7, #14]
 8009d3e:	b2db      	uxtb	r3, r3
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	2b0a      	cmp	r3, #10
 8009d58:	d80d      	bhi.n	8009d76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	33e0      	adds	r3, #224	; 0xe0
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009d6c:	6879      	ldr	r1, [r7, #4]
 8009d6e:	33e0      	adds	r3, #224	; 0xe0
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
 8009d94:	e00f      	b.n	8009db6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	33e0      	adds	r3, #224	; 0xe0
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	e007      	b.n	8009dc0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	3301      	adds	r3, #1
 8009db4:	73fb      	strb	r3, [r7, #15]
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	2b0a      	cmp	r3, #10
 8009dba:	d9ec      	bls.n	8009d96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009dd6:	79fb      	ldrb	r3, [r7, #7]
 8009dd8:	4a08      	ldr	r2, [pc, #32]	; (8009dfc <disk_status+0x30>)
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	79fa      	ldrb	r2, [r7, #7]
 8009de4:	4905      	ldr	r1, [pc, #20]	; (8009dfc <disk_status+0x30>)
 8009de6:	440a      	add	r2, r1
 8009de8:	7a12      	ldrb	r2, [r2, #8]
 8009dea:	4610      	mov	r0, r2
 8009dec:	4798      	blx	r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200000e0 	.word	0x200000e0

08009e00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009e0e:	79fb      	ldrb	r3, [r7, #7]
 8009e10:	4a0d      	ldr	r2, [pc, #52]	; (8009e48 <disk_initialize+0x48>)
 8009e12:	5cd3      	ldrb	r3, [r2, r3]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d111      	bne.n	8009e3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	4a0b      	ldr	r2, [pc, #44]	; (8009e48 <disk_initialize+0x48>)
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	4a09      	ldr	r2, [pc, #36]	; (8009e48 <disk_initialize+0x48>)
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	79fa      	ldrb	r2, [r7, #7]
 8009e2e:	4906      	ldr	r1, [pc, #24]	; (8009e48 <disk_initialize+0x48>)
 8009e30:	440a      	add	r2, r1
 8009e32:	7a12      	ldrb	r2, [r2, #8]
 8009e34:	4610      	mov	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	200000e0 	.word	0x200000e0

08009e4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e4c:	b590      	push	{r4, r7, lr}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
 8009e56:	603b      	str	r3, [r7, #0]
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	4a0a      	ldr	r2, [pc, #40]	; (8009e88 <disk_read+0x3c>)
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	689c      	ldr	r4, [r3, #8]
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	4a07      	ldr	r2, [pc, #28]	; (8009e88 <disk_read+0x3c>)
 8009e6c:	4413      	add	r3, r2
 8009e6e:	7a18      	ldrb	r0, [r3, #8]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	47a0      	blx	r4
 8009e78:	4603      	mov	r3, r0
 8009e7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd90      	pop	{r4, r7, pc}
 8009e86:	bf00      	nop
 8009e88:	200000e0 	.word	0x200000e0

08009e8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e8c:	b590      	push	{r4, r7, lr}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	603b      	str	r3, [r7, #0]
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	4a0a      	ldr	r2, [pc, #40]	; (8009ec8 <disk_write+0x3c>)
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	68dc      	ldr	r4, [r3, #12]
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	4a07      	ldr	r2, [pc, #28]	; (8009ec8 <disk_write+0x3c>)
 8009eac:	4413      	add	r3, r2
 8009eae:	7a18      	ldrb	r0, [r3, #8]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	47a0      	blx	r4
 8009eb8:	4603      	mov	r3, r0
 8009eba:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd90      	pop	{r4, r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200000e0 	.word	0x200000e0

08009ecc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	603a      	str	r2, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	4a09      	ldr	r2, [pc, #36]	; (8009f04 <disk_ioctl+0x38>)
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	79fa      	ldrb	r2, [r7, #7]
 8009eea:	4906      	ldr	r1, [pc, #24]	; (8009f04 <disk_ioctl+0x38>)
 8009eec:	440a      	add	r2, r1
 8009eee:	7a10      	ldrb	r0, [r2, #8]
 8009ef0:	79b9      	ldrb	r1, [r7, #6]
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4798      	blx	r3
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	200000e0 	.word	0x200000e0

08009f08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3301      	adds	r3, #1
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009f18:	89fb      	ldrh	r3, [r7, #14]
 8009f1a:	021b      	lsls	r3, r3, #8
 8009f1c:	b21a      	sxth	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b21b      	sxth	r3, r3
 8009f24:	4313      	orrs	r3, r2
 8009f26:	b21b      	sxth	r3, r3
 8009f28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3303      	adds	r3, #3
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	3202      	adds	r2, #2
 8009f50:	7812      	ldrb	r2, [r2, #0]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	021b      	lsls	r3, r3, #8
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	3201      	adds	r2, #1
 8009f5e:	7812      	ldrb	r2, [r2, #0]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	021b      	lsls	r3, r3, #8
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	7812      	ldrb	r2, [r2, #0]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009f70:	68fb      	ldr	r3, [r7, #12]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	460b      	mov	r3, r1
 8009f88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	887a      	ldrh	r2, [r7, #2]
 8009f92:	b2d2      	uxtb	r2, r2
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	887b      	ldrh	r3, [r7, #2]
 8009f98:	0a1b      	lsrs	r3, r3, #8
 8009f9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	607a      	str	r2, [r7, #4]
 8009fa2:	887a      	ldrh	r2, [r7, #2]
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	701a      	strb	r2, [r3, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	0a1b      	lsrs	r3, r3, #8
 8009fce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	607a      	str	r2, [r7, #4]
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	b2d2      	uxtb	r2, r2
 8009fda:	701a      	strb	r2, [r3, #0]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	0a1b      	lsrs	r3, r3, #8
 8009fe0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	b2d2      	uxtb	r2, r2
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	0a1b      	lsrs	r3, r3, #8
 8009ff2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	b2d2      	uxtb	r2, r2
 8009ffe:	701a      	strb	r2, [r3, #0]
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00d      	beq.n	800a042 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	1c53      	adds	r3, r2, #1
 800a02a:	613b      	str	r3, [r7, #16]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	1c59      	adds	r1, r3, #1
 800a030:	6179      	str	r1, [r7, #20]
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3b01      	subs	r3, #1
 800a03a:	607b      	str	r3, [r7, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1f1      	bne.n	800a026 <mem_cpy+0x1a>
	}
}
 800a042:	bf00      	nop
 800a044:	371c      	adds	r7, #28
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a04e:	b480      	push	{r7}
 800a050:	b087      	sub	sp, #28
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	617a      	str	r2, [r7, #20]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	b2d2      	uxtb	r2, r2
 800a068:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	607b      	str	r3, [r7, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1f3      	bne.n	800a05e <mem_set+0x10>
}
 800a076:	bf00      	nop
 800a078:	bf00      	nop
 800a07a:	371c      	adds	r7, #28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a084:	b480      	push	{r7}
 800a086:	b089      	sub	sp, #36	; 0x24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	61fa      	str	r2, [r7, #28]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	61ba      	str	r2, [r7, #24]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	1acb      	subs	r3, r1, r3
 800a0b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	607b      	str	r3, [r7, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <mem_cmp+0x40>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0eb      	beq.n	800a09c <mem_cmp+0x18>

	return r;
 800a0c4:	697b      	ldr	r3, [r7, #20]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3724      	adds	r7, #36	; 0x24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a0dc:	e002      	b.n	800a0e4 <chk_chr+0x12>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	607b      	str	r3, [r7, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <chk_chr+0x26>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d1f2      	bne.n	800a0de <chk_chr+0xc>
	return *str;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a112:	2300      	movs	r3, #0
 800a114:	60bb      	str	r3, [r7, #8]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	e029      	b.n	800a170 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a11c:	4a27      	ldr	r2, [pc, #156]	; (800a1bc <chk_lock+0xb4>)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	011b      	lsls	r3, r3, #4
 800a122:	4413      	add	r3, r2
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d01d      	beq.n	800a166 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a12a:	4a24      	ldr	r2, [pc, #144]	; (800a1bc <chk_lock+0xb4>)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	011b      	lsls	r3, r3, #4
 800a130:	4413      	add	r3, r2
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d116      	bne.n	800a16a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a13c:	4a1f      	ldr	r2, [pc, #124]	; (800a1bc <chk_lock+0xb4>)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	4413      	add	r3, r2
 800a144:	3304      	adds	r3, #4
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d10c      	bne.n	800a16a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a150:	4a1a      	ldr	r2, [pc, #104]	; (800a1bc <chk_lock+0xb4>)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	4413      	add	r3, r2
 800a158:	3308      	adds	r3, #8
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a160:	429a      	cmp	r2, r3
 800a162:	d102      	bne.n	800a16a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a164:	e007      	b.n	800a176 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a166:	2301      	movs	r3, #1
 800a168:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d9d2      	bls.n	800a11c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d109      	bne.n	800a190 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <chk_lock+0x80>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d101      	bne.n	800a18c <chk_lock+0x84>
 800a188:	2300      	movs	r3, #0
 800a18a:	e010      	b.n	800a1ae <chk_lock+0xa6>
 800a18c:	2312      	movs	r3, #18
 800a18e:	e00e      	b.n	800a1ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d108      	bne.n	800a1a8 <chk_lock+0xa0>
 800a196:	4a09      	ldr	r2, [pc, #36]	; (800a1bc <chk_lock+0xb4>)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	4413      	add	r3, r2
 800a19e:	330c      	adds	r3, #12
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a6:	d101      	bne.n	800a1ac <chk_lock+0xa4>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	e000      	b.n	800a1ae <chk_lock+0xa6>
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	200000c0 	.word	0x200000c0

0800a1c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	607b      	str	r3, [r7, #4]
 800a1ca:	e002      	b.n	800a1d2 <enq_lock+0x12>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	607b      	str	r3, [r7, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d806      	bhi.n	800a1e6 <enq_lock+0x26>
 800a1d8:	4a09      	ldr	r2, [pc, #36]	; (800a200 <enq_lock+0x40>)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	4413      	add	r3, r2
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1f2      	bne.n	800a1cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	bf14      	ite	ne
 800a1ec:	2301      	movne	r3, #1
 800a1ee:	2300      	moveq	r3, #0
 800a1f0:	b2db      	uxtb	r3, r3
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	200000c0 	.word	0x200000c0

0800a204 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	e01f      	b.n	800a254 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a214:	4a41      	ldr	r2, [pc, #260]	; (800a31c <inc_lock+0x118>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	4413      	add	r3, r2
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d113      	bne.n	800a24e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a226:	4a3d      	ldr	r2, [pc, #244]	; (800a31c <inc_lock+0x118>)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	4413      	add	r3, r2
 800a22e:	3304      	adds	r3, #4
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a236:	429a      	cmp	r2, r3
 800a238:	d109      	bne.n	800a24e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a23a:	4a38      	ldr	r2, [pc, #224]	; (800a31c <inc_lock+0x118>)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	011b      	lsls	r3, r3, #4
 800a240:	4413      	add	r3, r2
 800a242:	3308      	adds	r3, #8
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d006      	beq.n	800a25c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d9dc      	bls.n	800a214 <inc_lock+0x10>
 800a25a:	e000      	b.n	800a25e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a25c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d132      	bne.n	800a2ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a264:	2300      	movs	r3, #0
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e002      	b.n	800a270 <inc_lock+0x6c>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d806      	bhi.n	800a284 <inc_lock+0x80>
 800a276:	4a29      	ldr	r2, [pc, #164]	; (800a31c <inc_lock+0x118>)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	4413      	add	r3, r2
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1f2      	bne.n	800a26a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b02      	cmp	r3, #2
 800a288:	d101      	bne.n	800a28e <inc_lock+0x8a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e040      	b.n	800a310 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4922      	ldr	r1, [pc, #136]	; (800a31c <inc_lock+0x118>)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	440b      	add	r3, r1
 800a29a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	491e      	ldr	r1, [pc, #120]	; (800a31c <inc_lock+0x118>)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	440b      	add	r3, r1
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	695a      	ldr	r2, [r3, #20]
 800a2b0:	491a      	ldr	r1, [pc, #104]	; (800a31c <inc_lock+0x118>)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	011b      	lsls	r3, r3, #4
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a2bc:	4a17      	ldr	r2, [pc, #92]	; (800a31c <inc_lock+0x118>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	4413      	add	r3, r2
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d009      	beq.n	800a2e4 <inc_lock+0xe0>
 800a2d0:	4a12      	ldr	r2, [pc, #72]	; (800a31c <inc_lock+0x118>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	4413      	add	r3, r2
 800a2d8:	330c      	adds	r3, #12
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <inc_lock+0xe0>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e015      	b.n	800a310 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d108      	bne.n	800a2fc <inc_lock+0xf8>
 800a2ea:	4a0c      	ldr	r2, [pc, #48]	; (800a31c <inc_lock+0x118>)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	011b      	lsls	r3, r3, #4
 800a2f0:	4413      	add	r3, r2
 800a2f2:	330c      	adds	r3, #12
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	e001      	b.n	800a300 <inc_lock+0xfc>
 800a2fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a300:	4906      	ldr	r1, [pc, #24]	; (800a31c <inc_lock+0x118>)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	440b      	add	r3, r1
 800a308:	330c      	adds	r3, #12
 800a30a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3301      	adds	r3, #1
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	200000c0 	.word	0x200000c0

0800a320 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	607b      	str	r3, [r7, #4]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d825      	bhi.n	800a380 <dec_lock+0x60>
		n = Files[i].ctr;
 800a334:	4a17      	ldr	r2, [pc, #92]	; (800a394 <dec_lock+0x74>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	011b      	lsls	r3, r3, #4
 800a33a:	4413      	add	r3, r2
 800a33c:	330c      	adds	r3, #12
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a342:	89fb      	ldrh	r3, [r7, #14]
 800a344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a348:	d101      	bne.n	800a34e <dec_lock+0x2e>
 800a34a:	2300      	movs	r3, #0
 800a34c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a34e:	89fb      	ldrh	r3, [r7, #14]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <dec_lock+0x3a>
 800a354:	89fb      	ldrh	r3, [r7, #14]
 800a356:	3b01      	subs	r3, #1
 800a358:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a35a:	4a0e      	ldr	r2, [pc, #56]	; (800a394 <dec_lock+0x74>)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	011b      	lsls	r3, r3, #4
 800a360:	4413      	add	r3, r2
 800a362:	330c      	adds	r3, #12
 800a364:	89fa      	ldrh	r2, [r7, #14]
 800a366:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a368:	89fb      	ldrh	r3, [r7, #14]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d105      	bne.n	800a37a <dec_lock+0x5a>
 800a36e:	4a09      	ldr	r2, [pc, #36]	; (800a394 <dec_lock+0x74>)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	4413      	add	r3, r2
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	737b      	strb	r3, [r7, #13]
 800a37e:	e001      	b.n	800a384 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a380:	2302      	movs	r3, #2
 800a382:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a384:	7b7b      	ldrb	r3, [r7, #13]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	200000c0 	.word	0x200000c0

0800a398 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	e010      	b.n	800a3c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a3a6:	4a0d      	ldr	r2, [pc, #52]	; (800a3dc <clear_lock+0x44>)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	4413      	add	r3, r2
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d105      	bne.n	800a3c2 <clear_lock+0x2a>
 800a3b6:	4a09      	ldr	r2, [pc, #36]	; (800a3dc <clear_lock+0x44>)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	011b      	lsls	r3, r3, #4
 800a3bc:	4413      	add	r3, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d9eb      	bls.n	800a3a6 <clear_lock+0xe>
	}
}
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	200000c0 	.word	0x200000c0

0800a3e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	78db      	ldrb	r3, [r3, #3]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d034      	beq.n	800a45e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	7858      	ldrb	r0, [r3, #1]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a404:	2301      	movs	r3, #1
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	f7ff fd40 	bl	8009e8c <disk_write>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a412:	2301      	movs	r3, #1
 800a414:	73fb      	strb	r3, [r7, #15]
 800a416:	e022      	b.n	800a45e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	1ad2      	subs	r2, r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d217      	bcs.n	800a45e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	789b      	ldrb	r3, [r3, #2]
 800a432:	613b      	str	r3, [r7, #16]
 800a434:	e010      	b.n	800a458 <sync_window+0x78>
					wsect += fs->fsize;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	4413      	add	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7858      	ldrb	r0, [r3, #1]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a44a:	2301      	movs	r3, #1
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	f7ff fd1d 	bl	8009e8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	3b01      	subs	r3, #1
 800a456:	613b      	str	r3, [r7, #16]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d8eb      	bhi.n	800a436 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d01b      	beq.n	800a4b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff ffad 	bl	800a3e0 <sync_window>
 800a486:	4603      	mov	r3, r0
 800a488:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d113      	bne.n	800a4b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7858      	ldrb	r0, [r3, #1]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a49a:	2301      	movs	r3, #1
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	f7ff fcd5 	bl	8009e4c <disk_read>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d004      	beq.n	800a4b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff ff87 	bl	800a3e0 <sync_window>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d159      	bne.n	800a590 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d149      	bne.n	800a578 <sync_fs+0xb4>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	791b      	ldrb	r3, [r3, #4]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d145      	bne.n	800a578 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	899b      	ldrh	r3, [r3, #12]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	f7ff fda8 	bl	800a04e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3334      	adds	r3, #52	; 0x34
 800a502:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a506:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff fd37 	bl	8009f7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3334      	adds	r3, #52	; 0x34
 800a514:	4921      	ldr	r1, [pc, #132]	; (800a59c <sync_fs+0xd8>)
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fd4c 	bl	8009fb4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3334      	adds	r3, #52	; 0x34
 800a520:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a524:	491e      	ldr	r1, [pc, #120]	; (800a5a0 <sync_fs+0xdc>)
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff fd44 	bl	8009fb4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3334      	adds	r3, #52	; 0x34
 800a530:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	4619      	mov	r1, r3
 800a53a:	4610      	mov	r0, r2
 800a53c:	f7ff fd3a 	bl	8009fb4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3334      	adds	r3, #52	; 0x34
 800a544:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f7ff fd30 	bl	8009fb4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	7858      	ldrb	r0, [r3, #1]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a56c:	2301      	movs	r3, #1
 800a56e:	f7ff fc8d 	bl	8009e8c <disk_write>
			fs->fsi_flag = 0;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	2200      	movs	r2, #0
 800a57e:	2100      	movs	r1, #0
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff fca3 	bl	8009ecc <disk_ioctl>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <sync_fs+0xcc>
 800a58c:	2301      	movs	r3, #1
 800a58e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	41615252 	.word	0x41615252
 800a5a0:	61417272 	.word	0x61417272

0800a5a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	3b02      	subs	r3, #2
 800a5b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	3b02      	subs	r3, #2
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d301      	bcc.n	800a5c4 <clust2sect+0x20>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e008      	b.n	800a5d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	895b      	ldrh	r3, [r3, #10]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	fb03 f202 	mul.w	r2, r3, r2
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	4413      	add	r3, r2
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d904      	bls.n	800a602 <get_fat+0x20>
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d302      	bcc.n	800a608 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a602:	2301      	movs	r3, #1
 800a604:	617b      	str	r3, [r7, #20]
 800a606:	e0bb      	b.n	800a780 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a608:	f04f 33ff 	mov.w	r3, #4294967295
 800a60c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b03      	cmp	r3, #3
 800a614:	f000 8083 	beq.w	800a71e <get_fat+0x13c>
 800a618:	2b03      	cmp	r3, #3
 800a61a:	f300 80a7 	bgt.w	800a76c <get_fat+0x18a>
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d002      	beq.n	800a628 <get_fat+0x46>
 800a622:	2b02      	cmp	r3, #2
 800a624:	d056      	beq.n	800a6d4 <get_fat+0xf2>
 800a626:	e0a1      	b.n	800a76c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	085b      	lsrs	r3, r3, #1
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	899b      	ldrh	r3, [r3, #12]
 800a63e:	4619      	mov	r1, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	fbb3 f3f1 	udiv	r3, r3, r1
 800a646:	4413      	add	r3, r2
 800a648:	4619      	mov	r1, r3
 800a64a:	6938      	ldr	r0, [r7, #16]
 800a64c:	f7ff ff0c 	bl	800a468 <move_window>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 808d 	bne.w	800a772 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	60fa      	str	r2, [r7, #12]
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	8992      	ldrh	r2, [r2, #12]
 800a662:	fbb3 f1f2 	udiv	r1, r3, r2
 800a666:	fb02 f201 	mul.w	r2, r2, r1
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4413      	add	r3, r2
 800a670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a674:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	899b      	ldrh	r3, [r3, #12]
 800a67e:	4619      	mov	r1, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	fbb3 f3f1 	udiv	r3, r3, r1
 800a686:	4413      	add	r3, r2
 800a688:	4619      	mov	r1, r3
 800a68a:	6938      	ldr	r0, [r7, #16]
 800a68c:	f7ff feec 	bl	800a468 <move_window>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d16f      	bne.n	800a776 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	899b      	ldrh	r3, [r3, #12]
 800a69a:	461a      	mov	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6a2:	fb02 f201 	mul.w	r2, r2, r1
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d002      	beq.n	800a6ca <get_fat+0xe8>
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	091b      	lsrs	r3, r3, #4
 800a6c8:	e002      	b.n	800a6d0 <get_fat+0xee>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6d0:	617b      	str	r3, [r7, #20]
			break;
 800a6d2:	e055      	b.n	800a780 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	899b      	ldrh	r3, [r3, #12]
 800a6dc:	085b      	lsrs	r3, r3, #1
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6e8:	4413      	add	r3, r2
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6938      	ldr	r0, [r7, #16]
 800a6ee:	f7ff febb 	bl	800a468 <move_window>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d140      	bne.n	800a77a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	005b      	lsls	r3, r3, #1
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	8992      	ldrh	r2, [r2, #12]
 800a706:	fbb3 f0f2 	udiv	r0, r3, r2
 800a70a:	fb02 f200 	mul.w	r2, r2, r0
 800a70e:	1a9b      	subs	r3, r3, r2
 800a710:	440b      	add	r3, r1
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fbf8 	bl	8009f08 <ld_word>
 800a718:	4603      	mov	r3, r0
 800a71a:	617b      	str	r3, [r7, #20]
			break;
 800a71c:	e030      	b.n	800a780 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	899b      	ldrh	r3, [r3, #12]
 800a726:	089b      	lsrs	r3, r3, #2
 800a728:	b29b      	uxth	r3, r3
 800a72a:	4619      	mov	r1, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a732:	4413      	add	r3, r2
 800a734:	4619      	mov	r1, r3
 800a736:	6938      	ldr	r0, [r7, #16]
 800a738:	f7ff fe96 	bl	800a468 <move_window>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d11d      	bne.n	800a77e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	8992      	ldrh	r2, [r2, #12]
 800a750:	fbb3 f0f2 	udiv	r0, r3, r2
 800a754:	fb02 f200 	mul.w	r2, r2, r0
 800a758:	1a9b      	subs	r3, r3, r2
 800a75a:	440b      	add	r3, r1
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7ff fbeb 	bl	8009f38 <ld_dword>
 800a762:	4603      	mov	r3, r0
 800a764:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a768:	617b      	str	r3, [r7, #20]
			break;
 800a76a:	e009      	b.n	800a780 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a76c:	2301      	movs	r3, #1
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e006      	b.n	800a780 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a772:	bf00      	nop
 800a774:	e004      	b.n	800a780 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a776:	bf00      	nop
 800a778:	e002      	b.n	800a780 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a77a:	bf00      	nop
 800a77c:	e000      	b.n	800a780 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a77e:	bf00      	nop
		}
	}

	return val;
 800a780:	697b      	ldr	r3, [r7, #20]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a78a:	b590      	push	{r4, r7, lr}
 800a78c:	b089      	sub	sp, #36	; 0x24
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a796:	2302      	movs	r3, #2
 800a798:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	f240 8102 	bls.w	800a9a6 <put_fat+0x21c>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	f080 80fc 	bcs.w	800a9a6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	f000 80b6 	beq.w	800a924 <put_fat+0x19a>
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	f300 80fd 	bgt.w	800a9b8 <put_fat+0x22e>
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d003      	beq.n	800a7ca <put_fat+0x40>
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	f000 8083 	beq.w	800a8ce <put_fat+0x144>
 800a7c8:	e0f6      	b.n	800a9b8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	61bb      	str	r3, [r7, #24]
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	085b      	lsrs	r3, r3, #1
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	899b      	ldrh	r3, [r3, #12]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7e8:	4413      	add	r3, r2
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7ff fe3b 	bl	800a468 <move_window>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7f6:	7ffb      	ldrb	r3, [r7, #31]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f040 80d6 	bne.w	800a9aa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	61ba      	str	r2, [r7, #24]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	8992      	ldrh	r2, [r2, #12]
 800a80e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a812:	fb02 f200 	mul.w	r2, r2, r0
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	440b      	add	r3, r1
 800a81a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00d      	beq.n	800a842 <put_fat+0xb8>
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	b25b      	sxtb	r3, r3
 800a82c:	f003 030f 	and.w	r3, r3, #15
 800a830:	b25a      	sxtb	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	011b      	lsls	r3, r3, #4
 800a838:	b25b      	sxtb	r3, r3
 800a83a:	4313      	orrs	r3, r2
 800a83c:	b25b      	sxtb	r3, r3
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	e001      	b.n	800a846 <put_fat+0xbc>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	b2db      	uxtb	r3, r3
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	899b      	ldrh	r3, [r3, #12]
 800a858:	4619      	mov	r1, r3
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a860:	4413      	add	r3, r2
 800a862:	4619      	mov	r1, r3
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7ff fdff 	bl	800a468 <move_window>
 800a86a:	4603      	mov	r3, r0
 800a86c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a86e:	7ffb      	ldrb	r3, [r7, #31]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f040 809c 	bne.w	800a9ae <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	899b      	ldrh	r3, [r3, #12]
 800a880:	461a      	mov	r2, r3
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	fbb3 f0f2 	udiv	r0, r3, r2
 800a888:	fb02 f200 	mul.w	r2, r2, r0
 800a88c:	1a9b      	subs	r3, r3, r2
 800a88e:	440b      	add	r3, r1
 800a890:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <put_fat+0x11a>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	091b      	lsrs	r3, r3, #4
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	e00e      	b.n	800a8c2 <put_fat+0x138>
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	b25b      	sxtb	r3, r3
 800a8aa:	f023 030f 	bic.w	r3, r3, #15
 800a8ae:	b25a      	sxtb	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	b25b      	sxtb	r3, r3
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	b25b      	sxtb	r3, r3
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	b25b      	sxtb	r3, r3
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	70da      	strb	r2, [r3, #3]
			break;
 800a8cc:	e074      	b.n	800a9b8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	899b      	ldrh	r3, [r3, #12]
 800a8d6:	085b      	lsrs	r3, r3, #1
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8e2:	4413      	add	r3, r2
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7ff fdbe 	bl	800a468 <move_window>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8f0:	7ffb      	ldrb	r3, [r7, #31]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d15d      	bne.n	800a9b2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	8992      	ldrh	r2, [r2, #12]
 800a904:	fbb3 f0f2 	udiv	r0, r3, r2
 800a908:	fb02 f200 	mul.w	r2, r2, r0
 800a90c:	1a9b      	subs	r3, r3, r2
 800a90e:	440b      	add	r3, r1
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	b292      	uxth	r2, r2
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fb31 	bl	8009f7e <st_word>
			fs->wflag = 1;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2201      	movs	r2, #1
 800a920:	70da      	strb	r2, [r3, #3]
			break;
 800a922:	e049      	b.n	800a9b8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	899b      	ldrh	r3, [r3, #12]
 800a92c:	089b      	lsrs	r3, r3, #2
 800a92e:	b29b      	uxth	r3, r3
 800a930:	4619      	mov	r1, r3
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	fbb3 f3f1 	udiv	r3, r3, r1
 800a938:	4413      	add	r3, r2
 800a93a:	4619      	mov	r1, r3
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff fd93 	bl	800a468 <move_window>
 800a942:	4603      	mov	r3, r0
 800a944:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a946:	7ffb      	ldrb	r3, [r7, #31]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d134      	bne.n	800a9b6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	8992      	ldrh	r2, [r2, #12]
 800a960:	fbb3 f0f2 	udiv	r0, r3, r2
 800a964:	fb02 f200 	mul.w	r2, r2, r0
 800a968:	1a9b      	subs	r3, r3, r2
 800a96a:	440b      	add	r3, r1
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fae3 	bl	8009f38 <ld_dword>
 800a972:	4603      	mov	r3, r0
 800a974:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a978:	4323      	orrs	r3, r4
 800a97a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	8992      	ldrh	r2, [r2, #12]
 800a98a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a98e:	fb02 f200 	mul.w	r2, r2, r0
 800a992:	1a9b      	subs	r3, r3, r2
 800a994:	440b      	add	r3, r1
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fb0b 	bl	8009fb4 <st_dword>
			fs->wflag = 1;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	70da      	strb	r2, [r3, #3]
			break;
 800a9a4:	e008      	b.n	800a9b8 <put_fat+0x22e>
		}
	}
 800a9a6:	bf00      	nop
 800a9a8:	e006      	b.n	800a9b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a9aa:	bf00      	nop
 800a9ac:	e004      	b.n	800a9b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a9ae:	bf00      	nop
 800a9b0:	e002      	b.n	800a9b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a9b2:	bf00      	nop
 800a9b4:	e000      	b.n	800a9b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a9b6:	bf00      	nop
	return res;
 800a9b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3724      	adds	r7, #36	; 0x24
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd90      	pop	{r4, r7, pc}

0800a9c2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b088      	sub	sp, #32
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	60f8      	str	r0, [r7, #12]
 800a9ca:	60b9      	str	r1, [r7, #8]
 800a9cc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d904      	bls.n	800a9e8 <remove_chain+0x26>
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d301      	bcc.n	800a9ec <remove_chain+0x2a>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e04b      	b.n	800aa84 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00c      	beq.n	800aa0c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	69b8      	ldr	r0, [r7, #24]
 800a9fa:	f7ff fec6 	bl	800a78a <put_fat>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aa02:	7ffb      	ldrb	r3, [r7, #31]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <remove_chain+0x4a>
 800aa08:	7ffb      	ldrb	r3, [r7, #31]
 800aa0a:	e03b      	b.n	800aa84 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7ff fde7 	bl	800a5e2 <get_fat>
 800aa14:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d031      	beq.n	800aa80 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d101      	bne.n	800aa26 <remove_chain+0x64>
 800aa22:	2302      	movs	r3, #2
 800aa24:	e02e      	b.n	800aa84 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d101      	bne.n	800aa32 <remove_chain+0x70>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e028      	b.n	800aa84 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aa32:	2200      	movs	r2, #0
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	69b8      	ldr	r0, [r7, #24]
 800aa38:	f7ff fea7 	bl	800a78a <put_fat>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa40:	7ffb      	ldrb	r3, [r7, #31]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <remove_chain+0x88>
 800aa46:	7ffb      	ldrb	r3, [r7, #31]
 800aa48:	e01c      	b.n	800aa84 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	695a      	ldr	r2, [r3, #20]
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	3b02      	subs	r3, #2
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d20b      	bcs.n	800aa70 <remove_chain+0xae>
			fs->free_clst++;
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	791b      	ldrb	r3, [r3, #4]
 800aa66:	f043 0301 	orr.w	r3, r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d3c6      	bcc.n	800aa0c <remove_chain+0x4a>
 800aa7e:	e000      	b.n	800aa82 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aa80:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3720      	adds	r7, #32
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d004      	beq.n	800aab8 <create_chain+0x2c>
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d31b      	bcc.n	800aaf0 <create_chain+0x64>
 800aab8:	2301      	movs	r3, #1
 800aaba:	61bb      	str	r3, [r7, #24]
 800aabc:	e018      	b.n	800aaf0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fd8e 	bl	800a5e2 <get_fat>
 800aac6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d801      	bhi.n	800aad2 <create_chain+0x46>
 800aace:	2301      	movs	r3, #1
 800aad0:	e070      	b.n	800abb4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d101      	bne.n	800aade <create_chain+0x52>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	e06a      	b.n	800abb4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d201      	bcs.n	800aaec <create_chain+0x60>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	e063      	b.n	800abb4 <create_chain+0x128>
		scl = clst;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d307      	bcc.n	800ab14 <create_chain+0x88>
				ncl = 2;
 800ab04:	2302      	movs	r3, #2
 800ab06:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab08:	69fa      	ldr	r2, [r7, #28]
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d901      	bls.n	800ab14 <create_chain+0x88>
 800ab10:	2300      	movs	r3, #0
 800ab12:	e04f      	b.n	800abb4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab14:	69f9      	ldr	r1, [r7, #28]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff fd63 	bl	800a5e2 <get_fat>
 800ab1c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00e      	beq.n	800ab42 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d003      	beq.n	800ab32 <create_chain+0xa6>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d101      	bne.n	800ab36 <create_chain+0xaa>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	e03e      	b.n	800abb4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab36:	69fa      	ldr	r2, [r7, #28]
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d1da      	bne.n	800aaf4 <create_chain+0x68>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e038      	b.n	800abb4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab42:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab44:	f04f 32ff 	mov.w	r2, #4294967295
 800ab48:	69f9      	ldr	r1, [r7, #28]
 800ab4a:	6938      	ldr	r0, [r7, #16]
 800ab4c:	f7ff fe1d 	bl	800a78a <put_fat>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <create_chain+0xe2>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d006      	beq.n	800ab6e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6938      	ldr	r0, [r7, #16]
 800ab66:	f7ff fe10 	bl	800a78a <put_fat>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d116      	bne.n	800aba2 <create_chain+0x116>
		fs->last_clst = ncl;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	69fa      	ldr	r2, [r7, #28]
 800ab78:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	695a      	ldr	r2, [r3, #20]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	3b02      	subs	r3, #2
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d804      	bhi.n	800ab92 <create_chain+0x106>
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	1e5a      	subs	r2, r3, #1
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	791b      	ldrb	r3, [r3, #4]
 800ab96:	f043 0301 	orr.w	r3, r3, #1
 800ab9a:	b2da      	uxtb	r2, r3
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	711a      	strb	r2, [r3, #4]
 800aba0:	e007      	b.n	800abb2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aba2:	7dfb      	ldrb	r3, [r7, #23]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d102      	bne.n	800abae <create_chain+0x122>
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295
 800abac:	e000      	b.n	800abb0 <create_chain+0x124>
 800abae:	2301      	movs	r3, #1
 800abb0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800abb2:	69fb      	ldr	r3, [r7, #28]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3720      	adds	r7, #32
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	3304      	adds	r3, #4
 800abd2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	899b      	ldrh	r3, [r3, #12]
 800abd8:	461a      	mov	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	8952      	ldrh	r2, [r2, #10]
 800abe4:	fbb3 f3f2 	udiv	r3, r3, r2
 800abe8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1d1a      	adds	r2, r3, #4
 800abee:	613a      	str	r2, [r7, #16]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <clmt_clust+0x42>
 800abfa:	2300      	movs	r3, #0
 800abfc:	e010      	b.n	800ac20 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d307      	bcc.n	800ac16 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	617b      	str	r3, [r7, #20]
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	3304      	adds	r3, #4
 800ac12:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac14:	e7e9      	b.n	800abea <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ac16:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	4413      	add	r3, r2
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac42:	d204      	bcs.n	800ac4e <dir_sdi+0x22>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	f003 031f 	and.w	r3, r3, #31
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e071      	b.n	800ad36 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d106      	bne.n	800ac72 <dir_sdi+0x46>
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d902      	bls.n	800ac72 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10c      	bne.n	800ac92 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	095b      	lsrs	r3, r3, #5
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	8912      	ldrh	r2, [r2, #8]
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d301      	bcc.n	800ac88 <dir_sdi+0x5c>
 800ac84:	2302      	movs	r3, #2
 800ac86:	e056      	b.n	800ad36 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	61da      	str	r2, [r3, #28]
 800ac90:	e02d      	b.n	800acee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	895b      	ldrh	r3, [r3, #10]
 800ac96:	461a      	mov	r2, r3
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	899b      	ldrh	r3, [r3, #12]
 800ac9c:	fb03 f302 	mul.w	r3, r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aca2:	e019      	b.n	800acd8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6979      	ldr	r1, [r7, #20]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7ff fc9a 	bl	800a5e2 <get_fat>
 800acae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d101      	bne.n	800acbc <dir_sdi+0x90>
 800acb8:	2301      	movs	r3, #1
 800acba:	e03c      	b.n	800ad36 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d904      	bls.n	800accc <dir_sdi+0xa0>
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d301      	bcc.n	800acd0 <dir_sdi+0xa4>
 800accc:	2302      	movs	r3, #2
 800acce:	e032      	b.n	800ad36 <dir_sdi+0x10a>
			ofs -= csz;
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d2e1      	bcs.n	800aca4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ace0:	6979      	ldr	r1, [r7, #20]
 800ace2:	6938      	ldr	r0, [r7, #16]
 800ace4:	f7ff fc5e 	bl	800a5a4 <clust2sect>
 800ace8:	4602      	mov	r2, r0
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <dir_sdi+0xd4>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e01a      	b.n	800ad36 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	69da      	ldr	r2, [r3, #28]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	899b      	ldrh	r3, [r3, #12]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad10:	441a      	add	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	899b      	ldrh	r3, [r3, #12]
 800ad20:	461a      	mov	r2, r3
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad28:	fb02 f200 	mul.w	r2, r2, r0
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	18ca      	adds	r2, r1, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b086      	sub	sp, #24
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	3320      	adds	r3, #32
 800ad54:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <dir_next+0x28>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad64:	d301      	bcc.n	800ad6a <dir_next+0x2c>
 800ad66:	2304      	movs	r3, #4
 800ad68:	e0bb      	b.n	800aee2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	899b      	ldrh	r3, [r3, #12]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad76:	fb02 f201 	mul.w	r2, r2, r1
 800ad7a:	1a9b      	subs	r3, r3, r2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f040 809d 	bne.w	800aebc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10b      	bne.n	800adac <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	095b      	lsrs	r3, r3, #5
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	8912      	ldrh	r2, [r2, #8]
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	f0c0 808d 	bcc.w	800aebc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	61da      	str	r2, [r3, #28]
 800ada8:	2304      	movs	r3, #4
 800adaa:	e09a      	b.n	800aee2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	899b      	ldrh	r3, [r3, #12]
 800adb0:	461a      	mov	r2, r3
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	8952      	ldrh	r2, [r2, #10]
 800adbc:	3a01      	subs	r2, #1
 800adbe:	4013      	ands	r3, r2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d17b      	bne.n	800aebc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f7ff fc08 	bl	800a5e2 <get_fat>
 800add2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d801      	bhi.n	800adde <dir_next+0xa0>
 800adda:	2302      	movs	r3, #2
 800addc:	e081      	b.n	800aee2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade4:	d101      	bne.n	800adea <dir_next+0xac>
 800ade6:	2301      	movs	r3, #1
 800ade8:	e07b      	b.n	800aee2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d359      	bcc.n	800aea8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d104      	bne.n	800ae04 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	61da      	str	r2, [r3, #28]
 800ae00:	2304      	movs	r3, #4
 800ae02:	e06e      	b.n	800aee2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	f7ff fe3d 	bl	800aa8c <create_chain>
 800ae12:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <dir_next+0xe0>
 800ae1a:	2307      	movs	r3, #7
 800ae1c:	e061      	b.n	800aee2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d101      	bne.n	800ae28 <dir_next+0xea>
 800ae24:	2302      	movs	r3, #2
 800ae26:	e05c      	b.n	800aee2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2e:	d101      	bne.n	800ae34 <dir_next+0xf6>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e056      	b.n	800aee2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fad3 	bl	800a3e0 <sync_window>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <dir_next+0x106>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e04e      	b.n	800aee2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	899b      	ldrh	r3, [r3, #12]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	2100      	movs	r1, #0
 800ae52:	f7ff f8fc 	bl	800a04e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae56:	2300      	movs	r3, #0
 800ae58:	613b      	str	r3, [r7, #16]
 800ae5a:	6979      	ldr	r1, [r7, #20]
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f7ff fba1 	bl	800a5a4 <clust2sect>
 800ae62:	4602      	mov	r2, r0
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	631a      	str	r2, [r3, #48]	; 0x30
 800ae68:	e012      	b.n	800ae90 <dir_next+0x152>
						fs->wflag = 1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f7ff fab5 	bl	800a3e0 <sync_window>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <dir_next+0x142>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e030      	b.n	800aee2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	3301      	adds	r3, #1
 800ae84:	613b      	str	r3, [r7, #16]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	895b      	ldrh	r3, [r3, #10]
 800ae94:	461a      	mov	r2, r3
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d3e6      	bcc.n	800ae6a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	1ad2      	subs	r2, r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aeae:	6979      	ldr	r1, [r7, #20]
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7ff fb77 	bl	800a5a4 <clust2sect>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	899b      	ldrh	r3, [r3, #12]
 800aecc:	461a      	mov	r2, r3
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	fbb3 f0f2 	udiv	r0, r3, r2
 800aed4:	fb02 f200 	mul.w	r2, r2, r0
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	18ca      	adds	r2, r1, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b086      	sub	sp, #24
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aefa:	2100      	movs	r1, #0
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff fe95 	bl	800ac2c <dir_sdi>
 800af02:	4603      	mov	r3, r0
 800af04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d12b      	bne.n	800af64 <dir_alloc+0x7a>
		n = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	4619      	mov	r1, r3
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7ff faa6 	bl	800a468 <move_window>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d11d      	bne.n	800af62 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2be5      	cmp	r3, #229	; 0xe5
 800af2e:	d004      	beq.n	800af3a <dir_alloc+0x50>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a1b      	ldr	r3, [r3, #32]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d107      	bne.n	800af4a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	3301      	adds	r3, #1
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d102      	bne.n	800af4e <dir_alloc+0x64>
 800af48:	e00c      	b.n	800af64 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af4a:	2300      	movs	r3, #0
 800af4c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af4e:	2101      	movs	r1, #1
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff fef4 	bl	800ad3e <dir_next>
 800af56:	4603      	mov	r3, r0
 800af58:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0d7      	beq.n	800af10 <dir_alloc+0x26>
 800af60:	e000      	b.n	800af64 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af62:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	2b04      	cmp	r3, #4
 800af68:	d101      	bne.n	800af6e <dir_alloc+0x84>
 800af6a:	2307      	movs	r3, #7
 800af6c:	75fb      	strb	r3, [r7, #23]
	return res;
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	331a      	adds	r3, #26
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe ffbe 	bl	8009f08 <ld_word>
 800af8c:	4603      	mov	r3, r0
 800af8e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d109      	bne.n	800afac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	3314      	adds	r3, #20
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fe ffb3 	bl	8009f08 <ld_word>
 800afa2:	4603      	mov	r3, r0
 800afa4:	041b      	lsls	r3, r3, #16
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800afac:	68fb      	ldr	r3, [r7, #12]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	60b9      	str	r1, [r7, #8]
 800afc0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	331a      	adds	r3, #26
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	b292      	uxth	r2, r2
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fe ffd6 	bl	8009f7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d109      	bne.n	800afee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	f103 0214 	add.w	r2, r3, #20
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	4619      	mov	r1, r3
 800afe8:	4610      	mov	r0, r2
 800afea:	f7fe ffc8 	bl	8009f7e <st_word>
	}
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b086      	sub	sp, #24
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b004:	2100      	movs	r1, #0
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff fe10 	bl	800ac2c <dir_sdi>
 800b00c:	4603      	mov	r3, r0
 800b00e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <dir_find+0x24>
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	e03e      	b.n	800b098 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	4619      	mov	r1, r3
 800b020:	6938      	ldr	r0, [r7, #16]
 800b022:	f7ff fa21 	bl	800a468 <move_window>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d12f      	bne.n	800b090 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <dir_find+0x4e>
 800b03e:	2304      	movs	r3, #4
 800b040:	75fb      	strb	r3, [r7, #23]
 800b042:	e028      	b.n	800b096 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	330b      	adds	r3, #11
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b050:	b2da      	uxtb	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	330b      	adds	r3, #11
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10a      	bne.n	800b07c <dir_find+0x86>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a18      	ldr	r0, [r3, #32]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3324      	adds	r3, #36	; 0x24
 800b06e:	220b      	movs	r2, #11
 800b070:	4619      	mov	r1, r3
 800b072:	f7ff f807 	bl	800a084 <mem_cmp>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00b      	beq.n	800b094 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b07c:	2100      	movs	r1, #0
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff fe5d 	bl	800ad3e <dir_next>
 800b084:	4603      	mov	r3, r0
 800b086:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b088:	7dfb      	ldrb	r3, [r7, #23]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0c5      	beq.n	800b01a <dir_find+0x24>
 800b08e:	e002      	b.n	800b096 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b090:	bf00      	nop
 800b092:	e000      	b.n	800b096 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b094:	bf00      	nop

	return res;
 800b096:	7dfb      	ldrb	r3, [r7, #23]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff ff1a 	bl	800aeea <dir_alloc>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d11c      	bne.n	800b0fa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	68b8      	ldr	r0, [r7, #8]
 800b0c8:	f7ff f9ce 	bl	800a468 <move_window>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d111      	bne.n	800b0fa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	2220      	movs	r2, #32
 800b0dc:	2100      	movs	r1, #0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe ffb5 	bl	800a04e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a18      	ldr	r0, [r3, #32]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3324      	adds	r3, #36	; 0x24
 800b0ec:	220b      	movs	r2, #11
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	f7fe ff8c 	bl	800a00c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3324      	adds	r3, #36	; 0x24
 800b118:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b11a:	220b      	movs	r2, #11
 800b11c:	2120      	movs	r1, #32
 800b11e:	68b8      	ldr	r0, [r7, #8]
 800b120:	f7fe ff95 	bl	800a04e <mem_set>
	si = i = 0; ni = 8;
 800b124:	2300      	movs	r3, #0
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	61fb      	str	r3, [r7, #28]
 800b12c:	2308      	movs	r3, #8
 800b12e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	61fa      	str	r2, [r7, #28]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b13e:	7efb      	ldrb	r3, [r7, #27]
 800b140:	2b20      	cmp	r3, #32
 800b142:	d94e      	bls.n	800b1e2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b144:	7efb      	ldrb	r3, [r7, #27]
 800b146:	2b2f      	cmp	r3, #47	; 0x2f
 800b148:	d006      	beq.n	800b158 <create_name+0x54>
 800b14a:	7efb      	ldrb	r3, [r7, #27]
 800b14c:	2b5c      	cmp	r3, #92	; 0x5c
 800b14e:	d110      	bne.n	800b172 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b150:	e002      	b.n	800b158 <create_name+0x54>
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	3301      	adds	r3, #1
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	4413      	add	r3, r2
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2b2f      	cmp	r3, #47	; 0x2f
 800b162:	d0f6      	beq.n	800b152 <create_name+0x4e>
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	4413      	add	r3, r2
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b5c      	cmp	r3, #92	; 0x5c
 800b16e:	d0f0      	beq.n	800b152 <create_name+0x4e>
			break;
 800b170:	e038      	b.n	800b1e4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b172:	7efb      	ldrb	r3, [r7, #27]
 800b174:	2b2e      	cmp	r3, #46	; 0x2e
 800b176:	d003      	beq.n	800b180 <create_name+0x7c>
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d30c      	bcc.n	800b19a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2b0b      	cmp	r3, #11
 800b184:	d002      	beq.n	800b18c <create_name+0x88>
 800b186:	7efb      	ldrb	r3, [r7, #27]
 800b188:	2b2e      	cmp	r3, #46	; 0x2e
 800b18a:	d001      	beq.n	800b190 <create_name+0x8c>
 800b18c:	2306      	movs	r3, #6
 800b18e:	e044      	b.n	800b21a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b190:	2308      	movs	r3, #8
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	230b      	movs	r3, #11
 800b196:	617b      	str	r3, [r7, #20]
			continue;
 800b198:	e022      	b.n	800b1e0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b19a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	da04      	bge.n	800b1ac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b1a2:	7efb      	ldrb	r3, [r7, #27]
 800b1a4:	3b80      	subs	r3, #128	; 0x80
 800b1a6:	4a1f      	ldr	r2, [pc, #124]	; (800b224 <create_name+0x120>)
 800b1a8:	5cd3      	ldrb	r3, [r2, r3]
 800b1aa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b1ac:	7efb      	ldrb	r3, [r7, #27]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	481d      	ldr	r0, [pc, #116]	; (800b228 <create_name+0x124>)
 800b1b2:	f7fe ff8e 	bl	800a0d2 <chk_chr>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <create_name+0xbc>
 800b1bc:	2306      	movs	r3, #6
 800b1be:	e02c      	b.n	800b21a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b1c0:	7efb      	ldrb	r3, [r7, #27]
 800b1c2:	2b60      	cmp	r3, #96	; 0x60
 800b1c4:	d905      	bls.n	800b1d2 <create_name+0xce>
 800b1c6:	7efb      	ldrb	r3, [r7, #27]
 800b1c8:	2b7a      	cmp	r3, #122	; 0x7a
 800b1ca:	d802      	bhi.n	800b1d2 <create_name+0xce>
 800b1cc:	7efb      	ldrb	r3, [r7, #27]
 800b1ce:	3b20      	subs	r3, #32
 800b1d0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	613a      	str	r2, [r7, #16]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4413      	add	r3, r2
 800b1dc:	7efa      	ldrb	r2, [r7, #27]
 800b1de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b1e0:	e7a6      	b.n	800b130 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b1e2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	441a      	add	r2, r3
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <create_name+0xf4>
 800b1f4:	2306      	movs	r3, #6
 800b1f6:	e010      	b.n	800b21a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2be5      	cmp	r3, #229	; 0xe5
 800b1fe:	d102      	bne.n	800b206 <create_name+0x102>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2205      	movs	r2, #5
 800b204:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b206:	7efb      	ldrb	r3, [r7, #27]
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d801      	bhi.n	800b210 <create_name+0x10c>
 800b20c:	2204      	movs	r2, #4
 800b20e:	e000      	b.n	800b212 <create_name+0x10e>
 800b210:	2200      	movs	r2, #0
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	330b      	adds	r3, #11
 800b216:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b218:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	0800d040 	.word	0x0800d040
 800b228:	0800cfc8 	.word	0x0800cfc8

0800b22c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b240:	e002      	b.n	800b248 <follow_path+0x1c>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	3301      	adds	r3, #1
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b2f      	cmp	r3, #47	; 0x2f
 800b24e:	d0f8      	beq.n	800b242 <follow_path+0x16>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b5c      	cmp	r3, #92	; 0x5c
 800b256:	d0f4      	beq.n	800b242 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2200      	movs	r2, #0
 800b25c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b1f      	cmp	r3, #31
 800b264:	d80a      	bhi.n	800b27c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2280      	movs	r2, #128	; 0x80
 800b26a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b26e:	2100      	movs	r1, #0
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff fcdb 	bl	800ac2c <dir_sdi>
 800b276:	4603      	mov	r3, r0
 800b278:	75fb      	strb	r3, [r7, #23]
 800b27a:	e048      	b.n	800b30e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b27c:	463b      	mov	r3, r7
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7ff ff3f 	bl	800b104 <create_name>
 800b286:	4603      	mov	r3, r0
 800b288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d139      	bne.n	800b304 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff feb0 	bl	800aff6 <dir_find>
 800b296:	4603      	mov	r3, r0
 800b298:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00a      	beq.n	800b2be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	2b04      	cmp	r3, #4
 800b2ac:	d12c      	bne.n	800b308 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d127      	bne.n	800b308 <follow_path+0xdc>
 800b2b8:	2305      	movs	r3, #5
 800b2ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b2bc:	e024      	b.n	800b308 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2be:	7afb      	ldrb	r3, [r7, #11]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d121      	bne.n	800b30c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	799b      	ldrb	r3, [r3, #6]
 800b2cc:	f003 0310 	and.w	r3, r3, #16
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b2d4:	2305      	movs	r3, #5
 800b2d6:	75fb      	strb	r3, [r7, #23]
 800b2d8:	e019      	b.n	800b30e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	8992      	ldrh	r2, [r2, #12]
 800b2e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2ec:	fb02 f200 	mul.w	r2, r2, r0
 800b2f0:	1a9b      	subs	r3, r3, r2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7ff fe3e 	bl	800af78 <ld_clust>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b302:	e7bb      	b.n	800b27c <follow_path+0x50>
			if (res != FR_OK) break;
 800b304:	bf00      	nop
 800b306:	e002      	b.n	800b30e <follow_path+0xe2>
				break;
 800b308:	bf00      	nop
 800b30a:	e000      	b.n	800b30e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b30c:	bf00      	nop
			}
		}
	}

	return res;
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b320:	f04f 33ff 	mov.w	r3, #4294967295
 800b324:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d031      	beq.n	800b392 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	617b      	str	r3, [r7, #20]
 800b334:	e002      	b.n	800b33c <get_ldnumber+0x24>
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	3301      	adds	r3, #1
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b20      	cmp	r3, #32
 800b342:	d903      	bls.n	800b34c <get_ldnumber+0x34>
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b3a      	cmp	r3, #58	; 0x3a
 800b34a:	d1f4      	bne.n	800b336 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b3a      	cmp	r3, #58	; 0x3a
 800b352:	d11c      	bne.n	800b38e <get_ldnumber+0x76>
			tp = *path;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	60fa      	str	r2, [r7, #12]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	3b30      	subs	r3, #48	; 0x30
 800b364:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2b09      	cmp	r3, #9
 800b36a:	d80e      	bhi.n	800b38a <get_ldnumber+0x72>
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	429a      	cmp	r2, r3
 800b372:	d10a      	bne.n	800b38a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d107      	bne.n	800b38a <get_ldnumber+0x72>
					vol = (int)i;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	3301      	adds	r3, #1
 800b382:	617b      	str	r3, [r7, #20]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	e002      	b.n	800b394 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b38e:	2300      	movs	r3, #0
 800b390:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b392:	693b      	ldr	r3, [r7, #16]
}
 800b394:	4618      	mov	r0, r3
 800b396:	371c      	adds	r7, #28
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	70da      	strb	r2, [r3, #3]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7ff f854 	bl	800a468 <move_window>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <check_fs+0x2a>
 800b3c6:	2304      	movs	r3, #4
 800b3c8:	e038      	b.n	800b43c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3334      	adds	r3, #52	; 0x34
 800b3ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe fd98 	bl	8009f08 <ld_word>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d001      	beq.n	800b3e8 <check_fs+0x48>
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e029      	b.n	800b43c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3ee:	2be9      	cmp	r3, #233	; 0xe9
 800b3f0:	d009      	beq.n	800b406 <check_fs+0x66>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3f8:	2beb      	cmp	r3, #235	; 0xeb
 800b3fa:	d11e      	bne.n	800b43a <check_fs+0x9a>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b402:	2b90      	cmp	r3, #144	; 0x90
 800b404:	d119      	bne.n	800b43a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3334      	adds	r3, #52	; 0x34
 800b40a:	3336      	adds	r3, #54	; 0x36
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fe fd93 	bl	8009f38 <ld_dword>
 800b412:	4603      	mov	r3, r0
 800b414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b418:	4a0a      	ldr	r2, [pc, #40]	; (800b444 <check_fs+0xa4>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d101      	bne.n	800b422 <check_fs+0x82>
 800b41e:	2300      	movs	r3, #0
 800b420:	e00c      	b.n	800b43c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3334      	adds	r3, #52	; 0x34
 800b426:	3352      	adds	r3, #82	; 0x52
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fd85 	bl	8009f38 <ld_dword>
 800b42e:	4603      	mov	r3, r0
 800b430:	4a05      	ldr	r2, [pc, #20]	; (800b448 <check_fs+0xa8>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d101      	bne.n	800b43a <check_fs+0x9a>
 800b436:	2300      	movs	r3, #0
 800b438:	e000      	b.n	800b43c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b43a:	2302      	movs	r3, #2
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	00544146 	.word	0x00544146
 800b448:	33544146 	.word	0x33544146

0800b44c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b096      	sub	sp, #88	; 0x58
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	4613      	mov	r3, r2
 800b458:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7ff ff59 	bl	800b318 <get_ldnumber>
 800b466:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	da01      	bge.n	800b472 <find_volume+0x26>
 800b46e:	230b      	movs	r3, #11
 800b470:	e265      	b.n	800b93e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b472:	4ab0      	ldr	r2, [pc, #704]	; (800b734 <find_volume+0x2e8>)
 800b474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b47a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <find_volume+0x3a>
 800b482:	230c      	movs	r3, #12
 800b484:	e25b      	b.n	800b93e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b48a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b48c:	79fb      	ldrb	r3, [r7, #7]
 800b48e:	f023 0301 	bic.w	r3, r3, #1
 800b492:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01a      	beq.n	800b4d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	785b      	ldrb	r3, [r3, #1]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe fc93 	bl	8009dcc <disk_status>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b4ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4b0:	f003 0301 	and.w	r3, r3, #1
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10c      	bne.n	800b4d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d007      	beq.n	800b4ce <find_volume+0x82>
 800b4be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4c2:	f003 0304 	and.w	r3, r3, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	e237      	b.n	800b93e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e235      	b.n	800b93e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	785b      	ldrb	r3, [r3, #1]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fe fc8b 	bl	8009e00 <disk_initialize>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b4f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e21e      	b.n	800b93e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b500:	79fb      	ldrb	r3, [r7, #7]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <find_volume+0xca>
 800b506:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b50a:	f003 0304 	and.w	r3, r3, #4
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b512:	230a      	movs	r3, #10
 800b514:	e213      	b.n	800b93e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	7858      	ldrb	r0, [r3, #1]
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	330c      	adds	r3, #12
 800b51e:	461a      	mov	r2, r3
 800b520:	2102      	movs	r1, #2
 800b522:	f7fe fcd3 	bl	8009ecc <disk_ioctl>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <find_volume+0xe4>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e206      	b.n	800b93e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	899b      	ldrh	r3, [r3, #12]
 800b534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b538:	d80d      	bhi.n	800b556 <find_volume+0x10a>
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	899b      	ldrh	r3, [r3, #12]
 800b53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b542:	d308      	bcc.n	800b556 <find_volume+0x10a>
 800b544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b546:	899b      	ldrh	r3, [r3, #12]
 800b548:	461a      	mov	r2, r3
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	899b      	ldrh	r3, [r3, #12]
 800b54e:	3b01      	subs	r3, #1
 800b550:	4013      	ands	r3, r2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <find_volume+0x10e>
 800b556:	2301      	movs	r3, #1
 800b558:	e1f1      	b.n	800b93e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b55e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b562:	f7ff ff1d 	bl	800b3a0 <check_fs>
 800b566:	4603      	mov	r3, r0
 800b568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b56c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b570:	2b02      	cmp	r3, #2
 800b572:	d14b      	bne.n	800b60c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b574:	2300      	movs	r3, #0
 800b576:	643b      	str	r3, [r7, #64]	; 0x40
 800b578:	e01f      	b.n	800b5ba <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b588:	4413      	add	r3, r2
 800b58a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58e:	3304      	adds	r3, #4
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d006      	beq.n	800b5a4 <find_volume+0x158>
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	3308      	adds	r3, #8
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fccc 	bl	8009f38 <ld_dword>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	e000      	b.n	800b5a6 <find_volume+0x15a>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b5ae:	440b      	add	r3, r1
 800b5b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d9dc      	bls.n	800b57a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <find_volume+0x184>
 800b5ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b5d8:	4413      	add	r3, r2
 800b5da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b5de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d005      	beq.n	800b5f2 <find_volume+0x1a6>
 800b5e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5ea:	f7ff fed9 	bl	800b3a0 <check_fs>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	e000      	b.n	800b5f4 <find_volume+0x1a8>
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b5f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d905      	bls.n	800b60c <find_volume+0x1c0>
 800b600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b602:	3301      	adds	r3, #1
 800b604:	643b      	str	r3, [r7, #64]	; 0x40
 800b606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d9e1      	bls.n	800b5d0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b60c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b610:	2b04      	cmp	r3, #4
 800b612:	d101      	bne.n	800b618 <find_volume+0x1cc>
 800b614:	2301      	movs	r3, #1
 800b616:	e192      	b.n	800b93e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d901      	bls.n	800b624 <find_volume+0x1d8>
 800b620:	230d      	movs	r3, #13
 800b622:	e18c      	b.n	800b93e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b626:	3334      	adds	r3, #52	; 0x34
 800b628:	330b      	adds	r3, #11
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fc6c 	bl	8009f08 <ld_word>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	899b      	ldrh	r3, [r3, #12]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d001      	beq.n	800b640 <find_volume+0x1f4>
 800b63c:	230d      	movs	r3, #13
 800b63e:	e17e      	b.n	800b93e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	3334      	adds	r3, #52	; 0x34
 800b644:	3316      	adds	r3, #22
 800b646:	4618      	mov	r0, r3
 800b648:	f7fe fc5e 	bl	8009f08 <ld_word>
 800b64c:	4603      	mov	r3, r0
 800b64e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <find_volume+0x218>
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	3334      	adds	r3, #52	; 0x34
 800b65a:	3324      	adds	r3, #36	; 0x24
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fc6b 	bl	8009f38 <ld_dword>
 800b662:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b668:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b672:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	789b      	ldrb	r3, [r3, #2]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d005      	beq.n	800b688 <find_volume+0x23c>
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	789b      	ldrb	r3, [r3, #2]
 800b680:	2b02      	cmp	r3, #2
 800b682:	d001      	beq.n	800b688 <find_volume+0x23c>
 800b684:	230d      	movs	r3, #13
 800b686:	e15a      	b.n	800b93e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	789b      	ldrb	r3, [r3, #2]
 800b68c:	461a      	mov	r2, r3
 800b68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b690:	fb02 f303 	mul.w	r3, r2, r3
 800b694:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	895b      	ldrh	r3, [r3, #10]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d008      	beq.n	800b6bc <find_volume+0x270>
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ac:	895b      	ldrh	r3, [r3, #10]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b2:	895b      	ldrh	r3, [r3, #10]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <find_volume+0x274>
 800b6bc:	230d      	movs	r3, #13
 800b6be:	e13e      	b.n	800b93e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c2:	3334      	adds	r3, #52	; 0x34
 800b6c4:	3311      	adds	r3, #17
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fc1e 	bl	8009f08 <ld_word>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	891b      	ldrh	r3, [r3, #8]
 800b6d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6da:	8992      	ldrh	r2, [r2, #12]
 800b6dc:	0952      	lsrs	r2, r2, #5
 800b6de:	b292      	uxth	r2, r2
 800b6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6e4:	fb02 f201 	mul.w	r2, r2, r1
 800b6e8:	1a9b      	subs	r3, r3, r2
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <find_volume+0x2a8>
 800b6f0:	230d      	movs	r3, #13
 800b6f2:	e124      	b.n	800b93e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	3334      	adds	r3, #52	; 0x34
 800b6f8:	3313      	adds	r3, #19
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fe fc04 	bl	8009f08 <ld_word>
 800b700:	4603      	mov	r3, r0
 800b702:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b706:	2b00      	cmp	r3, #0
 800b708:	d106      	bne.n	800b718 <find_volume+0x2cc>
 800b70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70c:	3334      	adds	r3, #52	; 0x34
 800b70e:	3320      	adds	r3, #32
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe fc11 	bl	8009f38 <ld_dword>
 800b716:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71a:	3334      	adds	r3, #52	; 0x34
 800b71c:	330e      	adds	r3, #14
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fe fbf2 	bl	8009f08 <ld_word>
 800b724:	4603      	mov	r3, r0
 800b726:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d104      	bne.n	800b738 <find_volume+0x2ec>
 800b72e:	230d      	movs	r3, #13
 800b730:	e105      	b.n	800b93e <find_volume+0x4f2>
 800b732:	bf00      	nop
 800b734:	200000b8 	.word	0x200000b8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b738:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b73c:	4413      	add	r3, r2
 800b73e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b740:	8911      	ldrh	r1, [r2, #8]
 800b742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b744:	8992      	ldrh	r2, [r2, #12]
 800b746:	0952      	lsrs	r2, r2, #5
 800b748:	b292      	uxth	r2, r2
 800b74a:	fbb1 f2f2 	udiv	r2, r1, r2
 800b74e:	b292      	uxth	r2, r2
 800b750:	4413      	add	r3, r2
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b758:	429a      	cmp	r2, r3
 800b75a:	d201      	bcs.n	800b760 <find_volume+0x314>
 800b75c:	230d      	movs	r3, #13
 800b75e:	e0ee      	b.n	800b93e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b768:	8952      	ldrh	r2, [r2, #10]
 800b76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <find_volume+0x32e>
 800b776:	230d      	movs	r3, #13
 800b778:	e0e1      	b.n	800b93e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b77a:	2303      	movs	r3, #3
 800b77c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b786:	4293      	cmp	r3, r2
 800b788:	d802      	bhi.n	800b790 <find_volume+0x344>
 800b78a:	2302      	movs	r3, #2
 800b78c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b796:	4293      	cmp	r3, r2
 800b798:	d802      	bhi.n	800b7a0 <find_volume+0x354>
 800b79a:	2301      	movs	r3, #1
 800b79c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a2:	1c9a      	adds	r2, r3, #2
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7ac:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b7ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b7b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7b2:	441a      	add	r2, r3
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b7b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	441a      	add	r2, r3
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b7c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	d11e      	bne.n	800b808 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7cc:	3334      	adds	r3, #52	; 0x34
 800b7ce:	332a      	adds	r3, #42	; 0x2a
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe fb99 	bl	8009f08 <ld_word>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <find_volume+0x394>
 800b7dc:	230d      	movs	r3, #13
 800b7de:	e0ae      	b.n	800b93e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	891b      	ldrh	r3, [r3, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <find_volume+0x3a0>
 800b7e8:	230d      	movs	r3, #13
 800b7ea:	e0a8      	b.n	800b93e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	3334      	adds	r3, #52	; 0x34
 800b7f0:	332c      	adds	r3, #44	; 0x2c
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fba0 	bl	8009f38 <ld_dword>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	647b      	str	r3, [r7, #68]	; 0x44
 800b806:	e01f      	b.n	800b848 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	891b      	ldrh	r3, [r3, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <find_volume+0x3c8>
 800b810:	230d      	movs	r3, #13
 800b812:	e094      	b.n	800b93e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81a:	441a      	add	r2, r3
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b824:	2b02      	cmp	r3, #2
 800b826:	d103      	bne.n	800b830 <find_volume+0x3e4>
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	e00a      	b.n	800b846 <find_volume+0x3fa>
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	699a      	ldr	r2, [r3, #24]
 800b834:	4613      	mov	r3, r2
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	4413      	add	r3, r2
 800b83a:	085a      	lsrs	r2, r3, #1
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b846:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	69da      	ldr	r2, [r3, #28]
 800b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84e:	899b      	ldrh	r3, [r3, #12]
 800b850:	4619      	mov	r1, r3
 800b852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b854:	440b      	add	r3, r1
 800b856:	3b01      	subs	r3, #1
 800b858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b85a:	8989      	ldrh	r1, [r1, #12]
 800b85c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b860:	429a      	cmp	r2, r3
 800b862:	d201      	bcs.n	800b868 <find_volume+0x41c>
 800b864:	230d      	movs	r3, #13
 800b866:	e06a      	b.n	800b93e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	615a      	str	r2, [r3, #20]
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	695a      	ldr	r2, [r3, #20]
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87a:	2280      	movs	r2, #128	; 0x80
 800b87c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b87e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b882:	2b03      	cmp	r3, #3
 800b884:	d149      	bne.n	800b91a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	3334      	adds	r3, #52	; 0x34
 800b88a:	3330      	adds	r3, #48	; 0x30
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fb3b 	bl	8009f08 <ld_word>
 800b892:	4603      	mov	r3, r0
 800b894:	2b01      	cmp	r3, #1
 800b896:	d140      	bne.n	800b91a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b89a:	3301      	adds	r3, #1
 800b89c:	4619      	mov	r1, r3
 800b89e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8a0:	f7fe fde2 	bl	800a468 <move_window>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d137      	bne.n	800b91a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b2:	3334      	adds	r3, #52	; 0x34
 800b8b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe fb25 	bl	8009f08 <ld_word>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d127      	bne.n	800b91a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	3334      	adds	r3, #52	; 0x34
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fb32 	bl	8009f38 <ld_dword>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	4a1c      	ldr	r2, [pc, #112]	; (800b948 <find_volume+0x4fc>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d11e      	bne.n	800b91a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	3334      	adds	r3, #52	; 0x34
 800b8e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe fb27 	bl	8009f38 <ld_dword>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	4a17      	ldr	r2, [pc, #92]	; (800b94c <find_volume+0x500>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d113      	bne.n	800b91a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	3334      	adds	r3, #52	; 0x34
 800b8f6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe fb1c 	bl	8009f38 <ld_dword>
 800b900:	4602      	mov	r2, r0
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	3334      	adds	r3, #52	; 0x34
 800b90a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe fb12 	bl	8009f38 <ld_dword>
 800b914:	4602      	mov	r2, r0
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b920:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b922:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <find_volume+0x504>)
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	3301      	adds	r3, #1
 800b928:	b29a      	uxth	r2, r3
 800b92a:	4b09      	ldr	r3, [pc, #36]	; (800b950 <find_volume+0x504>)
 800b92c:	801a      	strh	r2, [r3, #0]
 800b92e:	4b08      	ldr	r3, [pc, #32]	; (800b950 <find_volume+0x504>)
 800b930:	881a      	ldrh	r2, [r3, #0]
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b936:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b938:	f7fe fd2e 	bl	800a398 <clear_lock>
#endif
	return FR_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3758      	adds	r7, #88	; 0x58
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	41615252 	.word	0x41615252
 800b94c:	61417272 	.word	0x61417272
 800b950:	200000bc 	.word	0x200000bc

0800b954 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b95e:	2309      	movs	r3, #9
 800b960:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01c      	beq.n	800b9a2 <validate+0x4e>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d018      	beq.n	800b9a2 <validate+0x4e>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d013      	beq.n	800b9a2 <validate+0x4e>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	889a      	ldrh	r2, [r3, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	88db      	ldrh	r3, [r3, #6]
 800b984:	429a      	cmp	r2, r3
 800b986:	d10c      	bne.n	800b9a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe fa1c 	bl	8009dcc <disk_status>
 800b994:	4603      	mov	r3, r0
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <validate+0x4e>
			res = FR_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d102      	bne.n	800b9ae <validate+0x5a>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	e000      	b.n	800b9b0 <validate+0x5c>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	6013      	str	r3, [r2, #0]
	return res;
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
	...

0800b9c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b9d2:	f107 0310 	add.w	r3, r7, #16
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff fc9e 	bl	800b318 <get_ldnumber>
 800b9dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	da01      	bge.n	800b9e8 <f_mount+0x28>
 800b9e4:	230b      	movs	r3, #11
 800b9e6:	e02b      	b.n	800ba40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b9e8:	4a17      	ldr	r2, [pc, #92]	; (800ba48 <f_mount+0x88>)
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d005      	beq.n	800ba04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b9f8:	69b8      	ldr	r0, [r7, #24]
 800b9fa:	f7fe fccd 	bl	800a398 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	2200      	movs	r2, #0
 800ba02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	490d      	ldr	r1, [pc, #52]	; (800ba48 <f_mount+0x88>)
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <f_mount+0x66>
 800ba20:	79fb      	ldrb	r3, [r7, #7]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d001      	beq.n	800ba2a <f_mount+0x6a>
 800ba26:	2300      	movs	r3, #0
 800ba28:	e00a      	b.n	800ba40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ba2a:	f107 010c 	add.w	r1, r7, #12
 800ba2e:	f107 0308 	add.w	r3, r7, #8
 800ba32:	2200      	movs	r2, #0
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fd09 	bl	800b44c <find_volume>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3720      	adds	r7, #32
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	200000b8 	.word	0x200000b8

0800ba4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b098      	sub	sp, #96	; 0x60
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <f_open+0x18>
 800ba60:	2309      	movs	r3, #9
 800ba62:	e1bb      	b.n	800bddc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ba6c:	79fa      	ldrb	r2, [r7, #7]
 800ba6e:	f107 0110 	add.w	r1, r7, #16
 800ba72:	f107 0308 	add.w	r3, r7, #8
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff fce8 	bl	800b44c <find_volume>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ba82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f040 819f 	bne.w	800bdca <f_open+0x37e>
		dj.obj.fs = fs;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	f107 0314 	add.w	r3, r7, #20
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fbc7 	bl	800b22c <follow_path>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800baa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d11a      	bne.n	800bae2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800baac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bab0:	b25b      	sxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	da03      	bge.n	800babe <f_open+0x72>
				res = FR_INVALID_NAME;
 800bab6:	2306      	movs	r3, #6
 800bab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800babc:	e011      	b.n	800bae2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800babe:	79fb      	ldrb	r3, [r7, #7]
 800bac0:	f023 0301 	bic.w	r3, r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	bf14      	ite	ne
 800bac8:	2301      	movne	r3, #1
 800baca:	2300      	moveq	r3, #0
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	461a      	mov	r2, r3
 800bad0:	f107 0314 	add.w	r3, r7, #20
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe fb16 	bl	800a108 <chk_lock>
 800badc:	4603      	mov	r3, r0
 800bade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	f003 031c 	and.w	r3, r3, #28
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d07f      	beq.n	800bbec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800baec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d017      	beq.n	800bb24 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800baf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	d10e      	bne.n	800bb1a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bafc:	f7fe fb60 	bl	800a1c0 <enq_lock>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d006      	beq.n	800bb14 <f_open+0xc8>
 800bb06:	f107 0314 	add.w	r3, r7, #20
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fac8 	bl	800b0a0 <dir_register>
 800bb10:	4603      	mov	r3, r0
 800bb12:	e000      	b.n	800bb16 <f_open+0xca>
 800bb14:	2312      	movs	r3, #18
 800bb16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	f043 0308 	orr.w	r3, r3, #8
 800bb20:	71fb      	strb	r3, [r7, #7]
 800bb22:	e010      	b.n	800bb46 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bb24:	7ebb      	ldrb	r3, [r7, #26]
 800bb26:	f003 0311 	and.w	r3, r3, #17
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <f_open+0xea>
					res = FR_DENIED;
 800bb2e:	2307      	movs	r3, #7
 800bb30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb34:	e007      	b.n	800bb46 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <f_open+0xfa>
 800bb40:	2308      	movs	r3, #8
 800bb42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bb46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d168      	bne.n	800bc20 <f_open+0x1d4>
 800bb4e:	79fb      	ldrb	r3, [r7, #7]
 800bb50:	f003 0308 	and.w	r3, r3, #8
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d063      	beq.n	800bc20 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bb58:	f7fb f93c 	bl	8006dd4 <get_fattime>
 800bb5c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb60:	330e      	adds	r3, #14
 800bb62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fa25 	bl	8009fb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6c:	3316      	adds	r3, #22
 800bb6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fe fa1f 	bl	8009fb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb78:	330b      	adds	r3, #11
 800bb7a:	2220      	movs	r2, #32
 800bb7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff f9f7 	bl	800af78 <ld_clust>
 800bb8a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb90:	2200      	movs	r2, #0
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7ff fa0f 	bl	800afb6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9a:	331c      	adds	r3, #28
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fa08 	bl	8009fb4 <st_dword>
					fs->wflag = 1;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	2201      	movs	r2, #1
 800bba8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bbaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d037      	beq.n	800bc20 <f_open+0x1d4>
						dw = fs->winsect;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bbb6:	f107 0314 	add.w	r3, r7, #20
 800bbba:	2200      	movs	r2, #0
 800bbbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe feff 	bl	800a9c2 <remove_chain>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bbca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d126      	bne.n	800bc20 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fc46 	bl	800a468 <move_window>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbe6:	3a01      	subs	r2, #1
 800bbe8:	611a      	str	r2, [r3, #16]
 800bbea:	e019      	b.n	800bc20 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bbec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d115      	bne.n	800bc20 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bbf4:	7ebb      	ldrb	r3, [r7, #26]
 800bbf6:	f003 0310 	and.w	r3, r3, #16
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bbfe:	2304      	movs	r3, #4
 800bc00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bc04:	e00c      	b.n	800bc20 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d007      	beq.n	800bc20 <f_open+0x1d4>
 800bc10:	7ebb      	ldrb	r3, [r7, #26]
 800bc12:	f003 0301 	and.w	r3, r3, #1
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <f_open+0x1d4>
						res = FR_DENIED;
 800bc1a:	2307      	movs	r3, #7
 800bc1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bc20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d128      	bne.n	800bc7a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	f003 0308 	and.w	r3, r3, #8
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc38:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bc42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc48:	79fb      	ldrb	r3, [r7, #7]
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bf14      	ite	ne
 800bc52:	2301      	movne	r3, #1
 800bc54:	2300      	moveq	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f107 0314 	add.w	r3, r7, #20
 800bc5e:	4611      	mov	r1, r2
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe facf 	bl	800a204 <inc_lock>
 800bc66:	4602      	mov	r2, r0
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d102      	bne.n	800bc7a <f_open+0x22e>
 800bc74:	2302      	movs	r3, #2
 800bc76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bc7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f040 80a3 	bne.w	800bdca <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff f974 	bl	800af78 <ld_clust>
 800bc90:	4602      	mov	r2, r0
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc98:	331c      	adds	r3, #28
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe f94c 	bl	8009f38 <ld_dword>
 800bca0:	4602      	mov	r2, r0
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	88da      	ldrh	r2, [r3, #6]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	79fa      	ldrb	r2, [r7, #7]
 800bcbe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3330      	adds	r3, #48	; 0x30
 800bcd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bcda:	2100      	movs	r1, #0
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe f9b6 	bl	800a04e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bce2:	79fb      	ldrb	r3, [r7, #7]
 800bce4:	f003 0320 	and.w	r3, r3, #32
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d06e      	beq.n	800bdca <f_open+0x37e>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d06a      	beq.n	800bdca <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	68da      	ldr	r2, [r3, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	895b      	ldrh	r3, [r3, #10]
 800bd00:	461a      	mov	r2, r3
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	899b      	ldrh	r3, [r3, #12]
 800bd06:	fb03 f302 	mul.w	r3, r3, r2
 800bd0a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	657b      	str	r3, [r7, #84]	; 0x54
 800bd18:	e016      	b.n	800bd48 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe fc5f 	bl	800a5e2 <get_fat>
 800bd24:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bd26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d802      	bhi.n	800bd32 <f_open+0x2e6>
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bd32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd38:	d102      	bne.n	800bd40 <f_open+0x2f4>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bd40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	657b      	str	r3, [r7, #84]	; 0x54
 800bd48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d103      	bne.n	800bd58 <f_open+0x30c>
 800bd50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d8e0      	bhi.n	800bd1a <f_open+0x2ce>
				}
				fp->clust = clst;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bd5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d131      	bne.n	800bdca <f_open+0x37e>
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd72:	fb02 f201 	mul.w	r2, r2, r1
 800bd76:	1a9b      	subs	r3, r3, r2
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d026      	beq.n	800bdca <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe fc0f 	bl	800a5a4 <clust2sect>
 800bd86:	6478      	str	r0, [r7, #68]	; 0x44
 800bd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d103      	bne.n	800bd96 <f_open+0x34a>
						res = FR_INT_ERR;
 800bd8e:	2302      	movs	r3, #2
 800bd90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd94:	e019      	b.n	800bdca <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	899b      	ldrh	r3, [r3, #12]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd9e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bda2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda4:	441a      	add	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	7858      	ldrb	r0, [r3, #1]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6a1a      	ldr	r2, [r3, #32]
 800bdb8:	2301      	movs	r3, #1
 800bdba:	f7fe f847 	bl	8009e4c <disk_read>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d002      	beq.n	800bdca <f_open+0x37e>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bdca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <f_open+0x38c>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bdd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3760      	adds	r7, #96	; 0x60
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08e      	sub	sp, #56	; 0x38
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f107 0214 	add.w	r2, r7, #20
 800be02:	4611      	mov	r1, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff fda5 	bl	800b954 <validate>
 800be0a:	4603      	mov	r3, r0
 800be0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800be10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be14:	2b00      	cmp	r3, #0
 800be16:	d107      	bne.n	800be28 <f_read+0x44>
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	7d5b      	ldrb	r3, [r3, #21]
 800be1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <f_read+0x4a>
 800be28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be2c:	e135      	b.n	800c09a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	7d1b      	ldrb	r3, [r3, #20]
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <f_read+0x5a>
 800be3a:	2307      	movs	r3, #7
 800be3c:	e12d      	b.n	800c09a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	68da      	ldr	r2, [r3, #12]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	429a      	cmp	r2, r3
 800be50:	f240 811e 	bls.w	800c090 <f_read+0x2ac>
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800be58:	e11a      	b.n	800c090 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	697a      	ldr	r2, [r7, #20]
 800be60:	8992      	ldrh	r2, [r2, #12]
 800be62:	fbb3 f1f2 	udiv	r1, r3, r2
 800be66:	fb02 f201 	mul.w	r2, r2, r1
 800be6a:	1a9b      	subs	r3, r3, r2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f040 80d5 	bne.w	800c01c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	8992      	ldrh	r2, [r2, #12]
 800be7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	8952      	ldrh	r2, [r2, #10]
 800be82:	3a01      	subs	r2, #1
 800be84:	4013      	ands	r3, r2
 800be86:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d12f      	bne.n	800beee <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d103      	bne.n	800be9e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	633b      	str	r3, [r7, #48]	; 0x30
 800be9c:	e013      	b.n	800bec6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d007      	beq.n	800beb6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	4619      	mov	r1, r3
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7fe fe85 	bl	800abbc <clmt_clust>
 800beb2:	6338      	str	r0, [r7, #48]	; 0x30
 800beb4:	e007      	b.n	800bec6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	4619      	mov	r1, r3
 800bebe:	4610      	mov	r0, r2
 800bec0:	f7fe fb8f 	bl	800a5e2 <get_fat>
 800bec4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d804      	bhi.n	800bed6 <f_read+0xf2>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2202      	movs	r2, #2
 800bed0:	755a      	strb	r2, [r3, #21]
 800bed2:	2302      	movs	r3, #2
 800bed4:	e0e1      	b.n	800c09a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bedc:	d104      	bne.n	800bee8 <f_read+0x104>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2201      	movs	r2, #1
 800bee2:	755a      	strb	r2, [r3, #21]
 800bee4:	2301      	movs	r3, #1
 800bee6:	e0d8      	b.n	800c09a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	4619      	mov	r1, r3
 800bef6:	4610      	mov	r0, r2
 800bef8:	f7fe fb54 	bl	800a5a4 <clust2sect>
 800befc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <f_read+0x12a>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2202      	movs	r2, #2
 800bf08:	755a      	strb	r2, [r3, #21]
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e0c5      	b.n	800c09a <f_read+0x2b6>
			sect += csect;
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	4413      	add	r3, r2
 800bf14:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	899b      	ldrh	r3, [r3, #12]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf22:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d041      	beq.n	800bfae <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	4413      	add	r3, r2
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	8952      	ldrh	r2, [r2, #10]
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d905      	bls.n	800bf44 <f_read+0x160>
					cc = fs->csize - csect;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	895b      	ldrh	r3, [r3, #10]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	7858      	ldrb	r0, [r3, #1]
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf4e:	f7fd ff7d 	bl	8009e4c <disk_read>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <f_read+0x17e>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	755a      	strb	r2, [r3, #21]
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e09b      	b.n	800c09a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	b25b      	sxtb	r3, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	da18      	bge.n	800bf9e <f_read+0x1ba>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6a1a      	ldr	r2, [r3, #32]
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d911      	bls.n	800bf9e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6a1a      	ldr	r2, [r3, #32]
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	8992      	ldrh	r2, [r2, #12]
 800bf86:	fb02 f303 	mul.w	r3, r2, r3
 800bf8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf8c:	18d0      	adds	r0, r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	899b      	ldrh	r3, [r3, #12]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	f7fe f837 	bl	800a00c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	899b      	ldrh	r3, [r3, #12]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	fb02 f303 	mul.w	r3, r2, r3
 800bfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bfac:	e05c      	b.n	800c068 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d02e      	beq.n	800c016 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	7d1b      	ldrb	r3, [r3, #20]
 800bfbc:	b25b      	sxtb	r3, r3
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	da18      	bge.n	800bff4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	7858      	ldrb	r0, [r3, #1]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6a1a      	ldr	r2, [r3, #32]
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	f7fd ff5b 	bl	8009e8c <disk_write>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <f_read+0x202>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	755a      	strb	r2, [r3, #21]
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e059      	b.n	800c09a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	7d1b      	ldrb	r3, [r3, #20]
 800bfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	7858      	ldrb	r0, [r3, #1]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bffe:	2301      	movs	r3, #1
 800c000:	69ba      	ldr	r2, [r7, #24]
 800c002:	f7fd ff23 	bl	8009e4c <disk_read>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <f_read+0x232>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2201      	movs	r2, #1
 800c010:	755a      	strb	r2, [r3, #21]
 800c012:	2301      	movs	r3, #1
 800c014:	e041      	b.n	800c09a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	899b      	ldrh	r3, [r3, #12]
 800c020:	4618      	mov	r0, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	699b      	ldr	r3, [r3, #24]
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	8992      	ldrh	r2, [r2, #12]
 800c02a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c02e:	fb02 f201 	mul.w	r2, r2, r1
 800c032:	1a9b      	subs	r3, r3, r2
 800c034:	1ac3      	subs	r3, r0, r3
 800c036:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d901      	bls.n	800c044 <f_read+0x260>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	699b      	ldr	r3, [r3, #24]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	8992      	ldrh	r2, [r2, #12]
 800c052:	fbb3 f0f2 	udiv	r0, r3, r2
 800c056:	fb02 f200 	mul.w	r2, r2, r0
 800c05a:	1a9b      	subs	r3, r3, r2
 800c05c:	440b      	add	r3, r1
 800c05e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c060:	4619      	mov	r1, r3
 800c062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c064:	f7fd ffd2 	bl	800a00c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06c:	4413      	add	r3, r2
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	699a      	ldr	r2, [r3, #24]
 800c074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c076:	441a      	add	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	619a      	str	r2, [r3, #24]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c082:	441a      	add	r2, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	f47f aee1 	bne.w	800be5a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3738      	adds	r7, #56	; 0x38
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b086      	sub	sp, #24
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f107 0208 	add.w	r2, r7, #8
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff fc4e 	bl	800b954 <validate>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d168      	bne.n	800c194 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	7d1b      	ldrb	r3, [r3, #20]
 800c0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d062      	beq.n	800c194 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	7d1b      	ldrb	r3, [r3, #20]
 800c0d2:	b25b      	sxtb	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	da15      	bge.n	800c104 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	7858      	ldrb	r0, [r3, #1]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a1a      	ldr	r2, [r3, #32]
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	f7fd fed0 	bl	8009e8c <disk_write>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <f_sync+0x54>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e04f      	b.n	800c196 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	7d1b      	ldrb	r3, [r3, #20]
 800c0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c104:	f7fa fe66 	bl	8006dd4 <get_fattime>
 800c108:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	4619      	mov	r1, r3
 800c112:	4610      	mov	r0, r2
 800c114:	f7fe f9a8 	bl	800a468 <move_window>
 800c118:	4603      	mov	r3, r0
 800c11a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d138      	bne.n	800c194 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c126:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	330b      	adds	r3, #11
 800c12c:	781a      	ldrb	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	330b      	adds	r3, #11
 800c132:	f042 0220 	orr.w	r2, r2, #32
 800c136:	b2d2      	uxtb	r2, r2
 800c138:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6818      	ldr	r0, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	461a      	mov	r2, r3
 800c144:	68f9      	ldr	r1, [r7, #12]
 800c146:	f7fe ff36 	bl	800afb6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f103 021c 	add.w	r2, r3, #28
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	4619      	mov	r1, r3
 800c156:	4610      	mov	r0, r2
 800c158:	f7fd ff2c 	bl	8009fb4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3316      	adds	r3, #22
 800c160:	6939      	ldr	r1, [r7, #16]
 800c162:	4618      	mov	r0, r3
 800c164:	f7fd ff26 	bl	8009fb4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3312      	adds	r3, #18
 800c16c:	2100      	movs	r1, #0
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fd ff05 	bl	8009f7e <st_word>
					fs->wflag = 1;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2201      	movs	r2, #1
 800c178:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fe f9a1 	bl	800a4c4 <sync_fs>
 800c182:	4603      	mov	r3, r0
 800c184:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7d1b      	ldrb	r3, [r3, #20]
 800c18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c194:	7dfb      	ldrb	r3, [r7, #23]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff ff7b 	bl	800c0a2 <f_sync>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c1b0:	7bfb      	ldrb	r3, [r7, #15]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d118      	bne.n	800c1e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f107 0208 	add.w	r2, r7, #8
 800c1bc:	4611      	mov	r1, r2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff fbc8 	bl	800b954 <validate>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10c      	bne.n	800c1e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe f8a4 	bl	800a320 <dec_lock>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d102      	bne.n	800c1e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b090      	sub	sp, #64	; 0x40
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f107 0208 	add.w	r2, r7, #8
 800c202:	4611      	mov	r1, r2
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff fba5 	bl	800b954 <validate>
 800c20a:	4603      	mov	r3, r0
 800c20c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c210:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <f_lseek+0x2e>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7d5b      	ldrb	r3, [r3, #21]
 800c21c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <f_lseek+0x3c>
 800c228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c22c:	e201      	b.n	800c632 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80d9 	beq.w	800c3ea <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23e:	d15a      	bne.n	800c2f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	627a      	str	r2, [r7, #36]	; 0x24
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	2302      	movs	r3, #2
 800c252:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d03a      	beq.n	800c2d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	2300      	movs	r3, #0
 800c266:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	3302      	adds	r3, #2
 800c26c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	3301      	adds	r3, #1
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fe f9b0 	bl	800a5e2 <get_fat>
 800c282:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	2b01      	cmp	r3, #1
 800c288:	d804      	bhi.n	800c294 <f_lseek+0xa2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2202      	movs	r2, #2
 800c28e:	755a      	strb	r2, [r3, #21]
 800c290:	2302      	movs	r3, #2
 800c292:	e1ce      	b.n	800c632 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29a:	d104      	bne.n	800c2a6 <f_lseek+0xb4>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	755a      	strb	r2, [r3, #21]
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e1c5      	b.n	800c632 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d0de      	beq.n	800c26e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d809      	bhi.n	800c2cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	1d1a      	adds	r2, r3, #4
 800c2bc:	627a      	str	r2, [r7, #36]	; 0x24
 800c2be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	1d1a      	adds	r2, r3, #4
 800c2c6:	627a      	str	r2, [r7, #36]	; 0x24
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d3c4      	bcc.n	800c260 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c2de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d803      	bhi.n	800c2ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	e19f      	b.n	800c62e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c2ee:	2311      	movs	r3, #17
 800c2f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c2f4:	e19b      	b.n	800c62e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d902      	bls.n	800c306 <f_lseek+0x114>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f000 818d 	beq.w	800c62e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	3b01      	subs	r3, #1
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7fe fc4e 	bl	800abbc <clmt_clust>
 800c320:	4602      	mov	r2, r0
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	4619      	mov	r1, r3
 800c32e:	4610      	mov	r0, r2
 800c330:	f7fe f938 	bl	800a5a4 <clust2sect>
 800c334:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <f_lseek+0x154>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2202      	movs	r2, #2
 800c340:	755a      	strb	r2, [r3, #21]
 800c342:	2302      	movs	r3, #2
 800c344:	e175      	b.n	800c632 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	3b01      	subs	r3, #1
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	8992      	ldrh	r2, [r2, #12]
 800c34e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	8952      	ldrh	r2, [r2, #10]
 800c356:	3a01      	subs	r2, #1
 800c358:	4013      	ands	r3, r2
 800c35a:	69ba      	ldr	r2, [r7, #24]
 800c35c:	4413      	add	r3, r2
 800c35e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	8992      	ldrh	r2, [r2, #12]
 800c368:	fbb3 f1f2 	udiv	r1, r3, r2
 800c36c:	fb02 f201 	mul.w	r2, r2, r1
 800c370:	1a9b      	subs	r3, r3, r2
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 815b 	beq.w	800c62e <f_lseek+0x43c>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a1b      	ldr	r3, [r3, #32]
 800c37c:	69ba      	ldr	r2, [r7, #24]
 800c37e:	429a      	cmp	r2, r3
 800c380:	f000 8155 	beq.w	800c62e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7d1b      	ldrb	r3, [r3, #20]
 800c388:	b25b      	sxtb	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	da18      	bge.n	800c3c0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	7858      	ldrb	r0, [r3, #1]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a1a      	ldr	r2, [r3, #32]
 800c39c:	2301      	movs	r3, #1
 800c39e:	f7fd fd75 	bl	8009e8c <disk_write>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <f_lseek+0x1c0>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	755a      	strb	r2, [r3, #21]
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e13f      	b.n	800c632 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7d1b      	ldrb	r3, [r3, #20]
 800c3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	7858      	ldrb	r0, [r3, #1]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	69ba      	ldr	r2, [r7, #24]
 800c3ce:	f7fd fd3d 	bl	8009e4c <disk_read>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d004      	beq.n	800c3e2 <f_lseek+0x1f0>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	755a      	strb	r2, [r3, #21]
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e127      	b.n	800c632 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	69ba      	ldr	r2, [r7, #24]
 800c3e6:	621a      	str	r2, [r3, #32]
 800c3e8:	e121      	b.n	800c62e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d908      	bls.n	800c406 <f_lseek+0x214>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	7d1b      	ldrb	r3, [r3, #20]
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c414:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 80b5 	beq.w	800c588 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	895b      	ldrh	r3, [r3, #10]
 800c422:	461a      	mov	r2, r3
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	899b      	ldrh	r3, [r3, #12]
 800c428:	fb03 f302 	mul.w	r3, r3, r2
 800c42c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d01b      	beq.n	800c46c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	1e5a      	subs	r2, r3, #1
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	1e59      	subs	r1, r3, #1
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c448:	429a      	cmp	r2, r3
 800c44a:	d30f      	bcc.n	800c46c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	1e5a      	subs	r2, r3, #1
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	425b      	negs	r3, r3
 800c454:	401a      	ands	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	69db      	ldr	r3, [r3, #28]
 800c468:	63bb      	str	r3, [r7, #56]	; 0x38
 800c46a:	e022      	b.n	800c4b2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	d119      	bne.n	800c4ac <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2100      	movs	r1, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe fb05 	bl	800aa8c <create_chain>
 800c482:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c486:	2b01      	cmp	r3, #1
 800c488:	d104      	bne.n	800c494 <f_lseek+0x2a2>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2202      	movs	r2, #2
 800c48e:	755a      	strb	r2, [r3, #21]
 800c490:	2302      	movs	r3, #2
 800c492:	e0ce      	b.n	800c632 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49a:	d104      	bne.n	800c4a6 <f_lseek+0x2b4>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	755a      	strb	r2, [r3, #21]
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e0c5      	b.n	800c632 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4aa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4b0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d067      	beq.n	800c588 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c4b8:	e03a      	b.n	800c530 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	603b      	str	r3, [r7, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	699a      	ldr	r2, [r3, #24]
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	441a      	add	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	7d1b      	ldrb	r3, [r3, #20]
 800c4d2:	f003 0302 	and.w	r3, r3, #2
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00b      	beq.n	800c4f2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe fad4 	bl	800aa8c <create_chain>
 800c4e4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d108      	bne.n	800c4fe <f_lseek+0x30c>
							ofs = 0; break;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	e022      	b.n	800c538 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe f873 	bl	800a5e2 <get_fat>
 800c4fc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c504:	d104      	bne.n	800c510 <f_lseek+0x31e>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	755a      	strb	r2, [r3, #21]
 800c50c:	2301      	movs	r3, #1
 800c50e:	e090      	b.n	800c632 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	2b01      	cmp	r3, #1
 800c514:	d904      	bls.n	800c520 <f_lseek+0x32e>
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d304      	bcc.n	800c52a <f_lseek+0x338>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2202      	movs	r2, #2
 800c524:	755a      	strb	r2, [r3, #21]
 800c526:	2302      	movs	r3, #2
 800c528:	e083      	b.n	800c632 <f_lseek+0x440>
					fp->clust = clst;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c52e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	429a      	cmp	r2, r3
 800c536:	d8c0      	bhi.n	800c4ba <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	699a      	ldr	r2, [r3, #24]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	441a      	add	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	899b      	ldrh	r3, [r3, #12]
 800c548:	461a      	mov	r2, r3
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c550:	fb02 f201 	mul.w	r2, r2, r1
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d016      	beq.n	800c588 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fe f820 	bl	800a5a4 <clust2sect>
 800c564:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d104      	bne.n	800c576 <f_lseek+0x384>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2202      	movs	r2, #2
 800c570:	755a      	strb	r2, [r3, #21]
 800c572:	2302      	movs	r3, #2
 800c574:	e05d      	b.n	800c632 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	899b      	ldrh	r3, [r3, #12]
 800c57a:	461a      	mov	r2, r3
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c584:	4413      	add	r3, r2
 800c586:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	699a      	ldr	r2, [r3, #24]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	429a      	cmp	r2, r3
 800c592:	d90a      	bls.n	800c5aa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	699a      	ldr	r2, [r3, #24]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	7d1b      	ldrb	r3, [r3, #20]
 800c5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	8992      	ldrh	r2, [r2, #12]
 800c5b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5b6:	fb02 f201 	mul.w	r2, r2, r1
 800c5ba:	1a9b      	subs	r3, r3, r2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d036      	beq.n	800c62e <f_lseek+0x43c>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d031      	beq.n	800c62e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	7d1b      	ldrb	r3, [r3, #20]
 800c5ce:	b25b      	sxtb	r3, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	da18      	bge.n	800c606 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	7858      	ldrb	r0, [r3, #1]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1a      	ldr	r2, [r3, #32]
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f7fd fc52 	bl	8009e8c <disk_write>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d004      	beq.n	800c5f8 <f_lseek+0x406>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	755a      	strb	r2, [r3, #21]
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e01c      	b.n	800c632 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	7d1b      	ldrb	r3, [r3, #20]
 800c5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c600:	b2da      	uxtb	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	7858      	ldrb	r0, [r3, #1]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c610:	2301      	movs	r3, #1
 800c612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c614:	f7fd fc1a 	bl	8009e4c <disk_read>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d004      	beq.n	800c628 <f_lseek+0x436>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	755a      	strb	r2, [r3, #21]
 800c624:	2301      	movs	r3, #1
 800c626:	e004      	b.n	800c632 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c62c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c62e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c632:	4618      	mov	r0, r3
 800c634:	3740      	adds	r7, #64	; 0x40
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
	...

0800c63c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4613      	mov	r3, r2
 800c648:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c64a:	2301      	movs	r3, #1
 800c64c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c652:	4b1f      	ldr	r3, [pc, #124]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c654:	7a5b      	ldrb	r3, [r3, #9]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d131      	bne.n	800c6c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c65c:	4b1c      	ldr	r3, [pc, #112]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c65e:	7a5b      	ldrb	r3, [r3, #9]
 800c660:	b2db      	uxtb	r3, r3
 800c662:	461a      	mov	r2, r3
 800c664:	4b1a      	ldr	r3, [pc, #104]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c666:	2100      	movs	r1, #0
 800c668:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c66a:	4b19      	ldr	r3, [pc, #100]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c66c:	7a5b      	ldrb	r3, [r3, #9]
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	4a17      	ldr	r2, [pc, #92]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c67a:	4b15      	ldr	r3, [pc, #84]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c67c:	7a5b      	ldrb	r3, [r3, #9]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	461a      	mov	r2, r3
 800c682:	4b13      	ldr	r3, [pc, #76]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c684:	4413      	add	r3, r2
 800c686:	79fa      	ldrb	r2, [r7, #7]
 800c688:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c68a:	4b11      	ldr	r3, [pc, #68]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c68c:	7a5b      	ldrb	r3, [r3, #9]
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	b2d1      	uxtb	r1, r2
 800c694:	4a0e      	ldr	r2, [pc, #56]	; (800c6d0 <FATFS_LinkDriverEx+0x94>)
 800c696:	7251      	strb	r1, [r2, #9]
 800c698:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c69a:	7dbb      	ldrb	r3, [r7, #22]
 800c69c:	3330      	adds	r3, #48	; 0x30
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	223a      	movs	r2, #58	; 0x3a
 800c6aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	3302      	adds	r3, #2
 800c6b0:	222f      	movs	r2, #47	; 0x2f
 800c6b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	3303      	adds	r3, #3
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	371c      	adds	r7, #28
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	200000e0 	.word	0x200000e0

0800c6d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c6de:	2200      	movs	r2, #0
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff ffaa 	bl	800c63c <FATFS_LinkDriverEx>
 800c6e8:	4603      	mov	r3, r0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	490e      	ldr	r1, [pc, #56]	; (800c734 <MX_USB_HOST_Init+0x40>)
 800c6fc:	480e      	ldr	r0, [pc, #56]	; (800c738 <MX_USB_HOST_Init+0x44>)
 800c6fe:	f7fc f80d 	bl	800871c <USBH_Init>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c708:	f7f4 fab0 	bl	8000c6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c70c:	490b      	ldr	r1, [pc, #44]	; (800c73c <MX_USB_HOST_Init+0x48>)
 800c70e:	480a      	ldr	r0, [pc, #40]	; (800c738 <MX_USB_HOST_Init+0x44>)
 800c710:	f7fc f892 	bl	8008838 <USBH_RegisterClass>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c71a:	f7f4 faa7 	bl	8000c6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c71e:	4806      	ldr	r0, [pc, #24]	; (800c738 <MX_USB_HOST_Init+0x44>)
 800c720:	f7fc f916 	bl	8008950 <USBH_Start>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c72a:	f7f4 fa9f 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c72e:	bf00      	nop
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	0800c755 	.word	0x0800c755
 800c738:	20009fc0 	.word	0x20009fc0
 800c73c:	2000000c 	.word	0x2000000c

0800c740 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c744:	4802      	ldr	r0, [pc, #8]	; (800c750 <MX_USB_HOST_Process+0x10>)
 800c746:	f7fc f913 	bl	8008970 <USBH_Process>
}
 800c74a:	bf00      	nop
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20009fc0 	.word	0x20009fc0

0800c754 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c760:	78fb      	ldrb	r3, [r7, #3]
 800c762:	3b01      	subs	r3, #1
 800c764:	2b04      	cmp	r3, #4
 800c766:	d819      	bhi.n	800c79c <USBH_UserProcess+0x48>
 800c768:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <USBH_UserProcess+0x1c>)
 800c76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c76e:	bf00      	nop
 800c770:	0800c79d 	.word	0x0800c79d
 800c774:	0800c78d 	.word	0x0800c78d
 800c778:	0800c79d 	.word	0x0800c79d
 800c77c:	0800c795 	.word	0x0800c795
 800c780:	0800c785 	.word	0x0800c785
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c784:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <USBH_UserProcess+0x58>)
 800c786:	2203      	movs	r2, #3
 800c788:	701a      	strb	r2, [r3, #0]
  break;
 800c78a:	e008      	b.n	800c79e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c78c:	4b07      	ldr	r3, [pc, #28]	; (800c7ac <USBH_UserProcess+0x58>)
 800c78e:	2202      	movs	r2, #2
 800c790:	701a      	strb	r2, [r3, #0]
  break;
 800c792:	e004      	b.n	800c79e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c794:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <USBH_UserProcess+0x58>)
 800c796:	2201      	movs	r2, #1
 800c798:	701a      	strb	r2, [r3, #0]
  break;
 800c79a:	e000      	b.n	800c79e <USBH_UserProcess+0x4a>

  default:
  break;
 800c79c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	200000ec 	.word	0x200000ec

0800c7b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b08a      	sub	sp, #40	; 0x28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7b8:	f107 0314 	add.w	r3, r7, #20
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	605a      	str	r2, [r3, #4]
 800c7c2:	609a      	str	r2, [r3, #8]
 800c7c4:	60da      	str	r2, [r3, #12]
 800c7c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7d0:	d147      	bne.n	800c862 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	613b      	str	r3, [r7, #16]
 800c7d6:	4b25      	ldr	r3, [pc, #148]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7da:	4a24      	ldr	r2, [pc, #144]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c7dc:	f043 0301 	orr.w	r3, r3, #1
 800c7e0:	6313      	str	r3, [r2, #48]	; 0x30
 800c7e2:	4b22      	ldr	r3, [pc, #136]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c7ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c7fc:	f107 0314 	add.w	r3, r7, #20
 800c800:	4619      	mov	r1, r3
 800c802:	481b      	ldr	r0, [pc, #108]	; (800c870 <HAL_HCD_MspInit+0xc0>)
 800c804:	f7f5 f968 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c808:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c80c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c80e:	2302      	movs	r3, #2
 800c810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c812:	2300      	movs	r3, #0
 800c814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c816:	2300      	movs	r3, #0
 800c818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c81a:	230a      	movs	r3, #10
 800c81c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c81e:	f107 0314 	add.w	r3, r7, #20
 800c822:	4619      	mov	r1, r3
 800c824:	4812      	ldr	r0, [pc, #72]	; (800c870 <HAL_HCD_MspInit+0xc0>)
 800c826:	f7f5 f957 	bl	8001ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c82a:	4b10      	ldr	r3, [pc, #64]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c82e:	4a0f      	ldr	r2, [pc, #60]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c834:	6353      	str	r3, [r2, #52]	; 0x34
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c83e:	4a0b      	ldr	r2, [pc, #44]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c844:	6453      	str	r3, [r2, #68]	; 0x44
 800c846:	4b09      	ldr	r3, [pc, #36]	; (800c86c <HAL_HCD_MspInit+0xbc>)
 800c848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c84a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c852:	2200      	movs	r2, #0
 800c854:	2100      	movs	r1, #0
 800c856:	2043      	movs	r0, #67	; 0x43
 800c858:	f7f4 fd97 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c85c:	2043      	movs	r0, #67	; 0x43
 800c85e:	f7f4 fdb0 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c862:	bf00      	nop
 800c864:	3728      	adds	r7, #40	; 0x28
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	40023800 	.word	0x40023800
 800c870:	40020000 	.word	0x40020000

0800c874 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c882:	4618      	mov	r0, r3
 800c884:	f7fc fc47 	bl	8009116 <USBH_LL_IncTimer>
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fc fc7f 	bl	80091a2 <USBH_LL_Connect>
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fc fc88 	bl	80091d0 <USBH_LL_Disconnect>
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	70fb      	strb	r3, [r7, #3]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fc fc39 	bl	800916a <USBH_LL_PortEnabled>
} 
 800c8f8:	bf00      	nop
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fc fc39 	bl	8009186 <USBH_LL_PortDisabled>
} 
 800c914:	bf00      	nop
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d12a      	bne.n	800c984 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c92e:	4a18      	ldr	r2, [pc, #96]	; (800c990 <USBH_LL_Init+0x74>)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a15      	ldr	r2, [pc, #84]	; (800c990 <USBH_LL_Init+0x74>)
 800c93a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c93e:	4b14      	ldr	r3, [pc, #80]	; (800c990 <USBH_LL_Init+0x74>)
 800c940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c944:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c946:	4b12      	ldr	r3, [pc, #72]	; (800c990 <USBH_LL_Init+0x74>)
 800c948:	2208      	movs	r2, #8
 800c94a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c94c:	4b10      	ldr	r3, [pc, #64]	; (800c990 <USBH_LL_Init+0x74>)
 800c94e:	2201      	movs	r2, #1
 800c950:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c952:	4b0f      	ldr	r3, [pc, #60]	; (800c990 <USBH_LL_Init+0x74>)
 800c954:	2200      	movs	r2, #0
 800c956:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c958:	4b0d      	ldr	r3, [pc, #52]	; (800c990 <USBH_LL_Init+0x74>)
 800c95a:	2202      	movs	r2, #2
 800c95c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c95e:	4b0c      	ldr	r3, [pc, #48]	; (800c990 <USBH_LL_Init+0x74>)
 800c960:	2200      	movs	r2, #0
 800c962:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c964:	480a      	ldr	r0, [pc, #40]	; (800c990 <USBH_LL_Init+0x74>)
 800c966:	f7f5 fa87 	bl	8001e78 <HAL_HCD_Init>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d001      	beq.n	800c974 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c970:	f7f4 f97c 	bl	8000c6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c974:	4806      	ldr	r0, [pc, #24]	; (800c990 <USBH_LL_Init+0x74>)
 800c976:	f7f5 fe8b 	bl	8002690 <HAL_HCD_GetCurrentFrame>
 800c97a:	4603      	mov	r3, r0
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7fc fbba 	bl	80090f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	2000a398 	.word	0x2000a398

0800c994 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7f5 fdf8 	bl	80025a0 <HAL_HCD_Start>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 f992 	bl	800cce0 <USBH_Get_USB_Status>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c9c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f5 fe00 	bl	80025e6 <HAL_HCD_Stop>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9ea:	7bfb      	ldrb	r3, [r7, #15]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f977 	bl	800cce0 <USBH_Get_USB_Status>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7f5 fe4a 	bl	80026ac <HAL_HCD_GetCurrentSpeed>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d00c      	beq.n	800ca38 <USBH_LL_GetSpeed+0x38>
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d80d      	bhi.n	800ca3e <USBH_LL_GetSpeed+0x3e>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d002      	beq.n	800ca2c <USBH_LL_GetSpeed+0x2c>
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d003      	beq.n	800ca32 <USBH_LL_GetSpeed+0x32>
 800ca2a:	e008      	b.n	800ca3e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca30:	e008      	b.n	800ca44 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ca32:	2301      	movs	r3, #1
 800ca34:	73fb      	strb	r3, [r7, #15]
    break;
 800ca36:	e005      	b.n	800ca44 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ca38:	2302      	movs	r3, #2
 800ca3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca3c:	e002      	b.n	800ca44 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	73fb      	strb	r3, [r7, #15]
    break;
 800ca42:	bf00      	nop
  }
  return  speed;
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7f5 fddb 	bl	8002620 <HAL_HCD_ResetPort>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 f935 	bl	800cce0 <USBH_Get_USB_Status>
 800ca76:	4603      	mov	r3, r0
 800ca78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ca7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca96:	78fa      	ldrb	r2, [r7, #3]
 800ca98:	4611      	mov	r1, r2
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f5 fde3 	bl	8002666 <HAL_HCD_HC_GetXferCount>
 800caa0:	4603      	mov	r3, r0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800caaa:	b590      	push	{r4, r7, lr}
 800caac:	b089      	sub	sp, #36	; 0x24
 800caae:	af04      	add	r7, sp, #16
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	4608      	mov	r0, r1
 800cab4:	4611      	mov	r1, r2
 800cab6:	461a      	mov	r2, r3
 800cab8:	4603      	mov	r3, r0
 800caba:	70fb      	strb	r3, [r7, #3]
 800cabc:	460b      	mov	r3, r1
 800cabe:	70bb      	strb	r3, [r7, #2]
 800cac0:	4613      	mov	r3, r2
 800cac2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cad2:	787c      	ldrb	r4, [r7, #1]
 800cad4:	78ba      	ldrb	r2, [r7, #2]
 800cad6:	78f9      	ldrb	r1, [r7, #3]
 800cad8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	4623      	mov	r3, r4
 800caea:	f7f5 fa27 	bl	8001f3c <HAL_HCD_HC_Init>
 800caee:	4603      	mov	r3, r0
 800caf0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 f8f3 	bl	800cce0 <USBH_Get_USB_Status>
 800cafa:	4603      	mov	r3, r0
 800cafc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd90      	pop	{r4, r7, pc}

0800cb08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb22:	78fa      	ldrb	r2, [r7, #3]
 800cb24:	4611      	mov	r1, r2
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7f5 faa0 	bl	800206c <HAL_HCD_HC_Halt>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 f8d4 	bl	800cce0 <USBH_Get_USB_Status>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cb46:	b590      	push	{r4, r7, lr}
 800cb48:	b089      	sub	sp, #36	; 0x24
 800cb4a:	af04      	add	r7, sp, #16
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	4608      	mov	r0, r1
 800cb50:	4611      	mov	r1, r2
 800cb52:	461a      	mov	r2, r3
 800cb54:	4603      	mov	r3, r0
 800cb56:	70fb      	strb	r3, [r7, #3]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70bb      	strb	r3, [r7, #2]
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cb6e:	787c      	ldrb	r4, [r7, #1]
 800cb70:	78ba      	ldrb	r2, [r7, #2]
 800cb72:	78f9      	ldrb	r1, [r7, #3]
 800cb74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb7c:	9302      	str	r3, [sp, #8]
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb86:	9300      	str	r3, [sp, #0]
 800cb88:	4623      	mov	r3, r4
 800cb8a:	f7f5 fa93 	bl	80020b4 <HAL_HCD_HC_SubmitRequest>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	4618      	mov	r0, r3
 800cb96:	f000 f8a3 	bl	800cce0 <USBH_Get_USB_Status>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd90      	pop	{r4, r7, pc}

0800cba8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbba:	78fa      	ldrb	r2, [r7, #3]
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7f5 fd3c 	bl	800263c <HAL_HCD_HC_GetURBState>
 800cbc4:	4603      	mov	r3, r0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d103      	bne.n	800cbec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cbe4:	78fb      	ldrb	r3, [r7, #3]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 f8a6 	bl	800cd38 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cbec:	20c8      	movs	r0, #200	; 0xc8
 800cbee:	f7f4 facd 	bl	800118c <HAL_Delay>
  return USBH_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	460b      	mov	r3, r1
 800cc06:	70fb      	strb	r3, [r7, #3]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc12:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cc14:	78fa      	ldrb	r2, [r7, #3]
 800cc16:	68f9      	ldr	r1, [r7, #12]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	440b      	add	r3, r1
 800cc22:	333b      	adds	r3, #59	; 0x3b
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00a      	beq.n	800cc40 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cc2a:	78fa      	ldrb	r2, [r7, #3]
 800cc2c:	68f9      	ldr	r1, [r7, #12]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4413      	add	r3, r2
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	440b      	add	r3, r1
 800cc38:	3350      	adds	r3, #80	; 0x50
 800cc3a:	78ba      	ldrb	r2, [r7, #2]
 800cc3c:	701a      	strb	r2, [r3, #0]
 800cc3e:	e009      	b.n	800cc54 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cc40:	78fa      	ldrb	r2, [r7, #3]
 800cc42:	68f9      	ldr	r1, [r7, #12]
 800cc44:	4613      	mov	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	00db      	lsls	r3, r3, #3
 800cc4c:	440b      	add	r3, r1
 800cc4e:	3351      	adds	r3, #81	; 0x51
 800cc50:	78ba      	ldrb	r2, [r7, #2]
 800cc52:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr

0800cc62 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc62:	b480      	push	{r7}
 800cc64:	b085      	sub	sp, #20
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc78:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800cc7a:	78fa      	ldrb	r2, [r7, #3]
 800cc7c:	68b9      	ldr	r1, [r7, #8]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	440b      	add	r3, r1
 800cc88:	333b      	adds	r3, #59	; 0x3b
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800cc90:	78fa      	ldrb	r2, [r7, #3]
 800cc92:	68b9      	ldr	r1, [r7, #8]
 800cc94:	4613      	mov	r3, r2
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4413      	add	r3, r2
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	440b      	add	r3, r1
 800cc9e:	3350      	adds	r3, #80	; 0x50
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	73fb      	strb	r3, [r7, #15]
 800cca4:	e009      	b.n	800ccba <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800cca6:	78fa      	ldrb	r2, [r7, #3]
 800cca8:	68b9      	ldr	r1, [r7, #8]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4413      	add	r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	440b      	add	r3, r1
 800ccb4:	3351      	adds	r3, #81	; 0x51
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3714      	adds	r7, #20
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7f4 fa5b 	bl	800118c <HAL_Delay>
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	4603      	mov	r3, r0
 800cce8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccee:	79fb      	ldrb	r3, [r7, #7]
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d817      	bhi.n	800cd24 <USBH_Get_USB_Status+0x44>
 800ccf4:	a201      	add	r2, pc, #4	; (adr r2, 800ccfc <USBH_Get_USB_Status+0x1c>)
 800ccf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfa:	bf00      	nop
 800ccfc:	0800cd0d 	.word	0x0800cd0d
 800cd00:	0800cd13 	.word	0x0800cd13
 800cd04:	0800cd19 	.word	0x0800cd19
 800cd08:	0800cd1f 	.word	0x0800cd1f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd10:	e00b      	b.n	800cd2a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cd12:	2302      	movs	r3, #2
 800cd14:	73fb      	strb	r3, [r7, #15]
    break;
 800cd16:	e008      	b.n	800cd2a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1c:	e005      	b.n	800cd2a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cd1e:	2302      	movs	r3, #2
 800cd20:	73fb      	strb	r3, [r7, #15]
    break;
 800cd22:	e002      	b.n	800cd2a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cd24:	2302      	movs	r3, #2
 800cd26:	73fb      	strb	r3, [r7, #15]
    break;
 800cd28:	bf00      	nop
  }
  return usb_status;
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800cd42:	79fb      	ldrb	r3, [r7, #7]
 800cd44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cd46:	79fb      	ldrb	r3, [r7, #7]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	73fb      	strb	r3, [r7, #15]
 800cd50:	e001      	b.n	800cd56 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cd52:	2300      	movs	r3, #0
 800cd54:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	4803      	ldr	r0, [pc, #12]	; (800cd6c <MX_DriverVbusFS+0x34>)
 800cd5e:	f7f5 f857 	bl	8001e10 <HAL_GPIO_WritePin>
}
 800cd62:	bf00      	nop
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	40020800 	.word	0x40020800

0800cd70 <__errno>:
 800cd70:	4b01      	ldr	r3, [pc, #4]	; (800cd78 <__errno+0x8>)
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	2000002c 	.word	0x2000002c

0800cd7c <__libc_init_array>:
 800cd7c:	b570      	push	{r4, r5, r6, lr}
 800cd7e:	4d0d      	ldr	r5, [pc, #52]	; (800cdb4 <__libc_init_array+0x38>)
 800cd80:	4c0d      	ldr	r4, [pc, #52]	; (800cdb8 <__libc_init_array+0x3c>)
 800cd82:	1b64      	subs	r4, r4, r5
 800cd84:	10a4      	asrs	r4, r4, #2
 800cd86:	2600      	movs	r6, #0
 800cd88:	42a6      	cmp	r6, r4
 800cd8a:	d109      	bne.n	800cda0 <__libc_init_array+0x24>
 800cd8c:	4d0b      	ldr	r5, [pc, #44]	; (800cdbc <__libc_init_array+0x40>)
 800cd8e:	4c0c      	ldr	r4, [pc, #48]	; (800cdc0 <__libc_init_array+0x44>)
 800cd90:	f000 f906 	bl	800cfa0 <_init>
 800cd94:	1b64      	subs	r4, r4, r5
 800cd96:	10a4      	asrs	r4, r4, #2
 800cd98:	2600      	movs	r6, #0
 800cd9a:	42a6      	cmp	r6, r4
 800cd9c:	d105      	bne.n	800cdaa <__libc_init_array+0x2e>
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
 800cda0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cda4:	4798      	blx	r3
 800cda6:	3601      	adds	r6, #1
 800cda8:	e7ee      	b.n	800cd88 <__libc_init_array+0xc>
 800cdaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdae:	4798      	blx	r3
 800cdb0:	3601      	adds	r6, #1
 800cdb2:	e7f2      	b.n	800cd9a <__libc_init_array+0x1e>
 800cdb4:	0800d0c8 	.word	0x0800d0c8
 800cdb8:	0800d0c8 	.word	0x0800d0c8
 800cdbc:	0800d0c8 	.word	0x0800d0c8
 800cdc0:	0800d0cc 	.word	0x0800d0cc

0800cdc4 <malloc>:
 800cdc4:	4b02      	ldr	r3, [pc, #8]	; (800cdd0 <malloc+0xc>)
 800cdc6:	4601      	mov	r1, r0
 800cdc8:	6818      	ldr	r0, [r3, #0]
 800cdca:	f000 b871 	b.w	800ceb0 <_malloc_r>
 800cdce:	bf00      	nop
 800cdd0:	2000002c 	.word	0x2000002c

0800cdd4 <free>:
 800cdd4:	4b02      	ldr	r3, [pc, #8]	; (800cde0 <free+0xc>)
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	6818      	ldr	r0, [r3, #0]
 800cdda:	f000 b819 	b.w	800ce10 <_free_r>
 800cdde:	bf00      	nop
 800cde0:	2000002c 	.word	0x2000002c

0800cde4 <memcpy>:
 800cde4:	440a      	add	r2, r1
 800cde6:	4291      	cmp	r1, r2
 800cde8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdec:	d100      	bne.n	800cdf0 <memcpy+0xc>
 800cdee:	4770      	bx	lr
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdfa:	4291      	cmp	r1, r2
 800cdfc:	d1f9      	bne.n	800cdf2 <memcpy+0xe>
 800cdfe:	bd10      	pop	{r4, pc}

0800ce00 <memset>:
 800ce00:	4402      	add	r2, r0
 800ce02:	4603      	mov	r3, r0
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d100      	bne.n	800ce0a <memset+0xa>
 800ce08:	4770      	bx	lr
 800ce0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce0e:	e7f9      	b.n	800ce04 <memset+0x4>

0800ce10 <_free_r>:
 800ce10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce12:	2900      	cmp	r1, #0
 800ce14:	d048      	beq.n	800cea8 <_free_r+0x98>
 800ce16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce1a:	9001      	str	r0, [sp, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ce22:	bfb8      	it	lt
 800ce24:	18e4      	addlt	r4, r4, r3
 800ce26:	f000 f8ad 	bl	800cf84 <__malloc_lock>
 800ce2a:	4a20      	ldr	r2, [pc, #128]	; (800ceac <_free_r+0x9c>)
 800ce2c:	9801      	ldr	r0, [sp, #4]
 800ce2e:	6813      	ldr	r3, [r2, #0]
 800ce30:	4615      	mov	r5, r2
 800ce32:	b933      	cbnz	r3, 800ce42 <_free_r+0x32>
 800ce34:	6063      	str	r3, [r4, #4]
 800ce36:	6014      	str	r4, [r2, #0]
 800ce38:	b003      	add	sp, #12
 800ce3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce3e:	f000 b8a7 	b.w	800cf90 <__malloc_unlock>
 800ce42:	42a3      	cmp	r3, r4
 800ce44:	d90b      	bls.n	800ce5e <_free_r+0x4e>
 800ce46:	6821      	ldr	r1, [r4, #0]
 800ce48:	1862      	adds	r2, r4, r1
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	bf04      	itt	eq
 800ce4e:	681a      	ldreq	r2, [r3, #0]
 800ce50:	685b      	ldreq	r3, [r3, #4]
 800ce52:	6063      	str	r3, [r4, #4]
 800ce54:	bf04      	itt	eq
 800ce56:	1852      	addeq	r2, r2, r1
 800ce58:	6022      	streq	r2, [r4, #0]
 800ce5a:	602c      	str	r4, [r5, #0]
 800ce5c:	e7ec      	b.n	800ce38 <_free_r+0x28>
 800ce5e:	461a      	mov	r2, r3
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	b10b      	cbz	r3, 800ce68 <_free_r+0x58>
 800ce64:	42a3      	cmp	r3, r4
 800ce66:	d9fa      	bls.n	800ce5e <_free_r+0x4e>
 800ce68:	6811      	ldr	r1, [r2, #0]
 800ce6a:	1855      	adds	r5, r2, r1
 800ce6c:	42a5      	cmp	r5, r4
 800ce6e:	d10b      	bne.n	800ce88 <_free_r+0x78>
 800ce70:	6824      	ldr	r4, [r4, #0]
 800ce72:	4421      	add	r1, r4
 800ce74:	1854      	adds	r4, r2, r1
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	6011      	str	r1, [r2, #0]
 800ce7a:	d1dd      	bne.n	800ce38 <_free_r+0x28>
 800ce7c:	681c      	ldr	r4, [r3, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	6053      	str	r3, [r2, #4]
 800ce82:	4421      	add	r1, r4
 800ce84:	6011      	str	r1, [r2, #0]
 800ce86:	e7d7      	b.n	800ce38 <_free_r+0x28>
 800ce88:	d902      	bls.n	800ce90 <_free_r+0x80>
 800ce8a:	230c      	movs	r3, #12
 800ce8c:	6003      	str	r3, [r0, #0]
 800ce8e:	e7d3      	b.n	800ce38 <_free_r+0x28>
 800ce90:	6825      	ldr	r5, [r4, #0]
 800ce92:	1961      	adds	r1, r4, r5
 800ce94:	428b      	cmp	r3, r1
 800ce96:	bf04      	itt	eq
 800ce98:	6819      	ldreq	r1, [r3, #0]
 800ce9a:	685b      	ldreq	r3, [r3, #4]
 800ce9c:	6063      	str	r3, [r4, #4]
 800ce9e:	bf04      	itt	eq
 800cea0:	1949      	addeq	r1, r1, r5
 800cea2:	6021      	streq	r1, [r4, #0]
 800cea4:	6054      	str	r4, [r2, #4]
 800cea6:	e7c7      	b.n	800ce38 <_free_r+0x28>
 800cea8:	b003      	add	sp, #12
 800ceaa:	bd30      	pop	{r4, r5, pc}
 800ceac:	200000f0 	.word	0x200000f0

0800ceb0 <_malloc_r>:
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	1ccd      	adds	r5, r1, #3
 800ceb4:	f025 0503 	bic.w	r5, r5, #3
 800ceb8:	3508      	adds	r5, #8
 800ceba:	2d0c      	cmp	r5, #12
 800cebc:	bf38      	it	cc
 800cebe:	250c      	movcc	r5, #12
 800cec0:	2d00      	cmp	r5, #0
 800cec2:	4606      	mov	r6, r0
 800cec4:	db01      	blt.n	800ceca <_malloc_r+0x1a>
 800cec6:	42a9      	cmp	r1, r5
 800cec8:	d903      	bls.n	800ced2 <_malloc_r+0x22>
 800ceca:	230c      	movs	r3, #12
 800cecc:	6033      	str	r3, [r6, #0]
 800cece:	2000      	movs	r0, #0
 800ced0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced2:	f000 f857 	bl	800cf84 <__malloc_lock>
 800ced6:	4921      	ldr	r1, [pc, #132]	; (800cf5c <_malloc_r+0xac>)
 800ced8:	680a      	ldr	r2, [r1, #0]
 800ceda:	4614      	mov	r4, r2
 800cedc:	b99c      	cbnz	r4, 800cf06 <_malloc_r+0x56>
 800cede:	4f20      	ldr	r7, [pc, #128]	; (800cf60 <_malloc_r+0xb0>)
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	b923      	cbnz	r3, 800ceee <_malloc_r+0x3e>
 800cee4:	4621      	mov	r1, r4
 800cee6:	4630      	mov	r0, r6
 800cee8:	f000 f83c 	bl	800cf64 <_sbrk_r>
 800ceec:	6038      	str	r0, [r7, #0]
 800ceee:	4629      	mov	r1, r5
 800cef0:	4630      	mov	r0, r6
 800cef2:	f000 f837 	bl	800cf64 <_sbrk_r>
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	d123      	bne.n	800cf42 <_malloc_r+0x92>
 800cefa:	230c      	movs	r3, #12
 800cefc:	6033      	str	r3, [r6, #0]
 800cefe:	4630      	mov	r0, r6
 800cf00:	f000 f846 	bl	800cf90 <__malloc_unlock>
 800cf04:	e7e3      	b.n	800cece <_malloc_r+0x1e>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	1b5b      	subs	r3, r3, r5
 800cf0a:	d417      	bmi.n	800cf3c <_malloc_r+0x8c>
 800cf0c:	2b0b      	cmp	r3, #11
 800cf0e:	d903      	bls.n	800cf18 <_malloc_r+0x68>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	441c      	add	r4, r3
 800cf14:	6025      	str	r5, [r4, #0]
 800cf16:	e004      	b.n	800cf22 <_malloc_r+0x72>
 800cf18:	6863      	ldr	r3, [r4, #4]
 800cf1a:	42a2      	cmp	r2, r4
 800cf1c:	bf0c      	ite	eq
 800cf1e:	600b      	streq	r3, [r1, #0]
 800cf20:	6053      	strne	r3, [r2, #4]
 800cf22:	4630      	mov	r0, r6
 800cf24:	f000 f834 	bl	800cf90 <__malloc_unlock>
 800cf28:	f104 000b 	add.w	r0, r4, #11
 800cf2c:	1d23      	adds	r3, r4, #4
 800cf2e:	f020 0007 	bic.w	r0, r0, #7
 800cf32:	1ac2      	subs	r2, r0, r3
 800cf34:	d0cc      	beq.n	800ced0 <_malloc_r+0x20>
 800cf36:	1a1b      	subs	r3, r3, r0
 800cf38:	50a3      	str	r3, [r4, r2]
 800cf3a:	e7c9      	b.n	800ced0 <_malloc_r+0x20>
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	6864      	ldr	r4, [r4, #4]
 800cf40:	e7cc      	b.n	800cedc <_malloc_r+0x2c>
 800cf42:	1cc4      	adds	r4, r0, #3
 800cf44:	f024 0403 	bic.w	r4, r4, #3
 800cf48:	42a0      	cmp	r0, r4
 800cf4a:	d0e3      	beq.n	800cf14 <_malloc_r+0x64>
 800cf4c:	1a21      	subs	r1, r4, r0
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f000 f808 	bl	800cf64 <_sbrk_r>
 800cf54:	3001      	adds	r0, #1
 800cf56:	d1dd      	bne.n	800cf14 <_malloc_r+0x64>
 800cf58:	e7cf      	b.n	800cefa <_malloc_r+0x4a>
 800cf5a:	bf00      	nop
 800cf5c:	200000f0 	.word	0x200000f0
 800cf60:	200000f4 	.word	0x200000f4

0800cf64 <_sbrk_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d06      	ldr	r5, [pc, #24]	; (800cf80 <_sbrk_r+0x1c>)
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	f7f4 f82e 	bl	8000fd0 <_sbrk>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d102      	bne.n	800cf7e <_sbrk_r+0x1a>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	b103      	cbz	r3, 800cf7e <_sbrk_r+0x1a>
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
 800cf80:	2000a65c 	.word	0x2000a65c

0800cf84 <__malloc_lock>:
 800cf84:	4801      	ldr	r0, [pc, #4]	; (800cf8c <__malloc_lock+0x8>)
 800cf86:	f000 b809 	b.w	800cf9c <__retarget_lock_acquire_recursive>
 800cf8a:	bf00      	nop
 800cf8c:	2000a664 	.word	0x2000a664

0800cf90 <__malloc_unlock>:
 800cf90:	4801      	ldr	r0, [pc, #4]	; (800cf98 <__malloc_unlock+0x8>)
 800cf92:	f000 b804 	b.w	800cf9e <__retarget_lock_release_recursive>
 800cf96:	bf00      	nop
 800cf98:	2000a664 	.word	0x2000a664

0800cf9c <__retarget_lock_acquire_recursive>:
 800cf9c:	4770      	bx	lr

0800cf9e <__retarget_lock_release_recursive>:
 800cf9e:	4770      	bx	lr

0800cfa0 <_init>:
 800cfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa2:	bf00      	nop
 800cfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfa6:	bc08      	pop	{r3}
 800cfa8:	469e      	mov	lr, r3
 800cfaa:	4770      	bx	lr

0800cfac <_fini>:
 800cfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfae:	bf00      	nop
 800cfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfb2:	bc08      	pop	{r3}
 800cfb4:	469e      	mov	lr, r3
 800cfb6:	4770      	bx	lr
